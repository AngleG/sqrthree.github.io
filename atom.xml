<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[sqrtthree]]></title>
  <subtitle><![CDATA[O ever youthful, O ever weeping.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.sqrtthree.com/"/>
  <updated>2015-12-26T10:41:10.000Z</updated>
  <id>http://blog.sqrtthree.com/</id>
  
  <author>
    <name><![CDATA[sqrtthree]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JavaScript 开发者年度调查报告]]></title>
    <link href="http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/"/>
    <id>http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/</id>
    <published>2015-12-26T10:41:10.000Z</published>
    <updated>2015-12-26T10:41:10.000Z</updated>
    <content type="html"><![CDATA[<p>There were over 5000 responses, 5350 to be exact, and I can’t wait to share the details. Before that I want to thank everyone who chipped in. This is a great time to be a part of the JavaScript community, and I’m truly excited for things to come!</p>
<p>截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。</p>
<a id="more"></a>
<p>I didn’t anticipate such high interest, and next time I’ll make some improvements to the format. Namely, I’ll put the survey up on GitHub first so that the community can collaborate on the questions and options for a couple of weeks before launching the survey. That way, I’ll be able to produce more accurate results and avoid complaints like “I am shocked you didn’t include Emacs!”.</p>
<p>我没有想到大家如此积极，下一次我一定会对版式做一些改进。换句话说，就是我会先将问卷调查放到 <a href="https://github.com/" target="_blank" rel="external">Github</a> 上，以便于在开始调查之前，社区有一到两周的时间来收集改进问题和选项。这样，我就可以得到更精确的结果，也可以避免出现诸如 “我很震惊你竟然没有包含 Emacs” 这样的抱怨。</p>
<p>Now, onto the survey results. I’ll remain impartial in delivering the results, so that you can come to your own unbiased conclusions.</p>
<p>现在，基于调查结果。我将保持中立的态度发表一下调查结果，这样你就可以得出自己的公正的结论。</p>
<p>##What type of JavaScript do you write?</p>
<h2 id="你写什么类型的_Javascript？">你写什么类型的 Javascript？</h2><p>A whooping 97.4% of respondents write JavaScript for a web browser, while 37% of them write mobile web applications. Over 3000 of them – with 56.6% – also write server-side JavaScript. Among those who took the poll, 5.5% use JavaScript in some sort of embedded environment, such as Tessel or a Raspberry Pi.</p>
<p>有高达 97.4% 的受访者用 Javascript 写 web 浏览器程序，其中有 37% 的受访者写移动端 web 程序。超过 3000 人(56.6%) 也写服务端的 Javascript。在这些参与调查者的人中间，有 5.5% 的人还在一些嵌入式环境中使用 Javascript，例如 Tessel 或 a Raspberry Pi (树莓派).</p>
<p>A few participants replied they use JavaScript in some other places, notably in developing CLI and desktop applications. A few also mentioned Pebble and Apple TV. These fell in the <strong>Other</strong> category, with 2.2% of the votes.</p>
<p>少数参与者表示他们也在其他一些地方使用 Javascript，尤其是在开发 CLI 和桌面应用方面。还有少数提到了 Pebble 和 Apple TV. 这些都归类在 <strong>Other</strong> 一类中，占总票数的 2.2%.</p>
<p><img src="https://i.imgur.com/c0q4LvI.png" alt="An screenshot of the percentages for the first question"></p>
<h2 id="Where_do_you_use_JavaScript?">Where do you use JavaScript?</h2><h2 id="你在哪里使用_Javascript？">你在哪里使用 Javascript？</h2><p>Unsurprisingly, 94.9% of voters use JavaScript at work. However, a large portion of the tallied – with 82.3% of the votes – also use it on side projects. Other responses included for teaching and learning, for fun, and for non-profits.</p>
<p>不出所料的，94.9% 的参与者在工作中使用 Javascript，但是，统计中也有很大一部分(占总票数的 82.3%) 参与者也在其他项目中使用。其他的回复则包括了教学，好玩，和非盈利目的的使用。</p>
<p><img src="https://i.imgur.com/K5nSsyr.png" alt="An screenshot of the percentages for the second question"></p>
<h2 id="How_long_have_you_been_writing_JavaScript?">How long have you been writing JavaScript?</h2><h2 id="你写_Javascript_多长时间了？">你写 Javascript 多长时间了？</h2><p>Over 33% of the surveyed have been writing JavaScript code for over six years. Out of those who answered the poll, 5.2% started at most a year ago, 12.4% two years ago, and 15.1% three years ago. That makes it 32.7% people who started writing JavaScript in recent years, out of 5350 voters.</p>
<p>超过 33% 的受访者表示他们写 Javascript 代码已经超过了 6 年时间。除了这些人之外，有 5.2% 的人一年前开始写 Javascript 代码，12.4% 的人是两年前，还有 15.1% 的人是三年前。这说明在 5350 个投票者中，有 32.7% 的人是在近几年才开始写 Javascript 的。</p>
<p><img src="https://i.imgur.com/P5ev9fL.png" alt="An screenshot of the percentages for the third question"></p>
<h2 id="Which_compile-to-JavaScript_languages_do_you_use,_if_any?">Which compile-to-JavaScript languages do you use, if any?</h2><h2 id="如果可以的话，你使用哪种_compile-to-JavaScript_语言？">如果可以的话，你使用哪种 compile-to-JavaScript 语言？</h2><p>A whooping <strong>85%</strong> replied that they compile ES6 into ES5. Meanwhile 15% still use CoffeeScript, 15.2% use TypeScript, and a measly 1.1% reported they use Dart.</p>
<p>有高达 <strong>85%</strong> 的受访者表示他们使用 ES6 编译成 ES5。与此同时，有 15% 的人仍然使用 <code>CoffeeScript</code>，15.2% 的人使用 <code>TypeScript</code>，只有区区 1.1% 的人使用 <code>Dart</code>.</p>
<p>This was one of the questions I wish I’d approached more collaboratively, as it got 13.8% of <em>“Other”</em> responses. The vast majority of these answers were ClojureScript, elm, Flow, and JSX.</p>
<p>这是我想进一步探讨的问题之一，因为有 13.8% 的人选择了 <em>“Other”</em>，选择 <em>“Other”</em> 的绝大部分的回答是 <code>ClojureScript</code>, <code>elm</code>, <code>Flow</code>, 和 <code>JSX</code>.</p>
<p><img src="https://i.imgur.com/12mL6u6.png" alt="An screenshot of the percentages for the fourth question"></p>
<h2 id="What_JavaScript_stylistic_choices_do_you_prefer?">What JavaScript stylistic choices do you prefer?</h2><h2 id="你更喜欢哪一种_Javascript_编程风格？">你更喜欢哪一种 Javascript 编程风格？</h2><p>The vast majority of JavaScript developers who answered the poll seem to favor semicolons, at 79.9%. In contrast, 11% indicated they prefer not to use semicolons. When it comes to commas, 44.9% favor to place them after an expression, while 4.9% prefer to use comma-first syntax. When it comes to indentation, 65.5% prefer spaces, while 29.1% would rather use tabs.</p>
<p>回答这个问题的绝大多数开发者(79.9%)都选择了分号。相反，有 11% 的开发者指出更喜欢不使用分号。</p>
<p>逗号方面，44.9% 的开发者喜欢将逗号放在表达式的末尾，然而有 4.9% 的开发者喜欢先写逗号。</p>
<p>缩进方面，65.5% 的开发者更喜欢使用空格，然而有 29.1% 的开发者则更喜欢使用制表符(Tab)。</p>
<p><img src="https://i.imgur.com/xwFVmS1.png" alt="An screenshot of the percentages for the fifth question"></p>
<h2 id="Which_ES5_features_do_you_use?">Which ES5 features do you use?</h2><h2 id="你使用过_ES5_的哪些特性？">你使用过 ES5 的哪些特性？</h2><p>While 79.2% of respondents are on board with functional <code>Array</code> methods, and 76.3% indicated they use strict mode, <code>Object.create</code> sees a 30% adoption and getters and setters are only used by 28%.</p>
<p>79.2% 的受访者都使用过数组的一些功能方法，76.3% 的开发者使用严格模式。30% 的开发者使用 <code>Object.create</code>，而使用过 getters 和 setters 的开发者仅占了 28%.</p>
<p><img src="https://i.imgur.com/W9pUOua.png" alt="An screenshot of the percentages for the sixth question"></p>
<h2 id="Which_ES6_features_do_you_use?">Which ES6 features do you use?</h2><h2 id="你使用过_ES6_的哪些特性？">你使用过 ES6 的哪些特性？</h2><p>Notably, arrow functions are the most used ES6 feature among those who took the poll: 79.6%. Let and const together took 77.8% of the pollsters, and promises are also strong with 74.4% adoption. Unsurprisingly, only 4% of the respondents have played around with proxies. Only 13.1% of users indicated they’ve used symbols, while over 30% say they use iterators.</p>
<p>显然，在这些投票中，箭头函数是使用最多的 ES6 特性，占了 79.6%。在所有调查者中，Let 和 const 加在一起一共占了 77.8% 。promises 也有 74.4% 的开发者采用。不出所料，只有 4% 的参与者使用 proxies，只有 13.1% 的用户表示他们使用 symbols，同时有超过 30% 的人说他们使用 iterators.</p>
<p><img src="https://i.imgur.com/okcvuos.png" alt="An screenshot of the percentages for the seventh question"></p>
<h2 id="Do_you_write_tests?">Do you write tests?</h2><h2 id="你写测试么？">你写测试么？</h2><p>While 21.7% never write any tests, most do write some tests, and 34.8% always write tests.</p>
<p>有 21.7% 的开发者表示他们从不写任何测试。大部分人偶尔写一些测试。34.8% 的人总是写测试。</p>
<p><img src="https://i.imgur.com/0C944YL.png" alt="An screenshot of the percentages for the eighth question"></p>
<h2 id="Do_you_run_Continuous_Integration_tests?">Do you run Continuous Integration tests?</h2><h2 id="你运行持续集成测试吗？">你运行持续集成测试吗？</h2><p>There’s a similar story with CI, although many more people don’t use a CI server – over 40%. Almost 60% of respondents use CI at least sometimes, of which 32% always run tests on a CI serve.</p>
<p>和 CI 类似，尽管许多人(超过40%)不使用 CI 服务器，但是差不多有 60% 的人表示在少数时间会使用 CI，其中有 32% 的人总是在 CI 服务器上运行测试代码。</p>
<p><img src="https://i.imgur.com/P04bJHG.png" alt="An screenshot of the percentages for the ninth question"></p>
<h2 id="How_do_you_run_tests?">How do you run tests?</h2><h2 id="你怎么运行测试代码？">你怎么运行测试代码？</h2><p>59% like to run automated browser tests with PhantomJS or similar, and 51.3% also prefer to perform manual testing on a web browser. Automation in server-side tests amounts to 53.5% votes.</p>
<p>59% 的开发者喜欢使用 PhantomJS 或是类似的工具来运行自动化浏览器测试。也有 51.3% 的开发者喜欢在 web 浏览器上手动运行测试。有 53.5% 的投票者会在服务器端进行自动化测试。</p>
<p><img src="https://i.imgur.com/v09gVdQ.png" alt="An screenshot of the percentages for the tenth question"></p>
<h2 id="What_unit_testing_libraries_do_you_use?">What unit testing libraries do you use?</h2><h2 id="你使用过哪个单元测试库？">你使用过哪个单元测试库？</h2><p>It would seem most voters prefer either Mocha or Jasmine to run their JavaScript tests, although Tape received a healthy 9.8% of the ballots.</p>
<p>似乎大部分投票者都使用 Mocha 或是 Jasmine 来运行他们的 Javascript 测试用例。而 Tape 收到了 9.8% 的选票。</p>
<p><img src="https://i.imgur.com/20nUzJu.png" alt="An screenshot of the percentages for the eleventh question"></p>
<h2 id="What_code_quality_tools_do_you_use?">What code quality tools do you use?</h2><h2 id="你使用过哪个代码质量检测工具？">你使用过哪个代码质量检测工具？</h2><p>It would seem like respondents are divided between ESLint and JSHint, but JSLint is surprisingly strong after all these years, at almost 30%.</p>
<p>看起来受访者在 ESLint 和 JSHint之间分成了两派，但是 JSLint 还是有差不多 30% 的投票率，在这么多年之后势头还是惊人的强劲。</p>
<p><img src="https://i.imgur.com/RC8ePwr.png" alt="An screenshot of the percentages for the 12th question"></p>
<h2 id="How_do_you_prefer_handling_client-side_dependencies?">How do you prefer handling client-side dependencies?</h2><h2 id="你通过哪种方式来处理客户端依赖关系？">你通过哪种方式来处理客户端依赖关系？</h2><p>npm took over as the client-side dependency management system of choice, with 60% of the votes casted their way. Bower still holds 20% of the audience, and plain old <code>&lt;script&gt;</code> downloading and insertion managed to get 13.7% votes.</p>
<p>npm 接管了客户端依赖管理系统的天下，有超过 60% 的投票就是证明它的方式。Bower 仍然有 20% 的观众，而通过下载和插入 <code>&lt;script&gt;</code> 标签来管理的普通旧式方法则获得了 13.7% 的选票。</p>
<p><img src="https://i.imgur.com/TOQiSZP.png" alt="An screenshot of the percentages for the 13th question"></p>
<h2 id="What’s_your_preferred_build_script_solution?">What’s your preferred build script solution?</h2><h2 id="你首选的脚本构建方案是什么？">你首选的脚本构建方案是什么？</h2><p>Build tooling choices are divided, partially due to the healthy amount of different options to choose from. Gulp is the most popular, with over 40% of the votes. Using <code>npm run</code> is close by, at 27.8%, and Grunt got 18.5% of the audience.</p>
<p>构建工具的选择很分散，部分原因是有太多的不同的选项可供选择。Gulp 最流行，有着超过 40% 的选票，紧接着的是使用 <code>npm run</code>，有 27.8%。Grunt 得到了 18.5% 的支持者。</p>
<p><img src="https://i.imgur.com/xXlEE3E.png" alt="An screenshot of the percentages for the 14th question"></p>
<h2 id="What’s_your_preferred_JavaScript_module_loading_tool?">What’s your preferred JavaScript module loading tool?</h2><h2 id="你首选的_JavaScript_模块加载工具是什么？">你首选的 JavaScript 模块加载工具是什么？</h2><p>At the moment, it would seem as most people are torn between Browserify and Webpack, although the latter leads by almost 7 points. 29% of users indicated they use transpile Babel modules first, before presumably using one of the two aforementioned tools to pack their modules together.</p>
<p>目前，看起来大部分开发者都在 Browserify 和 Webpack 之间徘徊，而后者高出了 7 个百分点。29% 的用户表示他们在使用前面提到的这两个工具打包他们的模块之前会先使用 Babel 进行转换。</p>
<p><img src="https://i.imgur.com/pQPMC7V.png" alt="An screenshot of the percentages for the 15th question"></p>
<h2 id="What_libraries_do_you_use?">What libraries do you use?</h2><h2 id="你使用过哪些库？">你使用过哪些库？</h2><p>In retrospect, this was one of the questions which would’ve benefitted a lot from collaborative editing. jQuery is still going strong, with over 50% of votes casted its way. Lodash and underscore are used by a significant portion of the JavaScript population that participated in the voting, while the <code>xhr</code> micro library only clocked in 8% of the votes.</p>
<p>现在回顾起来，这是一个受益于协同编辑的问题之一。jQuery 获得了超过 50% 的选票证明了它依然很强劲。在参与投票的 JavaScript 使用者中，Lodash 与 Underscore 也被很大一部分开发者使用。 <code>xhr</code> 微型库只获得了 8% 的票数。</p>
<p><img src="https://i.imgur.com/7jAwy05.png" alt="An screenshot of the percentages for the 16th question"></p>
<h2 id="What_frameworks_do_you_use?">What frameworks do you use?</h2><h2 id="你使用过哪些框架？">你使用过哪些框架？</h2><p>Unsurprisingly, React and Angular are leading the pack. Backbone is still in a healthy position, with 22.8% of the votes.</p>
<p>毫无意外的，React 和 Angular 遥遥领先于其他框架，有着 22.8% 的 Backbone 仍然处在一个安全的位置。</p>
<p><img src="https://i.imgur.com/zpSAISK.png" alt="An screenshot of the percentages for the 17th question"></p>
<h2 id="Do_you_use_ES6…">Do you use ES6…</h2><h2 id="你使用_ES6_吗？">你使用 ES6 吗？</h2><p>Responses were quite divided in this question, with almost 20% never using ES6, over 10% using it exclusively, close to 30% using it extensively and almost 40% using it occasionally.</p>
<p>受访者在这个问题上的反应相当分歧，有近 20% 的人几乎从不使用 ES6，超过 10% 的人只写 ES6，接近 30% 的人广泛使用 ES6，近 40% 的人偶尔使用。</p>
<p><img src="https://i.imgur.com/hAnbtfN.png" alt="An screenshot of the percentages for the 18th question"></p>
<h2 id="Do_you_know_what’s_coming_in_ES2016?">Do you know what’s coming in ES2016?</h2><h2 id="你知道在即将到来的_ES2016_中会有什么特性吗？">你知道在即将到来的 ES2016 中会有什么特性吗？</h2><p>Roughly speaking, half of the voters don’t know what’s coming in ES2016, while the other half have an idea of what’s coming next.</p>
<p>粗略地说，有超过一半的投票者表示不知道即将到来的 ES2016 中会有什么特性。另一半则对接下来的版本有所了解。</p>
<p><img src="https://i.imgur.com/DxxOnco.png" alt="An screenshot of the percentages for the 19th question"></p>
<h2 id="Do_you_understand_ES6?">Do you understand ES6?</h2><h2 id="你了解_ES6_吗？">你了解 ES6 吗？</h2><p>Over 60% of respondents seem to understand the basics, while 10% have no idea about ES6 and over 25% consider they understand ES6 really well.</p>
<p>超过 60% 的受访者似乎了解基本的概念。10% 的人对 ES6 毫不了解，有 25% 的受访者认为他们非常了解 ES6。</p>
<p><img src="https://i.imgur.com/w6obK3X.png" alt="An screenshot of the percentages for the 20th question"></p>
<h2 id="Would_you_say_ES6_is_an_improvement?">Would you say ES6 is an improvement?</h2><h2 id="你认为_ES6_是一个进步吗？">你认为 ES6 是一个进步吗？</h2><p>Almost 95% of the respondents consider ES6 to be an improvement to the language. I’ll congratulate TC39 members next time I run into them!</p>
<p>超过 95% 的受访者认为 ES6 是对于 JavaScript 语言来说是一个进步，下一次碰到 TC39 的会员我得祝贺他们。</p>
<p><img src="https://i.imgur.com/c0RtfVK.png" alt="An screenshot of the percentages for the 21th question"></p>
<h2 id="What_are_your_preferred_text_editors?">What are your preferred text editors?</h2><h2 id="你更喜欢什么文本编辑器？">你更喜欢什么文本编辑器？</h2><p>Again, very divided because of the variety of options. Over half the respondents like Sublime Text, and over 30% like to use Atom, its open-source clone. Over 25% voted for WebStorm and also for vi/vim.</p>
<p>再一次，由于存在各种各样的选择导致结果非常分散。超过一半的受访者喜欢 <a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a>，超过 30% 的受访者喜欢使用 <a href="https://atom.io/" target="_blank" rel="external">atom</a> 和 它的开源克隆版。超过 25% 的选票投给了 WebStorm，也有 25% 的选票投给了 vi/vim.</p>
<p><img src="https://i.imgur.com/Vt8ve7s.png" alt="An screenshot of the percentages for the 22th question"></p>
<h2 id="What’s_your_preferred_development_OS?">What’s your preferred development OS?</h2><h2 id="你更喜欢使用什么操作系统用于开发?">你更喜欢使用什么操作系统用于开发?</h2><p>Over 60% of voters use Mac, while Linux and Windows users are close to 20% each.</p>
<p>超过 60% 的投票者使用 Mac，使用 Linux 和 Windows 的用户都接近 20%。</p>
<p><img src="https://i.imgur.com/PmLbtAo.png" alt="An screenshot of the percentages for the 23th question"></p>
<h2 id="How_do_you_find_reusable_code,_libraries_and_tools?">How do you find reusable code, libraries and tools?</h2><h2 id="你是通过哪种方式搜索到可重用的代码、库和工具的？">你是通过哪种方式搜索到可重用的代码、库和工具的？</h2><p>Respondents seem to favor GitHub and search engines, but there’s also a healthy dose of blogs, Twitter, and the npm website being consumed.</p>
<p>受访者似乎更青睐于 <a href="https://github.com" target="_blank" rel="external">GitHub</a> 和搜索引擎，但是也有一部分人使用博客，Twitter 和 npm 网站。</p>
<p><img src="https://i.imgur.com/HpmV9yz.png" alt="An screenshot of the percentages for the 24th question"></p>
<h2 id="Do_you_engage_in_social_JavaScript_events?">Do you engage in social JavaScript events?</h2><h2 id="你参加过_Javascript_的社会活动吗？">你参加过 Javascript 的社会活动吗？</h2><p>Almost 60% have attended at least a conference, while 74% indicated they like going to meetups.</p>
<p>有近 60% 的人参加过至少一次，74% 的人表示他们喜欢参加聚会。</p>
<p><img src="https://i.imgur.com/EnQWGzf.png" alt="An screenshot of the percentages for the 25th question"></p>
<h2 id="What_browsers_do_you_support_in_your_JavaScript_applications?">What browsers do you support in your JavaScript applications?</h2><h2 id="在你的_Javascript_应用中，你都支持哪些浏览器？">在你的 Javascript 应用中，你都支持哪些浏览器？</h2><p>Quite divided answers, but fortunately most of respondents don’t have to deal with customers on IE6 anymore.</p>
<p>这是相当分散的回答，但是好在大多数受访者表示他们不再处理使用 IE6 的客户(的问题)了。</p>
<p><img src="https://i.imgur.com/BV3eU0X.png" alt="An screenshot of the percentages for the 26th question"></p>
<h2 id="Do_you_learn_about_JavaScript_latest_features_on_a_regular_basis?">Do you learn about JavaScript latest features on a regular basis?</h2><h2 id="你会定期了解有关_Javascript_的最新特性吗？">你会定期了解有关 Javascript 的最新特性吗？</h2><p>Around 80% of respondents try and stay up to date when it comes to the latest JavaScript features.</p>
<p>有 80% 的受访者会尝试实时了解并保持学习 Javascript 的最新特性。</p>
<p><img src="https://i.imgur.com/5TZUW2i.png" alt="An screenshot of the percentages for the 27th question"></p>
<h2 id="Where_do_you_learn_about_the_latest_JavaScript_features?">Where do you learn about the latest JavaScript features?</h2><h2 id="你在哪了解最新的_JavaScript_特性？">你在哪了解最新的 JavaScript 特性？</h2><p>Unsurprisingly, the top-notch Mozilla Developer Network is leading the pack in terms of JavaScript documentation and news. JavaScript Weekly is also a very popular source of news and articles at almost 40% of respondents.</p>
<p>不出所料地，<a href="https://developer.mozilla.org/" target="_blank" rel="external">Mozilla 开发者网络</a> 在 Javascript 文档和新闻方面处于领先地位。<a href="http://javascriptweekly.com/" target="_blank" rel="external">JavaScript 周刊</a> 也是一个非常受欢迎的新闻和文章的直接来源，它有着超过 40% 的投票。</p>
<p><img src="https://i.imgur.com/7Jlg7zh.png" alt="An screenshot of the percentages for the 28th question"></p>
<h2 id="Which_of_these_features_have_you_heard_about?">Which of these features have you heard about?</h2><h2 id="你听说过下面哪些新特性？">你听说过下面哪些新特性？</h2><p>Over 85% of voters have heard about ServiceWorker, although I’d be curious to know how many of those have played around with it!</p>
<p>超过 85% 的人听说过 ServiceWorker，我很想知道这些人中有多少人使用过它。</p>
<p><img src="https://i.imgur.com/8o3Jq2R.png" alt="An screenshot of the percentages for the 29th question"></p>
<h2 id="What_languages_do_you_use_primarily,_besides_JavaScript?">What languages do you use primarily, besides JavaScript?</h2><h2 id="除了_JavaScript，你还主要使用哪些语言？">除了 JavaScript，你还主要使用哪些语言？</h2><p>There’s so many languages to choose from, I was bound to forget a few, but the results speak for themselves.</p>
<p>这有太多的语言可供选择，我肯定会漏掉一些。但是结果不言自明。</p>
<p><img src="https://i.imgur.com/Tv9NciV.png" alt="An screenshot of the percentages for the 30th question"></p>
<h2 id="Thanks!">Thanks!</h2><h2 id="谢谢">谢谢</h2><p>Lastly, I wanted to thank everyone who took part of the poll. It was far more popular than I anticipated and I’m looking forward to holding a similar poll next year. Hopefully, it’ll be one that’s even more diverse and perhaps a bit less biased.</p>
<p>最后，我想感谢参与此次调查的每一个人。这次调查的受欢迎程度超出了我的预期，我很期待明年再进行一次类似的调查。我希望，那将会是一个更多样性的，也许会再少一点偏见的调查。</p>
<p>What are your take-aways from the survey?</p>
<p>你从这次调查中获得了什么呢？</p>
<blockquote>
<p>本文根据 <a href="https://ponyfoo.com/" target="_blank" rel="external">ponyfoo</a> 的《<a href="https://ponyfoo.com/articles/javascript-developer-survey-results" target="_blank" rel="external">JavaScript Developer Survey Results</a>》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="https://ponyfoo.com/articles/javascript-developer-survey-results" target="_blank" rel="external">https://ponyfoo.com/articles/javascript-developer-survey-results</a></p>
</blockquote>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There were over 5000 responses, 5350 to be exact, and I can’t wait to share the details. Before that I want to thank everyone who chipped in. This is a great time to be a part of the JavaScript community, and I’m truly excited for things to come!</p>
<p>截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。</p>]]>
    
    </summary>
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端代码风格检查套件 FECS]]></title>
    <link href="http://blog.sqrtthree.com/2015/12/25/fecs/"/>
    <id>http://blog.sqrtthree.com/2015/12/25/fecs/</id>
    <published>2015-12-25T07:33:04.000Z</published>
    <updated>2015-12-25T07:33:04.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js<br>在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js</p>
</blockquote>
<p>This means strictly enforcing these agreed upon guidelines at all times. </p>
<a id="more"></a>
<p>今天要讲的不是代码规范，关于代码规范网上已经有了非常好的实践和各大公司公开的实践指南，大家可自行查询。 例如: <a href="http://zoomzhao.github.io/code-guide/" target="_blank" rel="external">code-guide chinese</a>.</p>
<p>然而，有了规范是一回事，执行起来又是一回事。今天要介绍的就是一款按照指定风格检测代码是否符合规范的工具，通过工具的自动检测，以确保每一行代码都符合规范。</p>
<h2 id="FECS_是什么？">FECS 是什么？</h2><p><a href="http://fecs.baidu.com/" target="_blank" rel="external">fecs</a> 是以百度前端代码规范为目标的基于 Node.js 的前端代码风格检测工具，套件内包括了 <code>htmlcs、csshint、lesslint</code> 和 <code>jformatter</code> 等工具。</p>
<p>因此，<code>fecs</code> 不仅能检查 <code>HTML/CSS/LESS/JavaScript</code> 代码的规范问题，而且还能修复代码的规范问题。</p>
<h2 id="FECS_能干什么？">FECS 能干什么？</h2><h3 id="fecs_check">fecs check</h3><p>首先，主要功能就是代码格式的检查，当然了呢，因为是最初是供于百度内部使用的工具，自然就是以 <a href="https://github.com/ecomfe/spec/" target="_blank" rel="external">百度前端代码规范</a> 为首要目标，好在该规范第一开源，第二还不错，因此可以直接使用。</p>
<p>当然了，如果你不喜欢其中的某些规则，<code>FECS</code> 也是支持配置文件设置规则的方式的，具体的在下文说明。</p>
<p>需要说明的是，<code>FECS</code> 目前只支持 <code>HTML/CSS/LESS/JavaScript</code> 四种文件和语法的检测。</p>
<h4 id="Javascript">Javascript</h4><p><code>Javascript</code> 方面 <code>FECS</code> 采用了 <code>eslint</code> 检测引擎，因此你在自定义规则的时候可以参考 <a href="http://esling.org/" target="_blank" rel="external">esling</a> 的文档进行相关配置。<code>FECS</code> 只是在 <code>eslint</code> 基础之上针对百度的代码规范作了新的规则实现或调整。详细内容见 <a href="https://github.com/ecomfe/fecs/wiki/FECSRules" target="_blank" rel="external">FECS 自有规则</a></p>
<h4 id="CSS/LESS/HTML">CSS/LESS/HTML</h4><p>CSS 的 linter 是使用了内部优化过的 <code>csshint</code>。LESS 和 HTML 方面则分别使用了 <code>lesslint</code> 和 <code>htmlcs</code>。</p>
<h2 id="FECS_的安装及其使用">FECS 的安装及其使用</h2><h3 id="安装">安装</h3><p>安装 <code>FECS</code> 需要依赖 <code>node</code> <code>npm</code> 环境支持，执行以下命令即可安装:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ [sudo] npm <span class="operator"><span class="keyword">install</span> fecs -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3><p>使用方式可使用以下命令查看:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fecs --help</span><br><span class="line">$ fecs<span class="instruction"> check </span>--help</span><br><span class="line">$ fecs format --help</span><br></pre></td></tr></table></figure>
<p>具体的命令参数？哎呀，官方已经写的够详细的了，还是看官方文档吧: <a href="https://github.com/ecomfe/fecs/wiki/CLI" target="_blank" rel="external">FECS 命令参数</a></p>
<h2 id="自定义配置">自定义配置</h2><p><code>FECS</code> 支持通过配置文件的方式指定特定的规则。</p>
<p>配置文件的支持来自 <code>manis</code>，支持使用 <code>.fecsrc</code> 或 <code>package.json</code>，但以第一个找到的为准。配置文件 <code>.fecsrc</code> 大体是这个样子的:</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"files"</span>: [],</span><br><span class="line"></span><br><span class="line">    <span class="string">"eslint"</span>: <span class="decorator">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"csshint"</span>: <span class="decorator">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"htmlcs"</span>: <span class="decorator">&#123;...&#125;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"csscomb"</span>: <span class="decorator">&#123;...&#125;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如说他们的<a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md" target="_blank" rel="external">JavaScript编码规范</a> 中关于换行中有这样一条 <a href="https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#建议-对于-ifelsetrycatchfinally-等语句推荐使用在--号后添加一个换行-的风格使代码层次结构更清晰阅读性更好" target="_blank" rel="external">对于if…else…try…catch…finally 等语句，推荐使用在 } 号后添加一个换行的风格，使代码层次结构更清晰，阅读性更好</a>，这一条我就很不喜欢嘛，那我可以这样配置:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">eslint</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">rules</span>": <span class="value">&#123;</span><br><span class="line">            "<span class="attribute">brace-style</span>": <span class="value">[<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123;&#125;]</span><br><span class="line">        </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>这样配置之后再进行检测，就能愉快的按照下面这种写法愉快的 coding 了。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125; <span class="tag">else</span> &#123;</span><br><span class="line">    <span class="comment">// some statements;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多工具支持">多工具支持</h2><p>详情支持列表请参考官方文档 <a href="https://github.com/ecomfe/fecs#工具支持" target="_blank" rel="external">工具支持</a>。</p>
<p>嗯。文档依旧写的很完善，基本上已经没什么好补充的了。</p>
<p>在这里我有一个小提示，就是工具对 <code>atom</code> 编辑器的支持相对于对 <code>sublime</code> 的支持来说要优秀很多， 包括检测速度呀，错误提示呀，<code>atom</code> 都略称一筹，这取决于 <code>atom</code> 优秀的插件机制。并且我在 <code>sublime</code>下面使用的时候发现了一个 bug，就是错误提示会显示为特殊编码导致无法以中文显示。解决方案呢，在这里<a href="https://github.com/leeight/Baidu-FE-Code-Style/issues/6" target="_blank" rel="external">https://github.com/leeight/Baidu-FE-Code-Style/issues/6</a>，不过感觉略麻烦的样子。</p>
<h2 id="Tips:">Tips:</h2><p><code>FECS</code> 的错误报告默认为英文格式，由各 linter 直接提供。<code>FECS</code> 根据百度前端代码规范，作了一次影射转换，通过指定 reporter 为 baidu 可以看到中文的报告输出效果，对于某些比较抽象的描述，会同时在括号内提供英文原文补充说明。</p>
<p>例如，你可以这样用: </p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fecs<span class="instruction"> check </span>--reporter=baidu</span><br></pre></td></tr></table></figure>
<p>或者，更直接一点，直接添加一个 <code>alias</code>，使其在执行 <code>fecs check</code> 命令时默认为中文输出。</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alias</span> fecs=<span class="attribute">'fecs</span> <span class="comment">--reporter=baidu'</span></span><br></pre></td></tr></table></figure>
<h2 id="相关链接:">相关链接:</h2><ul>
<li><a href="http://fecs.baidu.com/" target="_blank" rel="external">FECS 官网</a></li>
<li><a href="http://github.com/ecomfe/fecs/wiki" target="_blank" rel="external">FECS WIKI</a></li>
<li><a href="http://github.com/ecomfe/fecs" target="_blank" rel="external">FECS Github</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js<br>在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js</p>
</blockquote>
<p>This means strictly enforcing these agreed upon guidelines at all times. </p>]]>
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery 3.0 以及兼容版的 Alpha 版本发布]]></title>
    <link href="http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/"/>
    <id>http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/</id>
    <published>2015-11-11T16:14:23.000Z</published>
    <updated>2015-11-11T16:14:23.000Z</updated>
    <content type="html"><![CDATA[<p>It’s been a long time since we did a major release, and you certainly deserve one. So we’re glad to announce the first alpha of jQuery 3.0!</p>
<p>从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 <code>jQuery 3.0</code> 的第一个 <code>alpha</code> 版本的发布。</p>
<a id="more"></a>
<p>Despite the 3.0 version number, we anticipate that these releases shouldn’t be too much trouble when it comes to upgrading existing code. Yes, there are a few breaking changes that justified the major version bump, but we’re hopeful these breakages don’t actually affect that many people. The jQuery Migrate plugin can help you to identify compatibility issues in your code as well. Your feedback on the changes in this alpha will help us greatly, so please try it out on your existing code and plugins!</p>
<p>尽管版本号已经到了 3.0，但是在升级目前已经存在的代码时，可以预期这些发布不会造成太多的麻烦。确实，只是一些用来调整重要版本冲突的零碎改变，但是我们希望这些改变不会实际影响到很多人。<code>jQuery Migrate</code> 插件可以很好的帮助你在你的代码中识别出兼容性问题。在这个 <code>alpha</code> 版本中，你针对于这些变化的反馈将会极大的帮助我们，所以请在你目前已有的代码和插件中尝试一下。</p>
<p>There are actually two releases here. First is jQuery 3.0, which supports modern browsers and environments from IE9 forward. Second is jQuery Compat 3.0, which includes support for IE8. As an added bonus, both jQuery and jQuery Compat will include support for Yandex.Browser, a freeware browser released in 2012. You can get the files from the jQuery CDN, or link to them directly:</p>
<p>实际上，这里有两个版本。第一个版本是 <code>jQuery 3.0</code>, 这个版本支持现代浏览器和 <code>IE9</code> 以后的浏览器环境。第二个版本是 <code>jQuery Compat 3.0</code>，这个支持 <code>IE8</code>。作为一个额外的福利，就是 <code>jQuery</code> 和 <code>jQuery Compat</code> 这两个版本都支持 Yandex 浏览器(一个2012年发布的免费软件)。你可以从 jQuery CDN 或者直接通过下面这些链接获取这两个文件。</p>
<p><a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></p>
<p><a href="https://code.jquery.com/jquery-compat-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-compat-3.0.0-alpha1.js</a></p>
<p>You can also get the alpha versions from npm:</p>
<p>你也可以从 <code>npm</code> 中获取 alpha 版:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery@<span class="number">3.0</span><span class="number">.0</span>-alpha1</span><br><span class="line"></span><br><span class="line">npm install jquery-compat@<span class="number">3.0</span><span class="number">.0</span>-alpha1</span><br></pre></td></tr></table></figure>
<h4 id="Major_changes_(主要的变化)">Major changes (主要的变化)</h4><p>Below are just the highlights of the major new features, improvements, and bug fixes in these releases. A complete list of changes is available at the bottom of this post and on our GitHub issue tracker. On GitHub, you can additionally see the features we expect to put in later beta and final versions that have yet to land.</p>
<p>下面的这些内容只是高亮了这个版本中一些重要的新特性，代码的改进，还有一些 bug 的修复。在这篇文章下面和我们的 GitHub issue tracker 板块你可以看到一个完整的改变清单。在 Github 上，你还可以看到我们期待在下个 beta 版本和暂时还没发布的最终版中添加的新特性。</p>
<h5 id="Simplified_-show()_and_-hide()_methods:_简化的_show_和_hide_方法">Simplified <code>.show()</code> and <code>.hide()</code> methods: 简化的 show 和 hide 方法</h5><p>Everyone’s mental model of jQuery’s .hide() method is that it sets display: none in CSS. Conversely, .show() clears the display so that the element shows again (assuming its parents are not hidden). Simple, right?</p>
<p>每个人的心中都认为 <code>jQuery</code> 中的 <code>.hide()</code> 方法就是把元素设置为 <code>display:none</code>，相反的，<code>.show()</code> 方法就是清除 <code>display</code> 因此元素会重新显示(假设父级元素没有被隐藏)。很简单，对么？</p>
<p>Well, no. There are actually many complex special cases that people asked us to “fix” over the years, which turned these methods into a convoluted confluence of principles. For example, what if the element is set to display: none in a stylesheet? jQuery would try to override that by forcing display: block on the element directly. Okay, but what if a normally block element like <li> was set to display: inline by a different stylesheet rule? How about the case where you call these methods on an element before it’s been added to the document and we don’t know what display value it will have? Determining all of that takes extra work. Sometimes it’s still just a guess that turns out to be wrong.</li></p>
<p>不，这么多年来，实际上有很多复杂特殊的例子，人们要求我们去修正一下，这些例子使得这些方法陷入一个复杂的原理集合之中。例如，如果一个元素在样式表中设置为 <code>display: none</code> 将会怎样？<code>jQuery</code> 会试着在元素上强制设置 <code>display: block</code> 去覆盖它。这是可以的。但是像 <code>&lt;li&gt;</code> 这样的一个正常的块元素通过不同的样式规则被设置为 <code>display: inline</code> 会怎么样呢？在一个元素被添加到 <code>document</code> 之前你调用了这个方法并且我们不知道这个元素拥有的 <code>display</code> 值的话又会怎样？确定这些事情需要花费额外的工作。有时仅仅是一个最后被证明是错误的猜想。</p>
<p>Since these methods add a style attribute to the element, they don’t tend to play well with techniques like responsive design where the visibility of elements may also be set by media queries. This leads to the need for jQuery handlers that listen for the orientationchange or resize events and manually hide or show parts of the page; it defeats the elegant solution that media queries were trying to implement.</p>
<p>这些方法在元素上添加一个样式属性之后，在像是响应式设计中(元素的可见性需要通过媒体查询来设置)这样的技术上往往不能很好的表现。这个导致需要 <code>jQuery</code> 处理器去监听 <code>orientationchange</code> 或 <code>resize</code> 事件人工隐藏或显示部分页面；jQuery 打败了媒体查询正尝试实现的优雅的解决方案。</p>
<p>You can see that jQuery was already about halfway down the path to total madness, and it didn’t make sense to complete the journey. The special cases and checks were not only complex and incomplete, but they caused significant performance issues on large pages.</p>
<p>你可以看到 <code>jQuery</code> 已经完成了疯狂旅途中的一半路程了，但是完成整个旅程是行不通的。这个特殊的情况以及检查不仅复杂且难以完成，而且在大的页面中会造成具有重大意义的性能问题。</p>
<p>So, instead, we’re experimentally defying the evolution of these methods and reverting to a simple, primordial model. This will break some code. If you have elements in a stylesheet that are set to display: none, the .show() method will no longer override that. So the most important rule for moving to jQuery 3.0 is this: Don’t use a stylesheet to set the default of display: none and then try to use .show() – or any method that shows elements, such as .slideDown() and .fadeIn() – to make it visible.</p>
<p>因此，代替的是，我们实验性的反抗这些方法的演变，重新回归到一个简洁的，原始的模型。这将会分解一些代码。如果一个元素在样式表中被设置为 <code>display: none</code>，<code>.show()</code> 方法将不会再覆盖它。因此，转移到 jQuery 3.0 中有一个最重要的规则就是: 不要使用样式去设置 <code>display: none</code> 作为默认值，然后使用 <code>.show()</code> 或者其他方法来显示元素，例如使用 <code>.slideDown()</code> 和 <code>.fadeIn()</code> 方法来使它可见。</p>
<p>If you need an element to be hidden by default, the best way is to add a class name like “hidden” to the element and define that class to be display: none in a stylesheet. Then you can add or remove that class using jQuery’s .addClass() and .removeClass() methods to control visibility. Alternately, you can have a .ready() handler call .hide() on the elements before they are displayed on the page. Or, if you really must retain the stylesheet default, you can use .css(“display”, “block”) (or the appropriate display value) to override the stylesheet.</p>
<p>如果你需要让一个元素默认是隐藏状态，最好的方法是给元素添加一个像 <code>hidden</code> 这样的类名，然后在样式中去定义这个类为 <code>display: none</code>，然后你可以使用 <code>jQuery</code> 的 <code>.addClass()</code> 和 <code>.removeClass()</code> 方法来添加或删除这个类来控制其可见性。另外一种方法是，你可以在元素显示到页面中之前，使用 <code>.ready()</code> 处理器并在其中调用 <code>.hide()</code> 方法。或者，如果你一定要在样式中保留默认值，你可以使用 <code>.css(&quot;display&quot;, &quot;block&quot;)</code> (或其他合适的值)去覆盖样式。</p>
<p>We know that this is likely to be one of the most contentious and difficult changes in jQuery 3.0, so we wanted to put it out in this early release to see the effects. Please let us know how it affects your code and what you need to change in order to work with this new model.</p>
<p>我们知道这可能是 <code>jQuery 3.0</code> 中最受争议和最困难的改变，所以我们想把它放到这个早期版本中观察一下所造成的影响。请让我们知道这些改变如何影响了你的代码，以及你为了使用这个新版本所作出的改变。</p>
<p><a href="https://github.com/jquery/jquery/issues/1767" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1767</a><br><a href="https://github.com/jquery/jquery/issues/2057" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2057</a><br><a href="https://github.com/jquery/jquery/issues/2308" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2308</a></p>
<h5 id="Special_case_with_-data()_names:_含有-data()名字的特殊事例">Special case with .data() names: 含有.data()名字的特殊事例</h5><p>We have updated our .data() implementation to closer match the HTML5 dataset specification. All keys are now converted from kebab-case to camelCase, regardless of access method, and digits no longer participate in the conversion. For example, we will no longer differentiate between “foo-bar” and “fooBar”, but will differentiate between “foo-42” and “foo42”. These changes will mainly come into play when retrieving all data by calling .data() with no arguments, or when trying to access the data using a converted key (.data(“foo42”)) instead of the original (.data(“foo-42”)).</p>
<p><a href="https://github.com/jquery/jquery/issues/1751" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1751</a></p>
<p>我们也更新了我们的 <code>.data()</code> 方法来更有效的匹配 HTML5 dataset specification. 所有的键值现在都从 kebab-case 转换成驼峰命名法，不再理会访问方式，数字也不再参与转换。例如: 我们不再区分 <code>foo-bar</code> 和 <code>fooBar</code>，但是仍然区分 <code>foo-42</code> 和 <code>foo42</code>。当通过调用无参数的 <code>.data()</code> 来取得所有的数据方法，或者尝试通过转换的键名(.data(“foo42”))而不是原始的(.data(“foo-42”))来获取数据时，这些改变将会发挥主要作用。</p>
<h5 id="jQuery-Deferred_is_now_Promises/A+_compatible:_jQuery-Deferred现在兼容Promises/A+">jQuery.Deferred is now Promises/A+ compatible: jQuery.Deferred现在兼容Promises/A+</h5><p>jQuery.Deferred objects have been updated for compatibility with Promises/A+ and ES2015 Promises, verified with the Promises/A+ Compliance Test Suite. This meant the introduction of a .catch() method and some major changes to the .then() method:</p>
<p><code>jQuery.Deferred</code> 对象为了兼容 <code>Promises/A+</code> 和 <code>ES2015 Promises</code> 已经做出了更新，Promises/A+ Compliance Test Suite 检验。这意味着 引入一个 <code>.catch()</code> 方法，<code>.then()</code>方法也有一些重要的改变。</p>
<ul>
<li>An exception thrown in a .then() callback now becomes a rejection value. Previously, exceptions bubbled all the way up, aborting callback execution and irreversibly locking both the parent and child Deferred objects.</li>
<li><code>.then()</code> 方法的回调函数中抛出的异常现在变成了一个可注入的值。以前，异常会一直往上冒泡，直至终止回调函数的执行，然后不可撤销的锁定 parent and child Deferred 对象。</li>
<li>The resolution state of a Deferred created by .then() is now controlled by its callbacks—exceptions become rejection values and non-thenable returns become fulfillment values. Previously, returns from rejection handlers became rejection values.</li>
<li>通过 <code>.then()</code> 方法创建的 Deferred 对象的 resolution 状态现在被它的回调函数控制——异常成为了注入值，并且 non-thenable 返回的结果成为了 fulfillment 值。以前，从注入处理器返回变成了注入值。</li>
<li>Callbacks are always invoked asynchronously. Previously, they would be called immediately upon binding or resolution, whichever came last.</li>
<li>回调函数总是被异步调用。以前，它们根据绑定或是 resolution 被立即调用，无论哪个更晚一些。</li>
<li>Progress callbacks can no longer resolve Deferred objects to which they are bound.</li>
<li>Progress 回调函数不再解决受约束的 Deferred 对象。</li>
</ul>
<p>Consider the following, in which a parent Deferred is rejected and a child callback generates an exception:</p>
<p>考虑一下下面的代码，哪个parent Deferred 被注入以及 child 回调函数产生异常:</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = jQuery.Deferred();</span><br><span class="line"><span class="keyword">var</span> child = parent.then( <span class="literal">null</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"bar"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">callback</span> = <span class="function"><span class="keyword">function</span><span class="params">( state )</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">( value )</span> </span>&#123;</span><br><span class="line">    console.log( state, value );</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error( <span class="string">"baz"</span> );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> grandchildren = [</span><br><span class="line">  child.then( <span class="keyword">callback</span>( <span class="string">"fulfilled"</span> ), <span class="keyword">callback</span>( <span class="string">"rejected"</span> ) ),</span><br><span class="line">  child.then( <span class="keyword">callback</span>( <span class="string">"fulfilled"</span> ), <span class="keyword">callback</span>( <span class="string">"rejected"</span> ) )</span><br><span class="line">];</span><br><span class="line">parent.reject( <span class="string">"foo"</span> );</span><br><span class="line">console.log( <span class="string">"parent resolved"</span> );</span><br></pre></td></tr></table></figure>
<p>As of jQuery 3.0, this will log “parent resolved” before invoking any callback, each child callback will then log “fulfilled bar”, and the grandchildren will be rejected with Error “baz”. In previous versions, this would log “rejected bar” (the child Deferred having been rejected instead of fulfilled) once and then immediately terminate with uncaught Error “baz” (“parent resolved” not being logged and the grandchildren remaining unresolved).</p>
<p>在 jQuery 3.0 中，在调用任何回调之前会先记录 “parent resolved”，每一个子回调将会记录 “fulfilled bar”， 然后 grandchildren 将会和错误 “baz” 一起注入。在之前的版本中，会记录一次 “rejected bar” (child Deferred 已经注入而不是fulfilled)然后通过未捕获到的错误 “baz” 中断(“parent resolved” 不会被记录并且 grandchildren 会保持 unresolved 状态)。</p>
<p>While caught exceptions had advantages for in-browser debugging, it is far more declarative (i.e. explicit) to handle them with rejection callbacks. Keep in mind that this places the responsibility on you to always add at least one rejection callback when working with promises. Otherwise, any errors will go unnoticed.</p>
<p>当捕获异常时有利于在浏览器中进行 debug, 使用注入回调来处理异常非常具有描述性(即显式的)。记住这个地方，你有责任在使用 promises 时总是添加至少一个注入回调，否则，任何错误都不会提示。</p>
<p>Legacy behavior can be recovered by replacing use of .then() with the now-deprecated .pipe() method (which has an identical signature).</p>
<p>Legacy 行为可以通过使用现在还不宜用的 <code>.pipe()</code> 方法替换 <code>.then()</code> 方法来重新获取，</p>
<p>jQuery.when has also been updated to accept any thenable object, which includes native Promise objects.</p>
<p><code>jQuery.when</code> 方法也为了接受任何 thenable 对象而更新了，包括了原生的Promise对象。</p>
<p><a href="https://github.com/jquery/jquery/issues/1722" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1722</a><br><a href="https://github.com/jquery/jquery/issues/2102" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2102</a></p>
<h5 id="Removed_special-case_Deferred_methods_in_jQuery-ajax:_移除了jQuery-ajax中Deferred方法的一些特殊情况">Removed special-case Deferred methods in jQuery.ajax: 移除了jQuery.ajax中Deferred方法的一些特殊情况</h5><p>jqXHR object is a Promise, but also has extra methods like .abort() so that you can stop a request after it has been made.</p>
<p>jqXHR 对象是一个Promise，但是也有像 <code>.abort()</code> 这样的额外的方法。因此你可以在创建之后停止一个请求。</p>
<p>As users increasingly embrace the Promise pattern for asynchronous work like AJAX, the idea of having special cases for the Promise returned by jQuery.ajax is an increasingly bad idea.</p>
<p>随着用户越来越拥护类似像 AJAX 这样异步执行的 Promise 模式，通过 jQuery.ajax 进行 Promise 返回特殊事例的想法是越来越坏的主意。</p>
<p>success, error, complete<br>done, fail, always</p>
<p>Note that this does not have any impact at all on the callbacks of the same name, which continue to exist and are not deprecated. This only affects the Promise methods!</p>
<p>注意，这些对于相同名字的回调函数没有任何影响，它们将会继续存在，而且不会被弃用。这个只会影响Promise 方法！</p>
<p><a href="https://github.com/jquery/jquery/issues/2084" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2084</a></p>
<h5 id="Error_cases_don’t_silently_fail:_错误事例不会默默地失败">Error cases don’t silently fail: 错误事例不会默默地失败</h5><p>Perhaps in a profound moment you’ve wondered, “What is the offset of a window?” Then you probably realized that is a crazy question – how can a window even have an offset?</p>
<p>也许在一个重要的时刻你会想知道，“窗口的偏移量是多少？” 然后你可能会意识到这是一个疯狂的问题 - 窗口怎么会有偏移量？</p>
<p>In the past, jQuery has sometimes tried to make cases like this return something rather than having them throw errors. In this particular case of asking for the offset of a window, the answer up to now has been { top: 0, left: 0 } With this alpha of jQuery 3.0 we’re experimenting with the idea of having such cases throw errors so that crazy requests aren’t silently ignored. Please try the alpha and see if there is any code out there depending on jQuery to mask problems with invalid inputs.</p>
<p>在过去，jQuery 有时会尝试去创建类似返回一些东西的事例而不是抛出一个错误。在这个询问窗口的偏移量的特殊事例中，到目前为止答案已经变成了 <code>{ top: 0, left: 0 }</code>，在 <code>jQuery 3.0</code> 的 <code>alpha</code> 版本中，我们正在尝试抛出一个错误来让这些疯狂的请求不至于被默默地忽略掉这样的想法。请尝试使用 <code>alpha</code> 版本看一下是否存在一些依赖 <code>jQuery</code> 的代码出现无效输入的问题。</p>
<p><a href="https://github.com/jquery/jquery/issues/1784" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1784</a></p>
<p>.width(), .height(), .css(“width”), and .css(“height”) to return decimal values (whenever the browser does)</p>
<p><code>.width()</code>, <code>.height()</code>, <code>.css(“width”)</code>, 和 <code>.css(“height”)</code> 方法将返回带有小数点的数值(不论何时浏览器都会这样做)。</p>
<p>Previously, jQuery rounded values when retrieving width and height. Some browsers return subpixel values – such as IE and Firefox – and sometimes users need this precision when relying on these values for layout. We don’t expect this change to have a big impact on your code, but let us know if it does.</p>
<p>以前，当你获取  width 和 height 的时候 <code>jQuery</code> 会对其进行取整。有一些浏览器会返回亚像素值 - 例如 IE 和 Firefox，并且有时当布局依赖这些值时用户需要这种精确度的值。我们不希望这些改变会对你的代码产生很大的影响，但是如果确实影响到了，请让我们知道。</p>
<p><a href="https://github.com/jquery/jquery/issues/1724" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1724</a></p>
<h5 id="Removed_deprecated_event_aliases:_移除不赞成使用的事件别名">Removed deprecated event aliases: 移除不赞成使用的事件别名</h5><p>.load, .unload, and .error, deprecated since jQuery 1.8, are no more. Use .on() to register listeners.</p>
<p><code>.load</code>, <code>.unload</code>, 和 <code>.error</code>, 这些方法自从 <code>jQuery 1.8</code> 就已经弃用，而且永不使用。使用 <code>.on()</code> 注册监听器</p>
<p><a href="https://github.com/jquery/jquery/issues/2286" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2286</a></p>
<p>jQuery.swap, jQuery.buildFragment, and jQuery.domManip are no longer accessible on the jQuery object</p>
<p><code>jQuery.swap</code>, <code>jQuery.buildFragment</code>, 和 <code>jQuery.domManip</code> 不再从 <code>jQuery</code> 对象上获取。</p>
<p>These methods were always intended for internal use only and were never documented. We are finally making them private to avoid confusion.</p>
<p>这些方法常常仅在内部使用，而且也从来没有文档说明。为了避免疑惑，我们最终决定将他们私有化。</p>
<p><a href="https://github.com/jquery/jquery/issues/2224" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2224</a><br><a href="https://github.com/jquery/jquery/issues/2225" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2225</a></p>
<h5 id="Animations_now_use_requestAnimationFrame:动画现在使用requestAnimationFrame">Animations now use requestAnimationFrame:动画现在使用requestAnimationFrame</h5><p>On platforms that support the requestAnimationFrame API, which is pretty much everywhere but IE8 and IE9, jQuery will now use that API when performing animations. This should result in animations that are smoother and use less CPU time – and save battery as well on mobile devices.</p>
<p>除了 <code>IE8</code> 和 <code>IE9</code> 之外，越来越多的平台都支持 <code>requestAnimationFrame</code> API，<code>jQuery</code> 现在在执行动画的时候也使用了此 API。这样的结果是会让动画越来平滑流畅，并且使用更少的 CPU 时间，在移动设备上也尽可能好的保存电量。</p>
<p>jQuery tried using requestAnimationFrame a few years back but there were serious compatibility issues with existing code so we had to back it out. We think we’ve beaten most of those issues by suspending animations while a browser tab is out of view. Still, any code that depends on animations to always run in nearly real-time is making an unrealistic assumption.</p>
<p><code>jQuery</code> 尝试使用 <code>requestAnimationFrame</code> 了一些年头，但是在目前的代码中有一些很严重的兼容性问题，因此我们又把它撤销回去了。我们认为我们通过当浏览器标签页移出视野时暂停动画这种方式已经解决了这些问题中的大多数。然而，在真实的运行时环境中，任何依赖于动画的代码一直运行是一个不切实际的假想。</p>
<h5 id="-unwrap(_selector_)">.unwrap( selector )</h5><p>Before jQuery 3.0, the .unwrap() method did not take any arguments. The selector parameter offers a way to be specific about which wrappers to remove.</p>
<p>在 <code>jQuery 3.0</code> 之前，<code>.unwrap()</code> 方法不接收任何参数。selector 参数提供了一个确定哪个包装器该被移出的方式。</p>
<p><a href="https://github.com/jquery/jquery/issues/1744" target="_blank" rel="external">https://github.com/jquery/jquery/issues/1744</a></p>
<h5 id="Massive_speedups_for_some_jQuery_custom_selectors">Massive speedups for some jQuery custom selectors</h5><p>Thanks to some detective work by Paul Irish at Google, we identified some cases where we could skip a bunch of extra work when custom selectors like :visible are used many times in the same document. That particular case is up to 17 times faster now!</p>
<p>感谢来自 Google 的 Paul Irish 所做出的一些排查工作，我们才可以识别出我们可以跳过的一些额外工作，像是 <code>:visible</code> 这样的常规的选择器在一个文档中使用好多次。特定的事例中现在在性能上能比以前快 17 倍。</p>
<p>Keep in mind that even with this improvement, selectors like :visible and :hidden can be expensive because they depend on the browser to determine whether elements are actually displaying on the page. That may require, in the worst case, a complete recalculation of CSS styles and page layout! While we don’t discourage their use in most cases, we recommend testing your pages to determine if these selectors are causing performance issues.</p>
<p>记住，即使这些事情改善了，像是 <code>:visible</code> 和 <code>:hidden</code> 这样的选择器也是很昂贵的，因为它们依赖于浏览器来决定什么时候元素确实显示在页面上。可能需要的是，在最差的情况中，CSS 样式和页面布局需要完整的重绘。尽管在大多数情况下我们不阻止使用他们，但是我们推荐你在你的页面上测试一下来确定这些选择器是否会造成一些性能问题。</p>
<p><a href="https://github.com/jquery/jquery/issues/2042" target="_blank" rel="external">https://github.com/jquery/jquery/issues/2042</a></p>
<h5 id="译者注:">译者注:</h5><p>具体的更新内容列表没有在此翻译，如果想具体了解请自行查看英文原文。</p>
<blockquote>
<p>本文根据 <a href="http://blog.jquery.com/author/timmywil/" target="_blank" rel="external">Timmy Willison</a> 的《jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Released》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/" target="_blank" rel="external">http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/</a></p>
</blockquote>
<h2 id="相关链接">相关链接</h2><ul>
<li>jQuery 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
<li>jQuery compat 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>It’s been a long time since we did a major release, and you certainly deserve one. So we’re glad to announce the first alpha of jQuery 3.0!</p>
<p>从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 <code>jQuery 3.0</code> 的第一个 <code>alpha</code> 版本的发布。</p>]]>
    
    </summary>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My Code Wars v0.1]]></title>
    <link href="http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/"/>
    <id>http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/</id>
    <published>2015-11-06T02:04:46.000Z</published>
    <updated>2015-11-06T02:04:46.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这里讲述的是一个8级（kyu）菜鸟立志成为8段（dan）大神的故事。故事的起因是这样的。菜鸟有幸发现了<a href="http://www.codewars.com/" title="codewars" target="_blank" rel="external">codewars</a>这个网站，从此沉迷于内一发不可收拾，他在代码战争中一次次遭遇挫败，又一次次爬起来继续跌倒下去。欲知详情，且看『迈向7级的第一个脚印』。</p>
<p>遥想当年自高自大，而今终知天外有天。</p>
</blockquote>
<h3 id="Description:">Description:</h3><p>The numberOfOccurrences function must return the number of occurrences of an element in an array.</p>
<a id="more"></a>
<h3 id="Example:">Example:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.numberOfOccurrences(<span class="number">0</span>) === <span class="number">1</span>;</span><br><span class="line">arr.numberOfOccurrences(<span class="number">4</span>) === <span class="number">0</span>;</span><br><span class="line">arr.numberOfOccurrences(<span class="number">2</span>) === <span class="number">2</span>;</span><br><span class="line">arr.numberOfOccurrences(<span class="string">"a"</span>) === <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="菜鸟出招">菜鸟出招</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.numberOfOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[i] == num) &#123;</span><br><span class="line">            total++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="菜鸟思维">菜鸟思维</h3><ol>
<li>利用数组遍历</li>
<li>如果数值相等则加1</li>
<li>返回标记总数的变量</li>
</ol>
<h3 id="偷师学艺">偷师学艺</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.numberOfOccurrences = <span class="function"><span class="keyword">function</span>(<span class="params">search</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> search === num</span><br><span class="line">    &#125;).length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="关键字积累">关键字积累</h3><ul>
<li>prototype</li>
<li>filter</li>
</ul>
<h3 id="菜鸟总结">菜鸟总结</h3><p><code>filter()</code>是 <code>ECMAScirpt 5</code> 中规定的数组方法，返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回 <code>true</code> 或是 <code>false</code>。如果返回值为 <code>true</code> 或是能转化为 <code>true</code> 的值，那么传递给判定函数的元素就是这个子集的成员，它将被添加到一个作为返回值的的数组中。</p>
<p><code>filter()</code> 会跳过稀疏数组中缺少的元素，它的返回值总是稠密的。为了压缩稀疏数组的空缺，代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dense = sparse.filter(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果压缩空缺并删除 <code>undefined</code> 和<code>null</code>元素，代码如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = a.filter(<span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[这里记录了我在 codewars 网站上的一些收获。]]>
    
    </summary>
    
      <category term="myCodeWars" scheme="http://blog.sqrtthree.com/tags/myCodeWars/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery 3.0——下一代的jQuery]]></title>
    <link href="http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/"/>
    <id>http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/</id>
    <published>2015-11-05T03:42:00.000Z</published>
    <updated>2015-11-05T03:42:00.000Z</updated>
    <content type="html"><![CDATA[<p>2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 <code>jQuery 3.0.0-alpha1</code> 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 <code>3.0</code> 中的新特性的话可以关注我后续的更新。</p>
<a id="more"></a>
<h3 id="正文开始">正文开始</h3><p>It’s hard to believe it’s been nearly eight years since jQuery was released. Web development has changed a lot over the years, and jQuery has changed along with it. Through all of this time, the team has tried to walk the line between maintaining compatibility with code from the past versus supporting the best web development practices of the present.</p>
<p>很难相信从 <code>jQuery</code> 发布以来已经过去八年了，过去的这些年 Web 开发已经改变了很多， <code>jQuery</code> 也随之变化着。在这个过程中，团队一直在保持对旧代码的兼容性和支持目前最好的 Web 开发实践之间努力平衡着。</p>
<p>One of those best practices is semantic versioning, or semver for short. In a practical sense, semver gives developers (and build tools) an idea of the risk involved in moving to a new version of software. Version numbers are in the form of MAJOR.MINOR.PATCH with each of the three components being an integer. In semver, if the MAJOR number changes it indicates there are breaking changes in the API and thus developers need to beware.</p>
<p>其中最好的做法就是语义化版本，或者简单的称之为 <a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a>，从实践的角度看，<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a> 给了开发者(以及构建工具) 一个避免由于切换软件版本导致的风险的方法。版本号为 <code>MAJOR.MINOR.PATCH</code> 的格式，并且其三个组成部分均为整数。在<a href="http://semver.org/lang/zh-CN/" target="_blank" rel="external">semver</a> 中，如果 <code>MAJOR</code> 改变了，就意味着在 API 中出现了不兼容的改变，因此开发者们需要当心。</p>
<p>The concept of versioning gets a little more nuanced with jQuery, where browser compatibility can be just as important as API compatibility. In order to create a slimmer jQuery, the team started shipping two versions in 2013. The first version remained numbered in the 1.x line and, currently at 1.11.1, maintains compatibility with a maximal number of browsers. The second version, starting with 2.0.0 and now at 2.1.1, dropped support for browsers like IE8 or lower in order to streamline the code. Both the 1.x and 2.x versions of jQuery have the same public APIs, even though they differ somewhat in their internal implementations.</p>
<p>在 <code>jQuery</code> 中版本控制变得更加微妙，(对 jQuery 来说) 浏览器的兼容性和 API 的兼容性同等重要。为了创造一个 “苗条” 的 <code>jQuery</code> ，团队在2013年开始放出了两个版本。第一个版本保持着 1.x 的编号，当前(截止到原文发布时)最新版本为 1.11.1，其保持了最大数量的浏览器兼容性。第二个版本从 2.0.0 开始，目前是 2.1.1，为了精简代码，放弃了对 IE8及其以下版本浏览器的支持。1.x 和 2.x 版本的  <code>jQuery</code> 都有着相同的公开 API，尽管他们在内部实现上有一些不同。</p>
<p>Our next releases will use a different nomenclature. As before, there will be two different released files. The successor to what is now version 1.11.1 will become jQuery Compat 3.0. The successor to jQuery 2.1.1 will be jQuery 3.0. There are two different packages on npm and Bower, but they share the same version to indicate they have the same API behavior.</p>
<p>我们的下一个版本将会使用一种全新的命名方式。像之前一样，仍然会有两个不同的发布文件。现在的 <code>1.11.1</code> 版本的继任者将被称之为 <code>jQuery Compat 3.0</code>。<code>jQuery 2.1.1</code> 则将由 <code>jQuery 3.0</code>来接替。在 <code>npm</code> 和 <code>Bower</code> 上(译者注: 这是目前非常流行的前端包管理工具)，它们会是两个不同的包，但它们会共享同一个版本号，来说明它们在API层面上的行为是一致的。</p>
<p>We’ll also be re-aligning our policy for browser support starting with these releases. The main jQuery package remains small and tight by supporting the evergreen browsers (the current and previous versions of a specific browser) that are common at the time of its release. We may support additional browsers in this package based on market share. The jQuery Compat package offers much wider browser support, but at the expense of a larger file size and potentially lower performance.</p>
<p>这次版本发布之后，我们也将调整对浏览器的支持策略。主 <code>jQuery</code> 包将继续保持短小精悍，并且只支持在发布之时广泛使用的常青浏览器(evergreen browsers 指的是特定浏览器的当前和此前的若干版本)。我们也会根据市场份额在这个包的基础上支持更多的浏览器。而 <code>jQuery Compat</code> 包则提供更广泛的浏览器支持，但是付出的代价就是文件变得很大，执行效率也会低一些。</p>
<p>Despite the big version number jump, we don’t anticipate a lot of migration issues for most current jQuery code. We’re just being good semver citizens with this version bump. Changes such as removing deprecated methods will be detected by a new version of the jQuery Migrate plugin to make them easy to find and fix. We’ll have more details on the changes in future blog posts.</p>
<p>尽管这一次版本号跳跃很大，但是对于大多数 <code>jQuery</code> 代码来说，我们不期望造成很多的代码迁移问题。我们在这次版本升级中可是符合 <code>semver</code> 中的好公民的标准的。诸如像移除已废弃的方法这样的改变会被新版本的 <code>jQuery Migrate</code> 插件检测出来，这样一来，发现并且修复他们就变得容易多了。我们也会在将来的博客文章中讨论这些变化中的更多细节。</p>
<p>So, here’s the TL;DR for version 3.0 of the jQuery API:</p>
<p>下面就是一些 <code>jQuery API</code> 3.0 版本要说的内容：</p>
<ul>
<li>If you need support for the widest variety of browsers including IE8, Opera 12, Safari 5, and the like, use the jQuery-Compat 3.0.0 package. We recommend this version for most web sites, since it provides the best compatibility for all website visitors.</li>
<li>如果你需要支持更多更广泛的浏览器，包括诸如 <code>IE8, Opera 12, Safari 5</code> 等，请使用 <code>jQuery-Compat 3.0.0</code> 版本。我们建议大多数网站都使用这一版本，因为它为网站的来访者提供了最好的兼容性支持。</li>
<li>If your web site is built only for evergreen leading-edge browsers, or is an HTML-based app contained in a webview (for example PhoneGap or Cordova) where you know which browser engines are in use, go for the jQuery 3.0.0 package.</li>
<li>如果你的网站仅仅是为了那些最先进的浏览器而建，或者仅仅是一个基于 <code>HTML</code> 的应用以嵌入一个 <code>web</code> 视图(例如: PhoneGap，Cordova)，你预先知道其使用的是哪一个浏览器解析引擎， 那就使用 <code>jQuery 3.0.0</code> 吧。</li>
<li>Until we announce otherwise, both packages will contain the same public APIs in correspondingly-numbered major and minor versions. This should make it easy for developers to switch between the two and be maximally compatible with third-party jQuery plugins.</li>
<li>除非我们宣布，否则对应的主、次版本号相同的两个包都会有相同的公开 API。这样开发者就能够很容易的在两个包之间切换，并且在第三方 <code>jQuery</code> 插件中拥有最好的兼容性。</li>
</ul>
<p>With each future release, we’ll be making both packages available on npm and bower. Both packages will also be available as single-file builds on the jQuery CDN. Using them from there is as simple as including either jquery-compat-3.0.0.js or jquery-3.0.0.js depending on your needs. We’ve talked with the folks who run Google’s CDN and they will also be supporting both packages.</p>
<p>未来每一个版本发布的时候，我们都会同时放到 <code>npm</code> 和 <code>bower</code> 上。两个包也会以单个文件的形式在 <code>jQuery CDN</code> 上提供。在那里使用他们和根据你自己的需要去包含 <code>jquery-compat-3.0.0.js</code> 或<code>jquery-3.0.0.js</code> 一样简便。我们也和 Google’s CDN 的运营人员谈过，他们也会为这两个包提供支持。</p>
<p>As we make further progress on version 3.0, we will update everyone with the details about code changes, supported browsers, and the like. Stay tuned!</p>
<p>随着我们在3.0版本方面工作的推进，我们会向所有人告知代码变更、浏览器支持等一切细节的更新。敬请期待吧！</p>
<blockquote>
<p>本文根据 <a href="http://blog.jquery.com/author/dmethvin/" target="_blank" rel="external">Dave Methvin</a> 的《jQuery 3.0: The Next Generations》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：<a href="http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/" target="_blank" rel="external">http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/</a></p>
</blockquote>
<h2 id="相关链接">相关链接</h2><ul>
<li>jQuery 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
<li>jQuery compat 3.0.0-alpha1: <a href="https://code.jquery.com/jquery-3.0.0-alpha1.js" target="_blank" rel="external">https://code.jquery.com/jquery-3.0.0-alpha1.js</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 <code>jQuery 3.0.0-alpha1</code> 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 <code>3.0</code> 中的新特性的话可以关注我后续的更新。</p>]]>
    
    </summary>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于社区和初心，关于感激和致歉]]></title>
    <link href="http://blog.sqrtthree.com/2015/11/04/about-fetalk/"/>
    <id>http://blog.sqrtthree.com/2015/11/04/about-fetalk/</id>
    <published>2015-11-03T16:56:41.000Z</published>
    <updated>2015-11-03T16:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>转眼之间，接触前端开发这个领域马上就三年了，想想这三年来一路上的跌跌撞撞，想想曾经 “厕所后面喝过水、火车道上轧过腿” 的岁月，一片恍惚，仿佛又看到了那个在夕阳下奔跑的自己，那是我逝去的青春呐。</p>
<p>前端开发是很有意思的一件事，在我眼里她不仅仅是一份工作，更像是一门艺术，通过你的手，能够创造出一个五彩缤纷的世界，我觉得在程序的世界里，你就是上帝，你说”要有水”，于是就有了水。 你的艺术作品，让世界变得更加美好一点点。</p>
<a id="more"></a>
<p>你还记得自己当初为什么要选择做前端开发么？是为了随处找一个效果凑合满足业务需求还是想去理解其原理只为能创造出更完美的艺术品？</p>
<p>你或曾有过激情，或曾有过梦想，但当你的KPI考核点是PM那些荒唐的改来改去的功能点，多炽热的火焰也会被浇灭。因此你必须要搞出一点东西出来，努力爬上去。是废命于加班，天天随便复制点代码满足业务，还是专注于技术底层的研发，为某个难题而苦恼，其实完全在于你一念之差。不要因为走得太远，就忘记了当初为什么出发。</p>
<p>实际上呆在郑州的这两年多时间里，也接触了一些前端开发者，由于某种不难想象的原因，导致整个大环境确实是不太理想的，普遍存在的现象是新人们或空有一颗学习的心但是不知道该学什么、怎么学，或由于环境浮躁导致从一开始就养成了很多的坏习惯，由于没有合适的渠道，大牛们也没办法有效的分享自己的经验技巧。在圈子里遇到的最多的诸如 “你们谁有某某效果，借我用一下”之类的。</p>
<p>前段时间跟朋友聊天的时候抱怨说一直找不到高质量的交流群或社区，后来就突然想到，既然没有，为什么我们不自己做一个呢？本着一方面可以给新人提供一个学习的方向，另一方面也尝试改善一下大环境，努力营造一个良好的交流氛围，<a href="http://fetalk.xyz/" target="_blank" rel="external">FETalk</a> 就这样诞生了。</p>
<p>开始着手后，我发现这比想象的要困难得多。由于之前接触过一点 <code>NodeJS</code>，又混迹于 <code>CNode</code> 社区，很自然的采用了通过 <code>NodeJS</code> 开发的一个社区框架。实际上最大的问题在于之前从未接触过服务器相关的知识，所以当开始尝试部署服务器环境的时候遇到了各种诡异和头疼的问题。要感谢那些帮助和支持我的朋友，还有那些帮助过我的文章，没有你们，着实很难做出来。另外一个严重的问题就是时间不够用，平时工作上和自己私下的学习计划加起来，已经使我的睡眠时间没法保障了，意识到很难按照之前计划的时间进度完成后，我经常很焦虑，因为心理素质不好，我有时候还会为了这个焦虑而焦虑。有那么几次，我甚至对于要不要坚持开发完都感到非常犹豫。</p>
<p>后来……后来我想到了生活中一个令人悲愤的真相:『以大多数人的努力程度之低，根本轮不到拼天赋』</p>
<p>为了尝试改变一点什么，我最后坚持把这个社区做出来了，就是这样。</p>
<h2 id="相关链接">相关链接</h2><p>社区取名为 <code>FETalk</code>，意为 <code>Front-End Talk</code> 的缩写，地址是 <a href="http://fetalk.xyz/" target="_blank" rel="external">http://fetalk.xyz/</a></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转眼之间，接触前端开发这个领域马上就三年了，想想这三年来一路上的跌跌撞撞，想想曾经 “厕所后面喝过水、火车道上轧过腿” 的岁月，一片恍惚，仿佛又看到了那个在夕阳下奔跑的自己，那是我逝去的青春呐。</p>
<p>前端开发是很有意思的一件事，在我眼里她不仅仅是一份工作，更像是一门艺术，通过你的手，能够创造出一个五彩缤纷的世界，我觉得在程序的世界里，你就是上帝，你说”要有水”，于是就有了水。 你的艺术作品，让世界变得更加美好一点点。</p>]]>
    
    </summary>
    
      <category term="FETalk" scheme="http://blog.sqrtthree.com/tags/FETalk/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3、Supervisor 部署和配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/"/>
    <id>http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/</id>
    <published>2015-10-20T16:08:41.000Z</published>
    <updated>2015-10-20T16:08:41.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。</p>
<h3 id="安装">安装</h3><p><code>Ubuntu</code> 可以直接通过 <code>apt</code> 安装：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install supervisor</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="配置文件详解">配置文件详解</h3><p><code>supervisor</code> 通过对应的配置文件来进行进程的监控和管理，因此安装完成之后我们需要给将要监控的进程写一个配置文件。每个进程的配置文件都建议单独分拆，放在 <code>/etc/supervisor/conf.d/</code> 目录下，以 <code>.conf</code> 作为扩展名。如我们的 <code>shadowsocks.conf</code> 配置文件。</p>
<p>下面是配置文件的格式和支持的参数，只需要写我们需要配置的参数即可。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[supervisorctl]</span><br><span class="line">serverurl=<span class="string">unix:</span><span class="comment">///tmp/supervisor.sock ; use a unix:// URL  for a unix socket</span></span><br><span class="line">;serverurl=<span class="string">http:</span><span class="comment">//127.0.0.1:9001 ; use an http:// url to specify an inet socket</span></span><br><span class="line">;username=chris              ; should be same <span class="keyword">as</span> http_username <span class="keyword">if</span> set</span><br><span class="line">;password=<span class="number">123</span>                ; should be same <span class="keyword">as</span> http_password <span class="keyword">if</span> set</span><br><span class="line">;prompt=mysupervisor         ; cmd line prompt (<span class="keyword">default</span> <span class="string">"supervisor"</span>)</span><br><span class="line">;history_file=~/.sc_history  ; use readline history <span class="keyword">if</span> available</span><br><span class="line">添加单个进程</span><br><span class="line"></span><br><span class="line">; 管理单个进程的配置，可创建多个，下面是所有可能的配置选项</span><br><span class="line">;[<span class="string">program:</span>theprogramname]</span><br><span class="line">;command=<span class="regexp">/bin/</span>cat              ; 启动进程的命令 使用相对路径，可以加参数</span><br><span class="line">;process_name=%(program_name)s ; 进程名称 表达式 (默认 %(program_name)s)</span><br><span class="line">;numprocs=<span class="number">1</span>                    ; 进程数目 (<span class="keyword">def</span> <span class="number">1</span>)</span><br><span class="line">;directory=/tmp                ; 执行命令所在的目录 (<span class="keyword">def</span> no cwd)</span><br><span class="line">;umask=<span class="number">022</span>                     ; 进程默认权限 (<span class="keyword">default</span> None)</span><br><span class="line">;priority=<span class="number">999</span>                  ; 进程启动相对优先权 (<span class="keyword">default</span> <span class="number">999</span>)</span><br><span class="line">;autostart=<span class="literal">true</span>                ; 跟随supervisor启动时启动 (<span class="string">default:</span> <span class="literal">true</span>)</span><br><span class="line">;autorestart=unexpected        ; 计划启动 (<span class="string">default:</span> unexpected)</span><br><span class="line">;startsecs=<span class="number">1</span>                   ; 延时启动 (<span class="keyword">def</span>. <span class="number">1</span>)</span><br><span class="line">;startretries=<span class="number">3</span>                ; 最多连续启动失败 (<span class="keyword">default</span> <span class="number">3</span>)</span><br><span class="line">;exitcodes=<span class="number">0</span>,<span class="number">2</span>                 ; 进程结束代码 (<span class="keyword">default</span> <span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">;stopsignal=QUIT               ; signal used to kill process (<span class="keyword">default</span> TERM)</span><br><span class="line">;stopwaitsecs=<span class="number">10</span>               ; 最长结束等待时间，否则使用 SIGKILL (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stopasgroup=<span class="literal">false</span>             ; 是否想UNIX进程组发送结束信号 (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;killasgroup=<span class="literal">false</span>             ; SIGKILL UNIX 进程组 (<span class="keyword">def</span> <span class="literal">false</span>)</span><br><span class="line">;user=chrism                   ; 设置启动此程序的用户</span><br><span class="line">;redirect_stderr=<span class="literal">true</span>          ; 重定向程序的标准错误到标准输出 (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;stdout_logfile=<span class="regexp">/a/</span>path        ; 标准输出的日志路径, NONE <span class="keyword">for</span> none; <span class="keyword">default</span> AUTO</span><br><span class="line">;stdout_logfile_maxbytes=<span class="number">1</span>MB   ; 日志文件最大值，否则循环写入 (<span class="keyword">default</span> <span class="number">50</span>MB)</span><br><span class="line">;stdout_logfile_backups=<span class="number">10</span>     ; 标准输出日志备份数目 (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stdout_capture_maxbytes=<span class="number">1</span>MB   ; number of bytes <span class="keyword">in</span> <span class="string">'capturemode'</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line">;stdout_events_enabled=<span class="literal">false</span>   ; emit events on stdout writes (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;stderr_logfile=<span class="regexp">/a/</span>path        ; 标准错误输出日志路径, NONE <span class="keyword">for</span> none; <span class="keyword">default</span> AUTO</span><br><span class="line">;stderr_logfile_maxbytes=<span class="number">1</span>MB   ; 日志文件最大值，否则循环写入 (<span class="keyword">default</span> <span class="number">50</span>MB)</span><br><span class="line">;stderr_logfile_backups=<span class="number">10</span>     ; 标准错误日志备份数目 (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stderr_capture_maxbytes=<span class="number">1</span>MB   ; number of bytes <span class="keyword">in</span> <span class="string">'capturemode'</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line">;stderr_events_enabled=<span class="literal">false</span>   ; emit events on stderr writes (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span>       ; 进程附加环境 (<span class="keyword">def</span> no adds)</span><br><span class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br></pre></td></tr></table></figure>
<p>例如，可以简单的配置成:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">program</span>:long_script]</span><br><span class="line">command=/usr/<span class="keyword">local</span>/bin/long.<span class="keyword">sh</span></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stderr_logfile=/<span class="keyword">var</span>/<span class="keyword">log</span>/long.<span class="keyword">err</span>.<span class="literal">log</span></span><br><span class="line">stdout_logfile=/<span class="keyword">var</span>/<span class="keyword">log</span>/long.<span class="keyword">out</span>.<span class="literal">log</span></span><br></pre></td></tr></table></figure>
<p>编写完配置文件之后，通过 <code>service supervisor restart</code> 命令重启 <code>supervisor</code> 服务，也可以通过以下方式进行温柔的重启服务和进程:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">supervisorctl</span> reread</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure>
<h3 id="命令行工具_supervisorctl">命令行工具 supervisorctl</h3><p>查看所有命令:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="operator"><span class="keyword">help</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> commands (<span class="keyword">type</span> <span class="keyword">help</span> ):</span><br><span class="line">=====================================</span><br><span class="line"><span class="keyword">add</span>    <span class="keyword">clear</span>  fg        <span class="keyword">open</span>  quit    remove  restart   <span class="keyword">start</span>   <span class="keyword">stop</span>  <span class="keyword">update</span></span><br><span class="line">avail  <span class="keyword">exit</span>   maintail  pid   reload  reread  <span class="keyword">shutdown</span>  <span class="keyword">status</span>  tail  <span class="keyword">version</span></span></span><br></pre></td></tr></table></figure>
<p>常用命令的功能:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="operator"><span class="keyword">stop</span> programName，停止某一个进程(programName)，programName为[program:chatdemon]里配置的值。</span><br><span class="line">supervisorctl <span class="keyword">start</span> programName，启动某个进程</span><br><span class="line">supervisorctl restart programName，重启某个进程</span><br><span class="line">supervisorctl <span class="keyword">stop</span> groupworker: ，重启所有属于名为groupworker这个分组的进程(<span class="keyword">start</span>,restart同理)</span><br><span class="line">supervisorctl <span class="keyword">stop</span> all，停止全部进程，注：<span class="keyword">start</span>、restart、<span class="keyword">stop</span>都不会载入最新的配置文件。</span><br><span class="line">supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span><br><span class="line">supervisorctl <span class="keyword">update</span>，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>supervisorctl</code> 命令需要管理员权限，如果你以普通用户的身份登陆服务器，需要在命令前使用 <code>sudo</code> 命令: </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000" target="_blank" rel="external">http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://supervisord.org/">Supervisor</a> 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。</p>
<h3 id="安装">安装</h3><p><code>Ubuntu</code> 可以直接通过 <code>apt</code> 安装：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install supervisor</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2、shadowsocks 部署和配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/</id>
    <published>2015-10-20T15:38:06.000Z</published>
    <updated>2015-10-20T15:38:06.000Z</updated>
    <content type="html"><![CDATA[<p>关于 <code>shadowsocks</code> 是什么就不多介绍了，这是<a href="http://shadowsocks.org/en/index.html" target="_blank" rel="external">官网</a>，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。</p>
<h3 id="服务端配置:">服务端配置:</h3><p>首先请确保你的服务器中已经安装了 <code>Python 2.6 or 2.7</code>，然后执行以下命令进行安装:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后？然后就安装完成了啊。什么？你不确定？那你可以输入 <code>ssserver --version</code> 进行确认，如果安装成功，则会反馈程序的当前版本号。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssserver --version</span><br><span class="line">Shadowsocks <span class="number">2.8</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>接下来，你可以通过 <code>ssserver --help</code> 查看该命令的用法。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ ssserver --help</span><br><span class="line">usage: ssserver [OPTION]...</span><br><span class="line">A fast tunnel proxy that helps you bypass firewalls.</span><br><span class="line"></span><br><span class="line">You can supply configurations via either config file or command line arguments.</span><br><span class="line"></span><br><span class="line">Proxy options:</span><br><span class="line">  -<span class="ruby">c <span class="constant">CONFIG</span>              path to config file</span><br><span class="line"></span>  -<span class="ruby">s <span class="constant">SERVER_ADDR</span>         server address, <span class="symbol">default:</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"></span>  -<span class="ruby">p <span class="constant">SERVER_PORT</span>         server port, <span class="symbol">default:</span> <span class="number">8388</span></span><br><span class="line"></span>  -<span class="ruby">k <span class="constant">PASSWORD</span>            password</span><br><span class="line"></span>  -<span class="ruby">m <span class="constant">METHOD</span>              encryption method, <span class="symbol">default:</span> aes-<span class="number">256</span>-cfb</span><br><span class="line"></span>  -<span class="ruby">t <span class="constant">TIMEOUT</span>             timeout <span class="keyword">in</span> seconds, <span class="symbol">default:</span> <span class="number">300</span></span><br><span class="line"></span>  -<span class="ruby">-fast-open            use <span class="constant">TCP_FASTOPEN</span>, requires <span class="constant">Linux</span> <span class="number">3.7</span>+</span><br><span class="line"></span>  -<span class="ruby">-workers <span class="constant">WORKERS</span>      number of workers, available on <span class="constant">Unix</span>/<span class="constant">Linux</span></span><br><span class="line"></span>  -<span class="ruby">-forbidden-ip <span class="constant">IPLIST</span>  comma seperated <span class="constant">IP</span> list forbidden to connect</span><br><span class="line"></span>  -<span class="ruby">-manager-address <span class="constant">ADDR</span> optional server manager <span class="constant">UDP</span> address, see wiki</span><br><span class="line"></span></span><br><span class="line">General options:</span><br><span class="line">  -<span class="ruby">h, --help             show this help message <span class="keyword">and</span> exit</span><br><span class="line"></span>  -<span class="ruby">d start/stop/restart  daemon mode</span><br><span class="line"></span>  -<span class="ruby">-pid-file <span class="constant">PID_FILE</span>    pid file <span class="keyword">for</span> daemon mode</span><br><span class="line"></span>  -<span class="ruby">-log-file <span class="constant">LOG_FILE</span>    log file <span class="keyword">for</span> daemon mode</span><br><span class="line"></span>  -<span class="ruby">-user <span class="constant">USER</span>            username to run as</span><br><span class="line"></span>  -<span class="ruby">v, -vv                verbose mode</span><br><span class="line"></span>  -<span class="ruby">q, -qq                quiet mode, only show warnings/errors</span><br><span class="line"></span>  -<span class="ruby">-version              show version information</span><br><span class="line"></span></span><br><span class="line">Online help: &lt;https://github.com/shadowsocks/shadowsocks&gt;</span><br></pre></td></tr></table></figure>
<p>比如说你可以这样启动服务:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -p <span class="number">8388</span> -k password -m aes-<span class="number">256</span>-cfb</span><br></pre></td></tr></table></figure>
<p>当然了，每次都在命令行上配置是很麻烦的，所幸 <code>ssserver</code> 还支持以配置文件方式启动。比如说，我们在 <code>~/.config/shadowsocks/</code> 文件夹下创建一个 <code>config.json</code> 文件作为 <code>ssserver</code> 的启动配置文件(文件位置随意，放在什么地方都无所谓)， <code>config.json</code> 文件内容如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    “server_port”:<span class="number">8388</span>,</span><br><span class="line">    “password”:“password”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上参数很简单，就不过多解释了，保存好文件之后执行以下命令启动服务即可:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c ~<span class="regexp">/.config/shadowsocks</span><span class="regexp">/config.json</span></span><br></pre></td></tr></table></figure>
<p>如果想在后台运行，可以带上 <code>nohup</code> 命令:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ssserver -c ~<span class="regexp">/.config/shadowsocks</span><span class="regexp">/config.json</span></span><br></pre></td></tr></table></figure>
<p>当然了，还有更高级的进程管理技巧，这个下一篇文章里会详细介绍。</p>
<p>上面所说的 <code>config.json</code> 文件中还支持配置多端口，我们可以利用这个特性达到多账号使用的效果。配置方式为:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">600</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"0.0.0.0"</span></span>,</span><br><span class="line">    "<span class="attribute">port_password</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">8388</span>":<span class="value"><span class="string">"password1"</span></span>,</span><br><span class="line">        "<span class="attribute">8389</span>":<span class="value"><span class="string">"password2"</span></span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">_comment</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">8388</span>":<span class="value"><span class="string">"描述一，可以用来记录端口备注或是对应的用户"</span></span><br><span class="line">        <span class="string">"8389"</span>:<span class="string">"描述二，可以用来记录端口备注或是对应的用户"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>json</code> 文件不支持注释，因此配置文件中扩展了一个 <code>_comment</code> 参数用来进行备注，程序会自动忽略掉该参数。</p>
<h3 id="客户端配置">客户端配置</h3><p>相对来说客户端就太简单了，各个平台均有 <code>GUI</code> 版本的客户端，只需要下载安装即可。文章最下方提供下载链接。</p>
<p>以 <code>Mac</code> 客户端举例，安装完成之后，点击小飞机图标，选择添加服务器，然后将服务端配置中的 <code>端口号</code>，<code>加密方式</code>，<code>密码</code> 填写至对应的一栏中，其中服务器地址一栏要填写服务器的公网 <code>IP</code> 地址。之后就可以尽情的徜徉了。</p>
<p>下载链接:</p>
<ul>
<li>Windows 版: <a href="http://pan.baidu.com/s/1jGrmINW" target="_blank" rel="external">链接: http://pan.baidu.com/s/1jGrmINW</a> 密码: uti7</li>
<li>Mac 版: <a href="http://pan.baidu.com/s/1gdEt251" target="_blank" rel="external">链接: http://pan.baidu.com/s/1gdEt251</a> 密码: tpi6</li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于 <code>shadowsocks</code> 是什么就不多介绍了，这是<a href="http://shadowsocks.org/en/index.html">官网</a>，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。</p>
<h3 id="服务端配置:">服务端配置:</h3><p>首先请确保你的服务器中已经安装了 <code>Python 2.6 or 2.7</code>，然后执行以下命令进行安装:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[1、SSH 登陆配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/</id>
    <published>2015-10-20T05:23:27.000Z</published>
    <updated>2015-10-20T05:23:27.000Z</updated>
    <content type="html"><![CDATA[<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。</p>
<p>我们在上一步创建好服务器之后，我们可以在 <a href="https://cloud.digitalocean.com/" target="_blank" rel="external">https://cloud.digitalocean.com/</a> 查看到服务器列表和 <code>ip</code> 地址。</p>
<p>因为我在初始化的过程中没有直接添加 <code>ssh</code> 认证登陆，所以我登陆到服务器之后要先自行添加和配置。</p>
<a id="more"></a>
<h3 id="配置公钥登录">配置公钥登录</h3><p>1、首先，在收到包含有服务器密码的邮件之后，打开终端(或是命令行)工具，输入 <code>ssh user@host</code> 命令进行登录，由于是第一次登陆，所以默认登陆为 <code>root</code>账户，例如:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@<span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>2、之后会提示让你输入密码，你需要将邮件中的初始密码输入，注意，输入密码的时候屏幕不会出现任何反馈，会可能会造成一种没有输入的错觉，你只需正常输入并敲击回车表示完成即可。</p>
<p>3、第一次登陆成功之后，会提示让你进行修改密码，修改完密码之后即以 <code>root</code> 身份登入服务器。</p>
<p>4、使用密码登录，每次都必须输入密码，非常麻烦。因此我们需要配置公钥登录。首先在本地生成对应的公钥。如果你之前已经生成过，则可以直接跳过这一步。SSH 公钥默认储存在账户的主目录下的 <code>~/.ssh</code> 目录。使用一下命令查看:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.ssh</span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<p>关键是看有没有用 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建，生成的命令为:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p>它先要求你确认保存公钥的位置 <code>~.ssh/id_rsa</code>，然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>
<p>5、拿到公钥之后，就要将公钥上传到服务器。谨记: 一定要在本地保管好你的私钥，而公钥可以发布到各服务器上。</p>
<p><code>Linux</code> 用户可以使用 <code>ssh-copy-id user@host</code>进行上传，<code>Mac</code> 用户则需要麻烦一点:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp ~<span class="regexp">/.ssh/id</span>_rsa.pub user<span class="variable">@host</span><span class="symbol">:~/</span>.ssh/</span><br><span class="line">ssh user<span class="variable">@host</span></span><br><span class="line">cd ~<span class="regexp">/.ssh/</span></span><br><span class="line">cat id_rsa.pub <span class="prompt">&gt;&gt; </span>authorized_keys</span><br></pre></td></tr></table></figure>
<p>如果服务器 <code>.ssh</code> 目录下没有 <code>authorized_keys</code> 文件，则可以创建一个。</p>
<p>基本上到这里就算是配置完成了，你可以退出然后重新登录一下测试是否配置成功。</p>
<h3 id="SSH_配置">SSH 配置</h3><blockquote>
<p>SSH 的配置均通过修改 <code>/etc/ssh/sshd_config</code> 配置文件实现，例如: <code>vim /etc/ssh/sshd_config</code>。<strong>修改配置时最好进行备份操作</strong></p>
<p>修改完之后如果想要立即生效需要重启SSH服务: <code>sudo service ssh restart</code></p>
<p>更多的 SSH 服务命令可阅读文章下方的参考资料。</p>
</blockquote>
<p>1、建议修改ssh登录端口，修改端口可以防止被端口扫描。找到 <code>Port 22</code>，修改成一个五位的端口：<code>Port 22222</code> 之类的一个比较大的数字，减小被扫描到的可能性。<em>建议先添加一个端口，待确认能够通过新添加的端口连接成功，再将原端口注释掉。</em></p>
<p>2、为了安全设置，可以选择禁用 <code>root</code> 账户的密码登录，设置配置文件中的 <code>PermitRootLogin</code> 为 <code>without-password</code>。甚至可以直接禁用 <code>root</code> 账户登录，新建一个普通用户进行登录。</p>
<h3 id="新建普通用户登录">新建普通用户登录</h3><p>目前我们总是以 <code>root</code> 用户的身份进行登录，而 <code>root</code> 由于权限太高造成风险也随之升高，因此我们需要在服务器上创建一个普通用户身份以做平时登录使用。</p>
<p>创建普通用户的命令为:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">sudo</span> <span class="keyword">adduser </span>newUser</span><br></pre></td></tr></table></figure></p>
<p>这样系统就会自动创建用户主目录，创建用户同名的组，然后屏幕就会出现以下信息:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正在添加用户<span class="string">"newUser"</span>…</span><br><span class="line">正在添加新组<span class="string">"newUser"</span> (<span class="number">1006</span>)…</span><br><span class="line">正在添加新用户<span class="string">"newUser"</span> (<span class="number">1006</span>) 到组<span class="string">"newUser"</span>…</span><br><span class="line">创建主目录<span class="string">"/home/newUser"</span>…</span><br><span class="line">正在从<span class="string">"/etc/skel"</span>复制文件…</span><br><span class="line">输入新的 UNIX 口令： (作者注:这里是输入新账号的密码)</span><br><span class="line">重新输入新的 UNIX 口令：</span><br></pre></td></tr></table></figure>
<p>两次输入 <code>newUser</code> 的初始密码，出现的信息如下:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">passwd: password updated successfully</span><br><span class="line">Changing <span class="operator">the</span> user information <span class="keyword">for</span> db</span><br><span class="line">Enter <span class="operator">the</span> <span class="built_in">new</span> <span class="built_in">value</span>, <span class="operator">or</span> press ENTER <span class="keyword">for</span> <span class="operator">the</span> default</span><br><span class="line">Full Name []:</span><br><span class="line">Room Number []:</span><br><span class="line">Work Phone []:</span><br><span class="line">Home Phone []:</span><br><span class="line">Other []:</span><br><span class="line">Full Name []:</span><br></pre></td></tr></table></figure>
<p>等信息一路回车</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个信息是否正确？ <span class="string">[Y/n]</span></span><br></pre></td></tr></table></figure>
<p>致此，新用户就创建好了。</p>
<p>当然了，还有一些事情需要处理。</p>
<h5 id="1、让该用户具有使用_sudo_命令的权限">1、让该用户具有使用 <code>sudo</code> 命令的权限</h5><p>通过编辑配置文件 <code>/etc/sudoers</code> 来实现:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后添加如下内容:</span></span><br><span class="line"></span><br><span class="line">%newUser <span class="literal">ALL</span>=(<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line">newUser <span class="literal">ALL</span>=(<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br></pre></td></tr></table></figure>
<p>保存，退出。深藏功与名。</p>
<h5 id="2、使用普通用户身份进行登录">2、使用普通用户身份进行登录</h5><p>当然了，你如果想要以此用户的身份进行 <code>ssh</code> 登录，还需要将之前的公钥上传至该用户目录下。</p>
<h3 id="本地_SSH_配置">本地 SSH 配置</h3><blockquote>
<p>每次登录都需要输入用户名和 Host，麻烦不？当然麻烦了。</p>
</blockquote>
<p>上面讲了辣么多的服务器端配置，这里就来讲一下本地配置。本地的配置文件默认为 <code>~/.ssh/config</code>，如果不存在则新创建一个，其配置写法如下:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host    别名</span><br><span class="line">    HostName        主机名</span><br><span class="line">    Port            端口</span><br><span class="line">    <span class="built_in">User</span>            用户名</span><br><span class="line">    IdentityFile    密钥文件的路径</span><br></pre></td></tr></table></figure>
<p>上面的配置可以缺省，不需要每一个都填写。有了这些配置，就可以这样用 <code>ssh</code> 登陆服务器了:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssh</span> 别名</span><br></pre></td></tr></table></figure>
<p>怎么样？是不是方便了很多呢。 O(∩_∩)O哈哈~</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">SSH原理与运用（一）：远程登录</a></li>
<li><a href="http://segmentfault.com/a/1190000002492828#articleHeader4" target="_blank" rel="external">SSH的配置和命令介绍</a></li>
<li><a href="http://www.kafan.cn/edu/584682.html" target="_blank" rel="external">Ubuntu中useradd和adduser的区别</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。</p>
<p>我们在上一步创建好服务器之后，我们可以在 <a href="https://cloud.digitalocean.com/">https://cloud.digitalocean.com/</a> 查看到服务器列表和 <code>ip</code> 地址。</p>
<p>因为我在初始化的过程中没有直接添加 <code>ssh</code> 认证登陆，所以我登陆到服务器之后要先自行添加和配置。</p>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0、服务器主机选择和购买]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/"/>
    <id>http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/</id>
    <published>2015-10-19T05:28:41.000Z</published>
    <updated>2015-10-19T05:28:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 <a href="https://gist.github.com/" target="_blank" rel="external">https://gist.github.com/</a> 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 <code>shadowsocks</code> 技术勉强可以维持，但该项目已经不再更新 <em>(:з」∠)</em>。</p>
<p>有些网站也会提供一些免费的 <code>shadowsocks</code> 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。</p>
</blockquote>
<p>因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 <code>&quot;服务器部署从入门不一定到精通&quot;</code> 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。</p>
<a id="more"></a>
<h2 id="服务器商选择">服务器商选择</h2><p>最初的目的是为了搭建一些服务以达到代理访问外网的目的，因此毋庸置疑的就要选择那些海外服务器。目前口碑最高的是 <a href="https://www.linode.com/" target="_blank" rel="external">Linode</a> 和 <a href="https://www.digitalocean.com/?refcode=d2b2550b5631" target="_blank" rel="external">digitalocean</a>, 至于两者的区别可以参考<a href="http://www.zhihu.com/question/21454090" target="_blank" rel="external">http://www.zhihu.com/question/21454090</a> 或者其他资料。总之，我选择了 <a href="https://www.digitalocean.com/?refcode=d2b2550b5631" target="_blank" rel="external">digitalocean</a>，如果你也选择这个服务商，点击前面的链接注册后可以获得 <strong>10美金</strong> 的奖励，自己搜索注册可没有哟~</p>
<h2 id="购买服务器">购买服务器</h2><p>注册完账号之后，访问 <a href="https://cloud.digitalocean.com/droplets/new" target="_blank" rel="external">https://cloud.digitalocean.com/droplets/new</a> 即可选购一个新服务器。</p>
<p>0、绑定支付方式</p>
<p>选购之前需要绑定支付方式才能进行购买，方式有两种，一种是绑定信用卡，一种是通过 <code>paypal</code> 支付 5 美元。</p>
<p>1、填写 Droplet Hostname</p>
<p>给你的服务器起一个名字。</p>
<p>2、Select Size</p>
<p><code>digitalocean</code> 最低提供 <code>5美金/月</code> 的套餐，并且是按小时扣费。如果你只是为了搭建一个代理服务， 这个套餐足够使用了。</p>
<p>3、Select Region</p>
<p><code>digitalocean</code> 目前提供7个城市的机房可选，其中 <code>New York</code> 和 <code>Amsterdam</code> 各有三个机房，其他地区各一个机房可选。大陆用户建议选择美国西海岸机房，因为优化做的很棒，访问速度还可以。新推出的新加坡机房虽然在亚洲，但是好像从评价来看速度和优化并不理想。我选择了 <code>San Francisco</code> 机房。</p>
<p>4、Select Image</p>
<p>小白用户和开发者建议选择 <code>Ubuntu</code>，运维和高级人员可以使用 <code>CentOS</code>系统。</p>
<p>5、Available Settings</p>
<p>其中 <code>Backups</code> 自动备份选项是附加收费业务，每月20%的收费标准。</p>
<p>6、Add SSH Keys</p>
<p>添加 <code>ssh</code> 公钥，建议在这里直接添加 <code>ssh</code> 公钥，会方便很多。如果你没有选择添加 <code>ssh keys</code>，那么在服务器创建好之后会给你发一封包含服务器密码的邮件，你使用该密码第一次登陆服务器时，会要求更改密码。</p>
<p>7、Create Droplet</p>
<p>然后点击 <code>Create Droplet</code> 按钮，稍等一分钟你就拥有了一台海外服务器咯。</p>
<p>之后你在 <a href="https://cloud.digitalocean.com/" target="_blank" rel="external">https://cloud.digitalocean.com/</a> 就可以查看到你的服务器了。</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 <a href="https://gist.github.com/">https://gist.github.com/</a> 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 <code>shadowsocks</code> 技术勉强可以维持，但该项目已经不再更新 <em>(:з」∠)</em>。</p>
<p>有些网站也会提供一些免费的 <code>shadowsocks</code> 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。</p>
</blockquote>
<p>因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 <code>&quot;服务器部署从入门不一定到精通&quot;</code> 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。</p>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊聊 JS 中的严格模式]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/09/strict-mode/"/>
    <id>http://blog.sqrtthree.com/2015/10/09/strict-mode/</id>
    <published>2015-10-09T04:05:12.000Z</published>
    <updated>2015-10-09T04:05:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是严格模式？">什么是严格模式？</h2><blockquote>
<p><code>严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.</p>
</blockquote>
<a id="more"></a>
<p>因此, 在严格模式下, 我们的一些不严谨的写法将会导致程序抛出错误. 例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = []; <span class="comment">// 在严格模式下该行将会抛出错误: error: redefinition of arguments</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中, 由于 <code>arguments</code> 在 js 中是一个特殊对象, 在严格模式下是不允许被重新定义的. 但是没有实现严格模式检查的环境中会接受这段代码. </p>
<h2 id="为什么会出现严格模式？">为什么会出现严格模式？</h2><p>总所周知, 从 ECMAscript 从1997年正式成为国际标准以来, 已经发布了6个版本. 除此之外, 还存在一些 Javascript 实现支持非标准特性, 而其他的 Javascript 实现却并不支持这些特性的情况. 由于 Javascript 的实现多样化, 我们很难确定哪些特性在哪些平台上是支持的, 再加上 Web 浏览器的复杂性, 并且它并不能让开发者指定某一个特定的 Javascript 版本来执行我们的程序. 因此我们需要精心的编写程序, 以确保在所有的平台上都能够正常运行.</p>
<p>因此在 ES5 中引入了一种版本控制的考量: <code>严格模式</code>. 此特性允许开发者选择在受限制的 Javascript 版本中禁止使用一些 Javascript 语言中问题较多或是易于出错的特性.</p>
<p>由于其语法强大的向后兼容特性, 所以即使在没有实现严格模式检查的环境中, 你的严格代码仍然可以正常执行.</p>
<h2 id="如何使用严格模式?">如何使用严格模式?</h2><p>在程序中使用严格模式的方式是在程序中的最开始增加一个特定的字符串字面量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span></span><br></pre></td></tr></table></figure>
<p>如果你在一个文件的顶部加入这个特定的字符串, 则表示该文件的所有内容将始终使用严格模式执行.</p>
<p>如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令.</p>
<h2 id="为什么要使用字符串字面量来实现严格模式?">为什么要使用字符串字面量来实现严格模式?</h2><p>单独使用一个特定的字符串字面量来作为指令语法在语言里看起来确实相当怪异, 但是他有一个最大的好处是向后兼容. 我们来看一下它为什么能够向后兼容. 我们都知道在js 中解释执行一个字符串字面量是没有任何副作用的, 这句话什么意思呢？ 比如说你在 chrome 浏览器控制台里面输入一个字符串字面量, 解释器只会返回一个同样的字符串, 除此之外不会发生任何事情, 这就使得即使ES3引擎不支持<code>严格模式</code>, 但依然能够无伤大雅的解释和执行这条指令. ES3 引擎在解析完改字符串之后, 会立即将该值丢弃. 因此, 尽管旧的引擎不支持严格模式, 但依然能够正常运行.</p>
<p>但需要注意的是: 尽管不会抛出错误, 但是旧的引擎不会进行任何的严格检查模式, 因此如果要使用严格模式, 你应该总是在完全兼容ES5的环境中测试严格代码.</p>
<h2 id="使用严格模式需要注意哪些问题?">使用严格模式需要注意哪些问题?</h2><p>我们在上面已经说过, <code>use strict</code> 指令需要写在脚本或者函数的顶部, 因为该指令只有在写在顶部才能生效. 这就使得我们在使用的时候需要注意一下这里有个小坑. 这个坑是什么呢？ </p>
<p>举个例子, 我们在开发大型功能的时候, 开发过程中会使用多个独立的脚本文件, 但是在部署到生产环境的时候出于性能优化的目的, 需要将多个脚本连接成一个单一的文件. 比如说, 脚本1 运行于严格模式下,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.js </span></span><br><span class="line"><span class="pi">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是有另外一个同事写了一个脚本2运行于非严格模式下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file2.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么, 我们该怎么连接这两个文件呢？ 如果我们以 file1.js 开始, 那么连接后的代码将运行于严格模式下, 但是由于 file2 中的一些操作会在严格模式下抛出错误, 导致我们的程序无法正常运行.如果我们以 file2.js 开始, 那么连接后的代码将运行于非严格模式下, 因为我们前面已经讲过该指令只有在写在顶部才能生效. 似乎怎样都不太合适.</p>
<p>那么如何解决这个问题呢？</p>
<ol>
<li>在项目中坚持只使用<code>严格模式</code>或者只使用<code>非严格模式</code>, 并且不要将使用<code>严格模式</code>和不使用<code>严格模式</code>的文件进行打包构建. O(∩_∩)O哈哈~这样就不会有问题了嘛.</li>
<li>我们上面说过, 如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令. 我们可以利用这个特性, 将每一个脚本文件里面的代码包裹在一个立即执行的函数表达式内, 这样即使两种模式的文件打包在一起, 依然能够按照我们的期望进行工作. 例如:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file1.js </span></span><br><span class="line"><span class="pi">    "use strict"</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file2.js </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>当然了, 上面这样的做法会导致这些文件的内容不会在全局作用域内解释, 这就导致我们通过 <code>var</code> 和 <code>function</code> 声明的变量不会视为全局变量. 不过这刚好对我们来说也是一个很好的特性. 因此就放心大胆的使用吧, 去吧, 皮卡丘.</p>
<h2 id="最佳实践">最佳实践</h2><p>上面的方法2看起来是极好的, 并且我们可以通过<code>自动化构建工具</code>为我们的脚本文件上添加如上代码. 但是如果我们想要编写一个通用的库, 使其可以在尽可能多的环境中正常工作, 我们不能假设脚本文件一定会被构建工具置于一个立即执行的函数中, 也不能假设客户端代码一定处于严格模式或是非严格模式中. 所以为了获得最佳效果, 我们应该总是在严格模式下编写代码, 并显式的将其包裹在启用了严格模式的立即执行函数中, 而不是依靠构建工具来实现.</p>
<h2 id="结语">结语</h2><p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向. 为了达到更为普遍的兼容性, 我们应该总是在严格模式下编写代码.</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是严格模式？">什么是严格模式？</h2><blockquote>
<p><code>严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[春风十里 不如你]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/"/>
    <id>http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/</id>
    <published>2015-10-04T16:21:41.000Z</published>
    <updated>2015-10-04T16:21:41.000Z</updated>
    <content type="html"><![CDATA[<p>每一个失恋了的人, 都是中了一记玄冥神掌.</p>
<p>这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.</p>
<a id="more"></a>
<p>是的, 你不得不承认, 兜兜转转, 到最后, 你终于还是把她弄丢了.</p>
<p>这些日子, 你天天梦到她, 常常半夜醒来不知道自己身在何处, 常常早上望着空荡荡的枕边失落. </p>
<p>现在, 你都害怕再梦到她了吧.</p>
<p>夜深的时候, 你总是望着窗外发呆, 你幻想联系她后的复合, 你幻想联系她后的决裂, 你幻想如果当初没有分开现在会如何, 你幻想此时此刻她正在干嘛.</p>
<p>可是, 你也只能够是想想.</p>
<p>因为我知道, 你不敢, 也不能联系她.</p>
<p>说来可笑, 你会把联系她视为一次定输赢的赌博. 你想赌, 但你不敢赌, 因为你知道自己会输. </p>
<p>输了, 以后连想她的权利都没有了.</p>
<p>你不是没有想过放弃. 你今天决定放弃她了, 可是坚持不了几天, 又不甘心放弃想把她追回来.</p>
<p>周而复始, 永远下不了决心到底是放弃还是坚持.</p>
<p>熬过了无数个痛苦的黑夜, 你不再嘴上逞强, 你终于承认了你爱她, 即使分开了, 你对她的爱却有增无减.</p>
<p>你相信了念念不忘必有回响这样的段子.</p>
<p>你相信梦见她证明你俩缘分未尽这样的迷信.</p>
<p>你相信打喷嚏突然恍惚是因为她正在想你这样的习惯.</p>
<p>是的, 即便你之前觉得这样多可笑, 这一刻, 你都会强行认为是跟你有关.</p>
<p>可惜的是,</p>
<p>你的想念没有声音, 恐怕她是听不到了.</p>
<p>你的想念没有频率, 也许她也收不到了.</p>
<p>你的想念没有路径, 所以只能你自己知道了.</p>
<p>我知道你好想做一万件事来证明你很想她.</p>
<p>但是很可惜你一件也为她做不了.</p>
<p>最遗憾的事大概就是,</p>
<p>你有为她做一万件事的决心, 却没有能为她做一件事的机会了.</p>
<p>而你唯一能做的也只能是在这平淡无味的生活间隙里，</p>
<p>想一想此时此刻的她正在做什么了.</p>
<p>失去了她, 你觉得, 整个世界都空旷旷的. 你觉得, 整个世界都变成了黑白的, 再也没有了色彩.</p>
<p>孤独, 就像是那暴风雨一样骤然而来, 让你触不及防, 狼狈不堪.</p>
<p>可是, 最可怕的不是孤独本身, 而是没有人知道你孤独.</p>
<p>你喝的烂醉, 最后还是得一个人爬回床上, 她不会知道了.</p>
<p>你生病了, 最后还是得一个人滚去医院, 她不会陪你了.</p>
<p>你萎靡不振, 最后在荒度的日子里把自己淬炼成了一个傻逼, 她不会出现了.</p>
<p>是啊, 以后的路上, 就只有你自己了. 她, 永远都不会出现了.</p>
<p>我知道你放不下, 我知道你不甘心,</p>
<p>可是, 又能怎么办呢？</p>
<p>只希望你能在未来的日子里沉迷于学习无法自拔, 习得九阳神功, 破了这寒毒.</p>
<p>终有一天, </p>
<p>你会明白, 有些事情, 只适合珍藏.</p>
<p>终有一天,</p>
<p>你回过头, 再看到这篇文章的时候,</p>
<p>你会对我说:</p>
<p>你看这个人, 真的好像一条狗耶.</p>
<hr>
<embed src="http://music.163.com/style/swf/widget.swf?sid=26508242&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all">
]]></content>
    <summary type="html">
    <![CDATA[<p>每一个失恋了的人, 都是中了一记玄冥神掌.</p>
<p>这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://blog.sqrtthree.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈我理解的API接口设计]]></title>
    <link href="http://blog.sqrtthree.com/2015/09/08/api/"/>
    <id>http://blog.sqrtthree.com/2015/09/08/api/</id>
    <published>2015-09-08T05:03:43.000Z</published>
    <updated>2015-09-08T05:03:43.000Z</updated>
    <content type="html"><![CDATA[<p>随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.</p>
<a id="more"></a>
<h2 id="关于协议">关于协议</h2><p>为了确保通信安全, 建议API与用户的通信协议，总是使用HTTPS协议.</p>
<h2 id="关于域名">关于域名</h2><p>为了提高可维护性, 建议尽量将API部署在专用域名之下. 如 <code>https://api.github.com</code></p>
<h2 id="关于版本号">关于版本号</h2><p>建议将 API 的版本号放入 URL 中, 如<code>https://api.github.com/v1/</code>. 但是 Github 似乎采用了另外一种方案, 就是将版本号放在了HTTP头信息中, <a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">看这里看这里</a>. 但个人感觉不是太直观. 但前端在请求中可以省略3个字符. <em>(:з」∠)</em></p>
<h2 id="关于请求路径">关于请求路径</h2><p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论. 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词. 并且建议所用的名词和数据库中的集合名相对应. 并且在获取一组数据/集合的时候, 应统一使用复数形式.</p>
<p>比如, 需要请求所有的用户信息. 可以设计为这样: <code>https://api.example.com/v1/users</code>.</p>
<h2 id="关于请求方法">关于请求方法</h2><p>常用的 HTTP请求方法有5个. 分别如下:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td style="text-align:center">从服务器取出资源</td>
</tr>
<tr>
<td>POST</td>
<td style="text-align:center">在服务器新建一个资源</td>
</tr>
<tr>
<td>PUT</td>
<td style="text-align:center">用于完整的替换资源或者创建指定身份的资源(更新资源)</td>
</tr>
<tr>
<td>PATCH</td>
<td style="text-align:center">用于局部更新资源</td>
</tr>
<tr>
<td>DELETE</td>
<td style="text-align:center">用于删除某个资源</td>
</tr>
</tbody>
</table>
<p>比如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>GET <code>/users/:ID</code> 列出指定用户的信息</li>
<li>POST <code>/users</code> 新建一个用户</li>
<li>DELETE <code>/users/:ID</code> 删除指定的用户</li>
</ul>
<p>也可以使用语义化的路径方式进行分类, 如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>POST <code>/users/create</code> 创建一个新用户</li>
<li>POST <code>/users/update</code> 更新信息</li>
</ul>
<h2 id="关于常见的请求参数">关于常见的请求参数</h2><p>比如在数据过多, 需要对数据进行分页请求的时候, 我们应该统一 API 请求参数. 常见的有这些.</p>
<ul>
<li><code>limit=10</code> 指定返回记录的数量</li>
<li><code>offset=10</code> 指定返回记录的开始位置。</li>
<li><code>page=2&amp;per_page=100</code> 指定第几页，以及每页的记录数。</li>
<li><code>sortby=name&amp;order=asc</code> 指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li><code>animal_type_id=1</code> 指定筛选条件</li>
</ul>
<h2 id="关于返回值">关于返回值</h2><p>返回值的数据格式应严格按照 JSON 规范.JSON（JavaScript Object Notation）是一种轻量级，基于文本，语言无关的数据交换格式。其包括了基本数据类型4种和复合数据类型2种，共6种数据类型.</p>
<p>首先. 基本数据类型有:</p>
<ul>
<li>Number可以表示整数和浮点数。</li>
<li>Boolean可以表示真假，值为true或false。</li>
<li>String表示一个字符串。</li>
<li>Null通常用于表示空对象. 输出的数据结构中空字段的值一律为 null.</li>
</ul>
<p>复合数据类型Object是无序的集合，以键值对的方式保持数据。</p>
<ol>
<li><p>必须根据操作和状态设置相应的 HTTP 响应状态码. 具体可参考<a href="http://tools.ietf.org/html/rfc7231#page-49" target="_blank" rel="external">http://tools.ietf.org/html/rfc7231#page-49</a>、<a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a></p>
</li>
<li><p>Content-Type字段定义了响应体的类型. 一般情况下，浏览器会根据该类型对内容进行正确的处理。推荐设置为”text/javascript”或”text/plain”. 并且通常需要指定一个字符集, 如果字符编码为UTF-8时，可以不指定字符集</p>
</li>
<li><p>返回的数据包含在http响应体中。数据 必须(MUST) 是一个JSON Object。该Object可能包含3个字段：status，statusInfo，data。</p>
</li>
<li><p>status字段必须是一个不小于0的JSON Number整数，表示请求的状态. 0：表示server端理解了请求，成功处理并返回. 非0：表示发生错误, 可以根据错误类型扩展错误码.</p>
</li>
<li><p>statusInfo字段通常是一个JSON String或JSON Object，表示除了请求状态外server端想要对status做出的说明，使client端能够获取更多信息进行后续处理. 这个字段属于可选字段.</p>
</li>
<li><p>data 字段可以是任意 JSON 类型, 表示请求返回的数据主体. 数据主体data包含了在请求成功时有意义的数据.</p>
</li>
</ol>
<p>例如: </p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 请求成功</span><br><span class="line">&#123;</span><br><span class="line">    status: <span class="number">0</span>,</span><br><span class="line">    statusInfo: <span class="string">'请求成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Tom'</span>,</span><br><span class="line">        ag: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 请求失败</span><br><span class="line">&#123;</span><br><span class="line">    status: <span class="number">1</span>,</span><br><span class="line">    statusInfo: <span class="string">'权限不足'</span></span><br><span class="line">    // 或者是复杂类型</span><br><span class="line">    statusInfo: &#123;</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'参数错误'</span>,</span><br><span class="line">        <span class="string">'parameters'</span>: &#123;</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"电子邮件格式不正确"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于文档规范">关于文档规范</h2><p>可参考 github 的文档写作形式.</p>
<p>1、 请求信息<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">'/users'</span> 获取用户列表 <span class="comment">// 请求方式, 请求路径, 方法描述</span></span><br></pre></td></tr></table></figure></p>
<p>2、 请求参数</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数一</td>
<td>参数类型</td>
<td>参数描述</td>
</tr>
</tbody>
</table>
<p>3、 Response 响应结果示例<br>给出不同状态的响应结果示例, 便于接口对接和调试.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status: <span class="number">0</span>,</span><br><span class="line">    statusInfo: '请求成功',</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>: [<span class="container">&#123;</span><br><span class="line">        <span class="title">id</span>: 1,</span><br><span class="line">        <span class="title">name</span>: '<span class="type">Tom</span>'</span><br><span class="line">    &#125;</span>]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.</p>]]>
    
    </summary>
    
      <category term="api" scheme="http://blog.sqrtthree.com/tags/api/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 Javascript 中 atob 方法解码中文字符乱码问题]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/"/>
    <id>http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/</id>
    <published>2015-08-29T11:46:53.000Z</published>
    <updated>2015-08-29T11:46:53.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.</p>
</blockquote>
<h2 id="首先,_为什么要编码？">首先, 为什么要编码？</h2><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。</p>
<p>通常的方法是通过 <code>window.btoa()</code> 方法对源数据进行编码, 然后接收方使用 <code>window.atob()</code> 方法对其进行解码, 从而得到原数据.</p>
<a id="more"></a>
<h2 id="window-btoa_与_window-atob_不支持中文">window.btoa 与 window.atob 不支持中文</h2><p>但是这种方法存在的问题是:<code>window.btoa()</code> 不支持中文, <code>window.atob()</code>转换含有中文的 base64编码的时候中文部分会变为乱码.详情如下:</p>
<p>我们在 bash 终端下先得到『中文』这两个字的 base64 编码</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo 中文 <span class="string">| base64</span></span><br><span class="line"><span class="number">5</span>Lit5paHCg==</span><br></pre></td></tr></table></figure>
<p>然后我们在 Chrome console 里面通过 <code>window.atob</code> 进行解码, 结果如下</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">window</span>.atob(<span class="string">'5Lit5paHCg=='</span>)</span><br><span class="line">&lt; <span class="string">"ä¸­æ</span><br><span class="line">"</span></span><br></pre></td></tr></table></figure>
<p>继续在 Chrome console 里面执行 <code>window.btoa</code> 编码, 结果报错.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"> window.btoa(</span>'中文'<span class="function">)</span>;</span><br><span class="line">&lt; Uncaught DOMException: Failed to<span class="instruction"> execute </span>'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.</span><br></pre></td></tr></table></figure>
<p>经查资料发现, <code>btoa</code> 方法仅支持 ASCII 编码.</p>
<h2 id="借助_encodeURIComponent_和_decodeURIComponent_转义中文字符">借助 encodeURIComponent 和 decodeURIComponent 转义中文字符</h2><p>由于<code>btoa</code> 方法仅支持 ASCII 编码, 我们在转换中文的时候就需要先将中文转换为ASCII字符序列，再通过 btoa 进行 base64 编码, 从而实现『曲线救国』。</p>
<p>转换ASCII字符序列的方法我们可以借助于 <code>encodeURIComponent</code> 和 <code>decodeURIComponent</code> 这两个方法完成. </p>
<p>编码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; window.<span class="function"><span class="title">btoa</span><span class="params">(encodeURIComponent(<span class="string">'中文'</span>)</span></span>)</span><br><span class="line">&lt; <span class="string">"JUU0JUI4JUFEJUU2JTk2JTg3"</span></span><br></pre></td></tr></table></figure></p>
<p>解码:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; decodeURIComponent<span class="list">(<span class="keyword">window</span>.atob<span class="list">(<span class="quoted">'JUU0JUI4JUFEJUU2JTk2JTg3</span>')</span>)</span></span><br><span class="line">&lt; <span class="string">"中文"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="GitHub_API_获取_README_的中文乱码问题">GitHub API 获取 README 的中文乱码问题</h2><p>但是通过上面的解码方式解码 github 的 readme 数据的时候仍旧是乱码, 经过查找相关资料发现了Base64的编码与解码转的最优方案是下面这种:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">utf8_to_b64(<span class="string">'✓ à la mode'</span>); <span class="comment">// JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==</span></span><br><span class="line">b64_to_utf8(<span class="string">'JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ=='</span>); <span class="comment">// "✓ à la mode"</span></span><br><span class="line"></span><br><span class="line">utf8_to_b64(<span class="string">'I \u2661 Unicode!'</span>); <span class="comment">// SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==</span></span><br><span class="line">b64_to_utf8(<span class="string">'SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ=='</span>); <span class="comment">// "I ♡ Unicode!"</span></span><br></pre></td></tr></table></figure>
<p>通过上面的这种方法去解析 github 的数据的时候, 发现中文能够正常显示了. 显然 github 也是采用了这种方案.</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding" target="_blank" rel="external">https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.</p>
</blockquote>
<h2 id="首先,_为什么要编码？">首先, 为什么要编码？</h2><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。</p>
<p>通常的方法是通过 <code>window.btoa()</code> 方法对源数据进行编码, 然后接收方使用 <code>window.atob()</code> 方法对其进行解码, 从而得到原数据.</p>]]>
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-04/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-04/</id>
    <published>2015-08-20T08:04:18.000Z</published>
    <updated>2015-08-20T08:04:18.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2596" target="_blank" rel="external">http://www.html-js.com/article/2596</a></p>
</blockquote>
<h2 id="1、神奇的_mixins">1、神奇的 <code>mixins</code></h2><p>想必有 <code>less</code> &amp; <code>sass</code> 经验的同学对 <code>mixins</code> 一定都不陌生了，<code>mixins</code> 呢，其实就是方便对一堆代码块的重复利用。在 <code>Jade</code> 里面当然也少不了代码块的复用咯~~</p>
<a id="more"></a>
<p><code>mixins</code> 的定义很简单，就只需要 <code>mixin 代码块名字</code> 即可<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mixin demo</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> demo</span><br></pre></td></tr></table></figure><br>调用方式就更简单了，我们需要这样 <code>+代码块名字</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+demo</span></span><br></pre></td></tr></table></figure><br>输出结果非常理想<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>什么？你说这都是只能用于内容固定的代码块？没关系，我们来看看内容不固定的时候应该怎么办<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mixin</span> <span class="built_in">info</span>(name, skills)</span><br><span class="line">  p my name is <span class="comment">#&#123;name&#125;</span></span><br><span class="line">  ul.skills-box</span><br><span class="line">    each skill in skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">+<span class="built_in">info</span>(<span class="string">'sqrtthree'</span>,[<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>])</span><br></pre></td></tr></table></figure><br>编译结果如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"skills-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>什么？你还想要嵌套的 <code>mixins</code>，╮(╯▽╰)╭  怎么这么多事。。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mixin info(<span class="property">name</span>, skills)</span><br><span class="line">  p <span class="keyword">my</span> <span class="property">name</span> <span class="keyword">is</span> <span class="comment">#&#123;name&#125;</span></span><br><span class="line">  ul.skills-box</span><br><span class="line">    each skill <span class="keyword">in</span> skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">mixin developersInfo(developer)</span><br><span class="line">  h2 <span class="comment">#&#123;developer.name&#125;</span></span><br><span class="line">  +info(developer.<span class="property">name</span>, developer.skills)</span><br><span class="line"></span><br><span class="line">+developersInfo(&#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>, <span class="string">"skills"</span>: ['html','css','javascript','nodejs']&#125;)</span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>sqrtthree<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"skills-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那如果我们遇到不定参的问题呢<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mixin</span> <span class="built_in">info</span>(className, ...skills)</span><br><span class="line">  ul(class=<span class="string">'#&#123;className&#125;'</span>)</span><br><span class="line">    each skill in skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">+<span class="built_in">info</span>(<span class="string">'list'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>)</span><br></pre></td></tr></table></figure><br>我们来看编译结果<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>变量都能传递了，那属性能传递么？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin attr(<span class="type">text</span>)</span><br><span class="line">  p(<span class="type">class</span>=attributes.<span class="type">class</span>) <span class="comment">#&#123;text&#125;</span></span><br><span class="line"></span><br><span class="line">+attr('<span class="type">text</span>')(<span class="type">class</span>=<span class="string">"tips"</span>)</span><br></pre></td></tr></table></figure><br>结果如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="type">class</span>=<span class="string">"tips"</span>&gt;<span class="type">text</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>属性传递的时候还有一个语法糖呢。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin attr(<span class="type">text</span>)</span><br><span class="line">  p&amp;attributes(attributes) <span class="comment">#&#123;text&#125;</span></span><br><span class="line"></span><br><span class="line">+attr('demo')(<span class="type">class</span>=<span class="string">"tips"</span>, <span class="property">id</span>=<span class="string">"j-tips"</span>, data-<span class="property">id</span>=<span class="string">"18"</span>)</span><br></pre></td></tr></table></figure><br>我们来看编译结果是什么样的<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="property">id</span>=<span class="string">"j-tips"</span> data-<span class="property">id</span>=<span class="string">"18"</span> <span class="type">class</span>=<span class="string">"tips"</span>&gt;<span class="type">text</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>mixins</code> 还有一个高级用法，那就是内联代码块。先上例子<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixin</span> code(text)</span><br><span class="line"> p <span class="comment">#&#123;text&#125;</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">block</span></span><br><span class="line">  <span class="keyword">block</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  p no <span class="keyword">block</span>.</span><br><span class="line"></span><br><span class="line">+code('this <span class="keyword">is</span> a demo')</span><br><span class="line">  p this <span class="keyword">is</span> a <span class="keyword">block</span>.</span><br></pre></td></tr></table></figure><br>编译结果如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;p&gt;</span>this is a demo<span class="variable">&lt;/p&gt;</span></span><br><span class="line"><span class="variable">&lt;p&gt;</span>this is a <span class="built_in">block</span>.<span class="variable">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从上面的代码中，我们可以看出，我们在调用<code>+code</code>的时候给他设置一个代码块 <code>p this is a block</code>，那么在 <code>mixins</code> 里面，程序会自动把这个代码块的内容传递给 <code>block</code> 变量。然后我们可以通过判断进行相应的操作。</p>
<h2 id="2、模板的继承">2、模板的继承</h2><p>我们在做整站开发时，通常每一个页面的头部和底部都是一样的，之前我们的做法可能是写完一个之后然后不断的复制粘贴，但是现在我们有了 <code>Jade</code>之后，来看看我们可以怎么做？<br>在 <code>Jade</code> 里面，我们通过 <code>block</code> 和 <code>extends</code> 这两个关键字实现模板之间的继承，一个代码块可以看成是 <code>Jade</code> 中的一个 <code>block</code>，我们将在子模板中实现<br>我们先看一个小例子，定义一个简单的代码块<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">block demo</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> demo.</span><br></pre></td></tr></table></figure><br>默认情况下，代码块的内容是会被输出的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>在同一个文件中，我们可以直接通过这种方式进行调用<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">block</span> demo</span><br><span class="line">  p this <span class="keyword">is</span> a demo.</span><br><span class="line"><span class="keyword">block</span> demo</span><br><span class="line"><span class="keyword">block</span> demo</span><br><span class="line"><span class="keyword">block</span> demo</span><br></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>那么如果是不同文件之间，如何进行调用呢？<br>比如我们有一个 <code>layout.jade</code> 文件，内容是这样的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">body</span></span><br><span class="line">    <span class="tag">h1</span> demo.</span><br><span class="line"></span><br><span class="line">    block cont</span><br></pre></td></tr></table></figure><br>然后呢，我们有一个 <code>demo.jade</code>文件是这样的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout	<span class="comment">// 这里的 layout 指的是需要继承的模板文件</span></span><br><span class="line"></span><br><span class="line">block cont</span><br><span class="line">  <span class="tag">h2</span> Look, this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>然后我们通过命令行工具编译 <code>demo.jade</code> 文件，结果是神奇的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>demo.<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Look, this is a demo.<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>this is a paragraph.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>怎么样？是不是觉得很方便呢？</p>
<p>模板的继承解决了多个文件之间代码复用的问题，其实上面我们提到的页头和页脚我们用模板包含的方式可能更合适一些，下面我们来看一看模板的包含.</p>
<p><code>includes</code> 允许你静态包含一段 <code>Jade</code>, 或者别的存放在单个文件中的东西比如 <code>css</code> <code>html</code>。<br>比如我们有一个 <code>footer.jade</code> 文件，他里面有着这样的内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div<span class="id">#footer</span></span><br><span class="line">  <span class="tag">p</span> copyright.</span><br></pre></td></tr></table></figure><br>然后我们在我们的 <code>demo.jade</code> 文件中这样使用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">body</span></span><br><span class="line">    <span class="tag">h1</span> Hello, World.</span><br><span class="line"></span><br><span class="line">    include footer</span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">DOCTYPE</span> <span class="attribute">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, World.<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">p</span>&gt;</span>copyright.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当然，通过 <code>includes</code> 引入 <code>css</code> 代码也是一样的。大家可以尝试一下，我这里就不举例子了。</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之数据的动态传递和流程控制]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-03/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-03/</id>
    <published>2015-08-20T07:58:08.000Z</published>
    <updated>2015-08-20T07:58:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2585" target="_blank" rel="external">http://www.html-js.com/article/2585</a></p>
</blockquote>
<p>前面介绍了一些 <code>Jade</code> 的简单用法，这篇文章为大家讲一下 <code>Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>
<h2 id="1、Jade_中简单的变量定义和使用">1、<code>Jade</code> 中简单的变量定义和使用</h2><p>我们在写 <code>html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code>Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>
<a id="more"></a>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title Hello,World.</span><br><span class="line">  body</span><br><span class="line">    -<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>    p welcome to #&#123;<span class="ruby">title&#125;</span></span><br></pre></td></tr></table></figure>
<p>我想我们大概能够想象出编译结果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello,World.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>welcome to sqrtthree.com<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>从上面的代码中我们可以看出，在 <code>Jade</code> 中进行数据传递非常简单：</p>
<ol>
<li>通过<code>-</code> + <code>空格</code>开始，作为标记在 <code>Jade</code> 中定义变量</li>
<li>通过 <code>#{变量名}</code> 进行输出和调用即可.</li>
</ol>
<p>那要是我们就只是想输出 <code>#{}</code>的时候该怎么办呢？转义咯~<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p welcome to \#&#123;<span class="ruby">title&#125;</span>	// =&gt; &lt;p&gt;welcome to #&#123;<span class="ruby">title&#125;</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>另外，在 <code>Jade</code> 里面我们就可以通过这种方式使用 <code>js</code>的语法了，比如这样：(为了看着方便，我就直接在后面写出关键行的编译结果了)<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.toUpperCase()&#125;</span>		// =&gt; &lt;p&gt;welcome to SQRTTHREE.COM&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.charAt(<span class="number">0</span>)&#125;</span>		// =&gt; &lt;p&gt;welcome to s&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.substring(<span class="number">0</span>,<span class="number">4</span>)&#125;</span>	// =&gt; &lt;p&gt;welcome to sqrt&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>怎么样？有没有觉得很简单呢。</p>
<p>但是呢，我们在工作中是很少直接在文件中这样直接定义变量值的，通常都是在后台读取到值然后设置到页面中，那我们现在没有后台该怎么办呢？还记得第一篇文章中我们说过的 <code>Jade</code> 命令行工具么？我们可以在 <code>Jade</code> 为我们提供的命令行工具中直接传递数据，话不多说，继续上代码：</p>
<p>我们通过如下的命令编译下面的 <code>Jade</code> 文件，为了方便查看，就只显示部分的编译结果<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade <span class="transposed_variable">test.</span>jade  -P --obj <span class="string">'&#123;"</span>title<span class="string">": "</span>sqrtthree<span class="string">"&#125;'</span></span><br></pre></td></tr></table></figure><br><code>Jade</code> 文件如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome</span><br><span class="line">  body</span><br><span class="line">    p welcome to <span class="preprocessor">#&#123;title&#125;		// =&gt; <span class="title">&lt;p&gt;</span>welcome to sqrtthree<span class="title">&lt;/p&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们在命令行中和文件中定义了相同名字的变量，那究竟是显示哪一个变量的值呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome</span><br><span class="line">  body</span><br><span class="line">    -<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span></span><br><span class="line"></span>    p welcome to #&#123;<span class="ruby">title&#125;</span>		// =&gt; &lt;p&gt;welcome to sqrtthree.com&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>根据编译结果显示，在文件中定义的值把之前外部传入的值替换掉了。</p>
<p>其实上面的方式中有一个坑不知道大家发现没有，就是通常我们传入数据的时候都不会只传一个的，那如果需要传入很多的数据的话，怎么还能够这么写呢？反正换我我是绝逼会崩溃的。</p>
<p><code>Jade</code> 也支持传入 <code>json</code> 文件的方式进行数据传递的, 例如我们在项目里新建一个 <code>data.json</code> 文件，格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">title</span>": <span class="value"><span class="string">"根号三的博客"</span></span>,</span><br><span class="line">  "<span class="attribute">href</span>": <span class="value"><span class="string">"sqrtthree.com"</span></span>,</span><br><span class="line">  "<span class="attribute">cont</span>": <span class="value"><span class="string">"我可耻，我打了个硬广。^_^"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure><br>这里我们就要在命令行里执行另一个参数的命令了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade test<span class="class">.jade</span>  -P -O data<span class="class">.json</span>		<span class="comment">// 注意，O 为英文大写</span></span><br></pre></td></tr></table></figure><br>页面和编译结果分别为:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome #&#123;<span class="ruby">title&#125;</span>	// =&gt; &lt;title&gt;welcome 根号三的博客&lt;/title&gt;</span><br><span class="line">  body</span><br><span class="line">    a(href='#&#123;<span class="ruby">href&#125;</span>', title='#&#123;<span class="ruby">title&#125;</span>') #&#123;<span class="ruby">href&#125;</span>		// =&gt; &lt;a href="sqrtthree.com" title="根号三的博客"&gt;sqrtthree.com&lt;/a&gt;</span><br><span class="line">    p #&#123;<span class="ruby">cont&#125;</span>		// =&gt; &lt;p&gt;我可耻，我打了个硬广。^_^&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="2、Jade_中的注释">2、<code>Jade</code> 中的注释</h2><p>变量一多，我们就难免会忘记他们的含义，为了便于后期维护，我们的好习惯是给他们都加上注释方便理解。</p>
<p>单行注释和 JavaScript 里是一样的，通过 <code>//</code> 来开始，并且必须为单独一行哟~<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// just some example		// =&gt; <span class="comment">&lt;!-- just some example--&gt;</span></span><br><span class="line">p just some example		// =&gt; <span class="tag">&lt;<span class="title">p</span>&gt;</span>just some example<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>Jade</code> 同样支持不输出的注释，只需要加一个横线 <code>-</code> 就好了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//- just some example</span></span><br><span class="line"><span class="tag">p</span> just some example		<span class="comment">// =&gt; &lt;p&gt;just some example&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果我们需要多行注释的话，使用下面的块注释也是极好的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">    <span class="tag">h1</span> this is <span class="tag">a</span> demo.</span><br><span class="line">    <span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>编译结果是这样的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span><br><span class="line">  h1 this is a demo.</span><br><span class="line">  p this is a paragraph.</span><br><span class="line">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3、流程控制">3、流程控制</h2><p>有了变量，我们就可以做很多事情。比如像下面这样：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">var</span> <span class="built_in">data</span> = &#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">- f<span class="subst">or</span> ( <span class="built_in">var</span> attr <span class="keyword">in</span> <span class="built_in">data</span>)</span><br><span class="line">  p= <span class="string">'my '</span> + attr + <span class="string">' is '</span> + <span class="built_in">data</span><span class="preprocessor">[</span>attr<span class="preprocessor">]</span><span class="markup">ighlight html %&#125;</span></span><br></pre></td></tr></table></figure><br>那么结果是什么样的呢？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">my</span> <span class="property">name</span> <span class="keyword">is</span> sqrtthree&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">20</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>咦，看着怎么这么熟悉呢？没错，就是 <code>js</code> 中遍历 <code>json</code>对象的操作。当然了，下面这种方式也是可以的，结果和上面是一样的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span><span class="symbol">:</span> <span class="string">"sqrtthree"</span>,<span class="string">"age"</span><span class="symbol">:</span> <span class="number">20</span>&#125;;</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby"> <span class="keyword">for</span> ( var attr <span class="keyword">in</span> data)</span><br><span class="line"></span><span class="comment">  //- p= 'my ' + attr + ' is ' + data[attr]</span></span><br><span class="line">  p my #&#123;<span class="ruby">attr&#125;</span> is #&#123;<span class="ruby">data[attr]&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>当然了，除了 <code>for</code> 之外，<code>Jade</code> 还提供了另外一种语法糖<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span><span class="symbol">:</span> <span class="string">"sqrtthree"</span>,<span class="string">"age"</span><span class="symbol">:</span> <span class="number">20</span>&#125;;</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby"> each value, keys <span class="keyword">in</span> data</span><br><span class="line"></span><span class="comment">  //- p=keys + ' : ' + value</span></span><br><span class="line">  p #&#123;<span class="ruby">keys&#125;</span> : #&#123;<span class="ruby">value&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>说完了 <code>json</code> 对象，我们来说一说他的好搭档 - 数组<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var skills = [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'javascript'</span>, <span class="string">'nodejs'</span>];</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  -<span class="ruby"> each skill <span class="keyword">in</span> skills</span><br><span class="line"></span>    li #&#123;<span class="ruby">skill&#125;</span></span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>什么？太简单了？那我们来点复杂的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = [&#123;<span class="symbol">id:</span> <span class="number">1</span>,<span class="symbol">skills:</span> [<span class="string">'html'</span>, <span class="string">'css'</span>]&#125;,&#123;<span class="symbol">id:</span> <span class="number">2</span>,<span class="symbol">skills:</span> [<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>]&#125;];</span><br><span class="line"></span></span><br><span class="line">dl</span><br><span class="line">  -<span class="ruby"> each list <span class="keyword">in</span> data</span><br><span class="line"></span>    dt #&#123;<span class="ruby">list.id&#125;</span></span><br><span class="line">    -<span class="ruby"> each item <span class="keyword">in</span> list.skills</span><br><span class="line"></span>      dd #&#123;<span class="ruby">item&#125;</span></span><br></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dt</span>&gt;</span>1<span class="tag">&lt;/<span class="title">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>html<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>css<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dt</span>&gt;</span>2<span class="tag">&lt;/<span class="title">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>说完了 <code>for</code> &amp; <code>each</code> 语句，我们还有 <code>while</code> 语句呢，比如我们要输出5个 <code>li</code>，我们可以这么写：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">var</span> <span class="keyword">n</span> = 0;</span><br><span class="line"></span><br><span class="line">ul</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">n</span> &lt; 5</span><br><span class="line">    <span class="keyword">li</span>=<span class="keyword">n</span>++</span><br></pre></td></tr></table></figure><br>结果很明显：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>0<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>4<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4、条件判断">4、条件判断</h2><p>关于<code>if else</code>，我们可以这样用<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var onOff = <span class="keyword">true</span>;</span><br><span class="line"></span>-<span class="ruby"> var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  if onOff</span><br><span class="line">    -<span class="ruby">each skills <span class="keyword">in</span> data</span><br><span class="line"></span>      li=skills</span><br><span class="line">  else</span><br><span class="line">    li none</span><br></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为真时，结果为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为假时，结果为<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;ul&gt;</span></span><br><span class="line">  <span class="variable">&lt;li&gt;</span><span class="keyword">none</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line"><span class="variable">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><br>又见语法糖，<code>Jade</code> 默认是支持 <code>unless</code> 的，那么问题来了，<code>unless</code> 究竟是个什么东东呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var onOff = <span class="keyword">true</span>;</span><br><span class="line"></span>-<span class="ruby"> var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  unless !onOff</span><br><span class="line">    -<span class="ruby">each skills <span class="keyword">in</span> data</span><br><span class="line"></span>      li=skills</span><br><span class="line">  else</span><br><span class="line">    li none</span><br></pre></td></tr></table></figure><br>从上面的代码中，我们可以看出，<code>unless</code> 实际上就是 <code>if ( !(expr) )</code> 的等价方式.</p>
<p>下面我们谈谈 <code>case</code> &amp; <code>when</code> 的用法，编译结果我就不写了，大家可以自行测试。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">var</span> data = <span class="string">'jser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> data</span><br><span class="line">  <span class="keyword">when</span> <span class="string">'jser'</span></span><br><span class="line">    p Hello, jser.</span><br><span class="line">  <span class="keyword">when</span> <span class="string">'weber'</span></span><br><span class="line">    p Hello, weber.</span><br><span class="line">  <span class="keyword">default</span></span><br><span class="line">    p Hello, <span class="preprocessor">#&#123;data&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2585">http://www.html-js.com/article/2585</a></p>
</blockquote>
<p>前面介绍了一些 <code>Jade</code> 的简单用法，这篇文章为大家讲一下 <code>Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>
<h2 id="1、Jade_中简单的变量定义和使用">1、<code>Jade</code> 中简单的变量定义和使用</h2><p>我们在写 <code>html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code>Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之标签的基本写法]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-02/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-02/</id>
    <published>2015-08-20T07:52:51.000Z</published>
    <updated>2015-08-20T07:52:51.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2575" target="_blank" rel="external">http://www.html-js.com/article/2575</a></p>
</blockquote>
<h2 id="1、文档声明">1、文档声明</h2><p>我们在开始写一个 <code>html</code> 页面的时候，首先要写上 <code>DOCTYPE</code> 文档声明的，现在通常情况下我们都是采用 <code>HTML5</code> 的文档声明方式，那么在 <code>jade</code> 里面我们应该怎么写呢？</p>
<p>在 <code>jade</code> 里面编写文档声明有2种方式：</p>
<ol>
<li>我们可以直接在 <code>jade</code> 文件里面写 <code>doctype html</code> 即可</li>
<li><code>jade</code> 为我们提供了一个简单的写法，<code>!!! 5</code> (不过好像 <code>jade</code> 在升级之后的新版本中不推荐使用此方法了 -_-)</li>
</ol>
<a id="more"></a>
<p>当然，<code>jade</code> 还默认支持其他类型的文档声明，只需要使用 <code>doctype</code> 跟上下面的选项即可。<code>jade</code> 默认支持的有:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var doctypes = exports.doctypes = &#123;</span><br><span class="line">    '5': '<span class="doctype">&lt;!DOCTYPE html&gt;</span>',</span><br><span class="line">    'xml': '<span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>',</span><br><span class="line">    'default': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</span><br><span class="line">    'transitional': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</span><br><span class="line">    'strict': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span>',</span><br><span class="line">    'frameset': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;</span>',</span><br><span class="line">    '1.1': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span>',</span><br><span class="line">    'basic': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd"&gt;</span>',</span><br><span class="line">    'mobile': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd"&gt;</span>'</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>doctype</code> 对大小写是不敏感的, 所以下面两个是一样的效果:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="keyword">Default</span></span><br><span class="line">doctype <span class="keyword">default</span></span><br></pre></td></tr></table></figure></p>
<p>例如：如果我们要想写 <code>XHTML 1.0 Strict</code> 文档声明，则可以这样写：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">doctype</span> strict</span><br></pre></td></tr></table></figure></p>
<p>编译结果如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、标签">2、标签</h2><p><code>jade</code> 中的标签的写法非常的简单，就是一个单词。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title</span><br><span class="line">  body</span><br></pre></td></tr></table></figure>
<p>以上代码会被编译成:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>jade</code> 是以严格的缩进来区分标签的开始和结束的，默认为2个空格表示缩进。</strong></p>
<p>如果我们要写一个标签并且带有内容，比如说要写一个标题，我们只需要在标签单词后面加一个空格，然后跟上内容即可。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span> this is <span class="tag">a</span> title.</span><br><span class="line"><span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>有的时候，我们会需要输出一些特殊排版格式的文本或者是为了提高代码的阅读性，需要显示出如下的效果：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;p&gt;</span></span><br><span class="line">  <span class="keyword">1</span>. 001</span><br><span class="line">  <span class="keyword">2</span>. 002</span><br><span class="line">  <span class="keyword">3</span>. 003</span><br><span class="line">  <span class="keyword">4</span>. 004</span><br><span class="line"><span class="tag">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><br>那么我们在 jade 中应该怎么写呢，这里 jade 给我们提供了两种方式，第一种是在每一行前面加上一个 <code>|</code> 和<code>空格</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">  | <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  | <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  | <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  | <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure><br>第二种方法是：在标签名后面紧跟一个 <code>.</code> 号。则此标签下面的内容会被 <code>jade</code> 解析为一个代码段：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.</span><br><span class="line">  <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure></p>
<p>这下有的同学就傻傻分不清了，这两种方式到底有什么区别呢？这里我们就不得不说到标签混排，如果我们有这样一个需求，在上面的代码中 <code>1</code> 的后面需要加一个 <code>strong</code> 标签。</p>
<p>首先我们说第一种情况下，我们的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">  | <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  strong aaa</span><br><span class="line">  | <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  | <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  | <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure></p>
<p>如果是第二种写法的话，我们就需要这样写：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.</span><br><span class="line">  1. 001</span><br><span class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>aaa<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line">  2. 002</span><br><span class="line">  3. 003</span><br><span class="line">  4. 004</span><br></pre></td></tr></table></figure></p>
<p>编译结果如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  1. 001</span><br><span class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>aaa<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line">  2. 002</span><br><span class="line">  3. 003</span><br><span class="line">  4. 004</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3、标签的属性和属性值">3、标签的属性和属性值</h2><p><code>h1</code> <code>p</code> 等等这些标签，我们通常都会给他们写上<code>id</code> &amp; <code>class</code>属性的，那么这在 <code>jade</code> 中应该怎么写呢？和 <code>zen coding</code> 的语法一样，我们只需要这样写：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1<span class="id">#id</span><span class="class">.class</span> this is <span class="tag">a</span> title.</span><br><span class="line">p<span class="id">#j-text</span><span class="class">.text</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>等等，那我要是想添加多个 <code>class</code> 怎么办呢？这样办：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1<span class="id">#id</span><span class="class">.class1</span><span class="class">.class2</span><span class="class">.class3</span> this is <span class="tag">a</span> title.</span><br><span class="line">p<span class="id">#j-text</span><span class="class">.text</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class1 class2 class3"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>什么？写 <code>div</code> 写烦了？那就不写咯。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#id</span><span class="class">.class</span></span><br><span class="line"><span class="id">#id</span><span class="class">.class1</span><span class="class">.class2</span> this is <span class="tag">a</span> <span class="tag">div</span> without tags.</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"id"</span> <span class="type">class</span>=<span class="string">"class"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"id"</span> <span class="type">class</span>=<span class="string">"class1 class2"</span>&gt;this <span class="keyword">is</span> a <span class="keyword">div</span> <span class="keyword">without</span> tags.&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>这里要说明一下，在 <code>jade</code> 的语法里面，只有 <code>div</code> 标签能够省略不写.</strong></p>
<p>说完了 <code>id</code> 和 <code>class</code>，我们再来说一下标签其他的属性应该怎么添加。<code>jade</code> 里添加其他属性和值的语法也和 <code>zen coding</code> 类似，我们需要在标签后面加上小括号<code>()</code>，然后按照<code>(属性名=属性值)</code>的格式写就好了，如果有多个属性，中间以逗号进行分割。</p>
<p>比如上面的 id 和 class 的写法我们就可以改写成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">h1</span><span class="params">(id=<span class="string">"id"</span>, class=<span class="string">"class"</span>)</span></span> this is <span class="tag">a</span> title.</span><br><span class="line"><span class="function"><span class="title">p</span><span class="params">(id=<span class="string">"j-text"</span>, class=<span class="string">"text"</span>)</span></span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>结果是一样的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>说来说去还是这两个属性，烦了？那我们换一个吧：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">a</span><span class="params">(herf=<span class="string">"/index.html"</span>, title=<span class="string">"this is a link."</span>, target=<span class="string">"_blank"</span>, data-uid=<span class="string">"1000"</span>)</span></span> index.html</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">herf</span>=<span class="value">"/index.html"</span> <span class="attribute">title</span>=<span class="value">"this is a link."</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">data-uid</span>=<span class="value">"1000"</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们要写一个单属性应该怎么写？比如给表单元素添加 <code>checked</code>属性：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">input</span><span class="params">(type=<span class="string">"checkbox"</span>, name=<span class="string">"all"</span>, checked, value=<span class="string">"全选"</span>)</span></span></span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"all"</span> <span class="keyword">checked</span>=<span class="string">"checked"</span> <span class="keyword">value</span>=<span class="string">"全选"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之开篇]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-01/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-01/</id>
    <published>2015-08-20T07:19:56.000Z</published>
    <updated>2015-08-20T07:19:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2570" target="_blank" rel="external">http://www.html-js.com/article/2570</a></p>
</blockquote>
<p>随着 web 发展，前端应用变得越来越复杂，基于后端的 <code>javascript(Node.js)</code> 也开始崭露头角，此时  <code>javascript</code> 被寄予了更大的期望，与此同时 <code>javascript MVC</code> 思想也开始流行起来。为了使用户界面与业务数据（内容）分离，就产生了『模板引擎』这个概念。</p>
<p>说的简单点，模板引擎就是一个字符串中有几个变量待定，通过模板引擎函数把数据动态的塞进去。</p>
<p>今天我们就来聊一聊 <code>Jade</code> 的使用方法和语法说明。<code>Jade</code>官网：<a href="http://jade-lang.com/" target="_blank" rel="external">jade-lang.com/</a></p>
<a id="more"></a>
<h2 id="Jade_的使用和命令行工具构建方法">Jade 的使用和命令行工具构建方法</h2><p>Jade 的使用需要依赖 <code>Node</code>环境，通过 <code>npm</code> 包进行安装 <code>Jade</code> 命令行工具，安装成功之后就可以新建一个文件，文件后缀名为 <code>*.jade</code>。我们就可以尽情的使用 <code>jade</code> 的语法咯，写完之后只需要通过命令行工具进行编译即可编译为我们平时使用的 <code>html</code> 静态文件。</p>
<h3 id="安装方法">安装方法</h3><p>1.首先确定是否安装有 <code>Node</code> 环境和 <code>npm</code> 工具，查看方法如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在命令行工具中执行如下代码：</span><br><span class="line">node -v</span><br><span class="line">=&gt; v0<span class="number">.10</span><span class="number">.35</span></span><br><span class="line">npm -v</span><br><span class="line">=&gt; <span class="number">1.4</span><span class="number">.28</span></span><br><span class="line"><span class="comment">// 如果成功返回版本号信息即为安装成功。</span></span><br></pre></td></tr></table></figure>
<p>2.通过 <code>npm</code> 全局安装 <code>Jade</code> 命令行工具</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jade -<span class="keyword">g</span></span><br><span class="line"></span><br><span class="line">// mac用户可能需要管理员权限，使用如下命令</span><br><span class="line">sudo npm <span class="keyword">install</span> jade -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>3.创建 <code>*.Jade</code> 文件，开始任务。</p>
<p>4.通过使用 <code>Jade</code> 命令行工具将 <code>jade</code> 文件编译为 <code>html</code> 文件</p>
<h3 id="Jade_命令行工具使用方法">Jade 命令行工具使用方法</h3><p>我们可以通过 <code>jade --help</code> 查看 <code>Jade</code> 命令行工具的使用参数</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">jade <span class="comment">--help</span></span><br><span class="line"></span><br><span class="line">Usage: jade [options] [dir|<span class="type">file</span> ...]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, <span class="comment">--help         output usage information / 输出使用信息</span></span><br><span class="line">    -V, <span class="comment">--version      output the version number / 输出版本号信息</span></span><br><span class="line">    -O, <span class="comment">--obj &lt;str&gt;    javascript options object / 传输到 jade 文件中的数据对象</span></span><br><span class="line">    -o, <span class="comment">--out &lt;dir&gt;    output the compiled html to &lt;dir&gt; / 输出编译后的 HTML 到 &lt;dir&gt;</span></span><br><span class="line">    -p, <span class="comment">--path &lt;path&gt;  filename used to resolve includes / 在处理 stdio 时，查找包含文件时的查找路径</span></span><br><span class="line">    -P, <span class="comment">--pretty       compile pretty html output / 格式化编译 html 文件</span></span><br><span class="line">    -c, <span class="comment">--client       compile function for client-side runtime.js / 编译浏览器端可用的 runtime.js</span></span><br><span class="line">    -n, <span class="comment">--name &lt;str&gt;   The name of the compiled template (requires --client) / 编译模板的名字</span></span><br><span class="line">    -D, <span class="comment">--no-debug     compile without debugging (smaller functions) / 关闭编译的调试选项(函数会更小)</span></span><br><span class="line">    -w, <span class="comment">--watch        watch files for changes and automatically re-render / 监听文件改变并自动刷新编译结果</span></span><br><span class="line">    <span class="comment">--name-after-file  Name the template after the last section of the file path (requires --client and overriden by --name)</span></span><br><span class="line">    <span class="comment">--doctype &lt;str&gt;    Specify the doctype on the command line (useful if it is not specified by the template) / 在命令行中指定文档类型(如果在模板中没有被指定)</span></span><br><span class="line"></span><br><span class="line">  Examples:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编译整个目录</span></span><br><span class="line">    $ jade templates</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成 &#123;foo,bar&#125;.html</span></span><br><span class="line">    $ jade &#123;foo,bar&#125;.jade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在标准IO下使用jade</span></span><br><span class="line">    $ jade &lt; <span class="keyword">my</span>.jade &gt; <span class="keyword">my</span>.html</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在标准IO下使用jade</span></span><br><span class="line">    $ echo 'h1 Jade!' | jade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># foo, bar 目录渲染到 /tmp</span></span><br><span class="line">    $ jade foo bar <span class="comment">--out /tmp</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如说我们需要编译index.jade文件，默认编译到同文件夹下的同名html 文件中</span></span><br><span class="line">jade index<span class="class">.jade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们要格式化输出 index.html 文件，只需要添加 -P 参数即可</span></span><br><span class="line">jade -P index<span class="class">.jade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们要实现监听和自动编译，需要使用 -w 参数</span></span><br><span class="line">jade -P -w index.jade</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.sqrtthree.com/2015/06/27/hello-world/"/>
    <id>http://blog.sqrtthree.com/2015/06/27/hello-world/</id>
    <published>2015-06-27T12:30:41.000Z</published>
    <updated>2015-06-27T12:30:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="About_Me">About Me</h2><p>I’m a Front-End developer in everywhere, now living in ZhengZhou, China.</p>
<p>I’m ❤  programming &amp; Front-end design.</p>
<h2 id="Skills">Skills</h2><ul>
<li>HTML5&amp;CSS3    <code>*****</code></li>
<li>Javascript    <code>********</code></li>
<li>Nodejs        <code>**</code></li>
</ul>
<h2 id="Tools">Tools</h2><ul>
<li>mac &amp; vim</li>
</ul>
<h2 id="Contact_Me">Contact Me</h2><ul>
<li>E-mail:    <a href="mailto:sqrtthree@foxmail.com" target="_blank" rel="external">sqrtthree@foxmail.com</a></li>
<li>Github:    <a href="https://github.com/sqrthree" target="_blank" rel="external">@sqrthree</a></li>
<li>Twitter:    <a href="https://twitter.com/sqrtthree" target="_blank" rel="external">@sqrtthree</a></li>
<li>Weibo:    <a href="http://weibo.com/sqrtthree" target="_blank" rel="external">@sqrtthree</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="About_Me">About Me</h2><p>I’m a Front-End developer in everywhere, now living in ZhengZhou, China.</p>
<p>I’m ❤  programming &amp; F]]>
    </summary>
    
  </entry>
  
</feed>
