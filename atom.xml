<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[sqrtthree]]></title>
  <subtitle><![CDATA[O ever youthful, O ever weeping.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.sqrtthree.com/"/>
  <updated>2015-11-03T16:56:41.000Z</updated>
  <id>http://blog.sqrtthree.com/</id>
  
  <author>
    <name><![CDATA[sqrtthree]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[关于社区和初心，关于感激和致歉]]></title>
    <link href="http://blog.sqrtthree.com/2015/11/04/about-fetalk/"/>
    <id>http://blog.sqrtthree.com/2015/11/04/about-fetalk/</id>
    <published>2015-11-03T16:56:41.000Z</published>
    <updated>2015-11-03T16:56:41.000Z</updated>
    <content type="html"><![CDATA[<p>转眼之间，接触前端开发这个领域马上就三年了，想想这三年来一路上的跌跌撞撞，想想曾经 “厕所后面喝过水、火车道上轧过腿” 的岁月，一片恍惚，仿佛又看到了那个在夕阳下奔跑的自己，那是我逝去的青春呐。</p>
<p>前端开发是很有意思的一件事，在我眼里她不仅仅是一份工作，更像是一门艺术，通过你的手，能够创造出一个五彩缤纷的世界，我觉得在程序的世界里，你就是上帝，你说”要有水”，于是就有了水。 你的艺术作品，让世界变得更加美好一点点。</p>
<a id="more"></a>
<p>你还记得自己当初为什么要选择做前端开发么？是为了随处找一个效果凑合满足业务需求还是想去理解其原理只为能创造出更完美的艺术品？</p>
<p>你或曾有过激情，或曾有过梦想，但当你的KPI考核点是PM那些荒唐的改来改去的功能点，多炽热的火焰也会被浇灭。因此你必须要搞出一点东西出来，努力爬上去。是废命于加班，天天随便复制点代码满足业务，还是专注于技术底层的研发，为某个难题而苦恼，其实完全在于你一念之差。不要因为走得太远，就忘记了当初为什么出发。</p>
<p>实际上呆在郑州的这两年多时间里，也接触了一些前端开发者，由于某种不难想象的原因，导致整个大环境确实是不太理想的，普遍存在的现象是新人们或空有一颗学习的心但是不知道该学什么、怎么学，或由于环境浮躁导致从一开始就养成了很多的坏习惯，由于没有合适的渠道，大牛们也没办法有效的分享自己的经验技巧。在圈子里遇到的最多的诸如 “你们谁有某某效果，借我用一下”之类的。</p>
<p>前段时间跟朋友聊天的时候抱怨说一直找不到高质量的交流群或社区，后来就突然想到，既然没有，为什么我们不自己做一个呢？本着一方面可以给新人提供一个学习的方向，另一方面也尝试改善一下大环境，努力营造一个良好的交流氛围，<a href="http://fetalk.xyz/" target="_blank" rel="external">FETalk</a> 就这样诞生了。</p>
<p>开始着手后，我发现这比想象的要困难得多。由于之前接触过一点 <code>NodeJS</code>，又混迹于 <code>CNode</code> 社区，很自然的采用了通过 <code>NodeJS</code> 开发的一个社区框架。实际上最大的问题在于之前从未接触过服务器相关的知识，所以当开始尝试部署服务器环境的时候遇到了各种诡异和头疼的问题。要感谢那些帮助和支持我的朋友，还有那些帮助过我的文章，没有你们，着实很难做出来。另外一个严重的问题就是时间不够用，平时工作上和自己私下的学习计划加起来，已经使我的睡眠时间没法保障了，意识到很难按照之前计划的时间进度完成后，我经常很焦虑，因为心理素质不好，我有时候还会为了这个焦虑而焦虑。有那么几次，我甚至对于要不要坚持开发完都感到非常犹豫。</p>
<p>后来……后来我看到了这样一句话:『以大多数人的努力程度之低，根本轮不到拼天赋』</p>
<p>为了尝试改变一点什么，我最后坚持把这个社区做出来了，就是这样。</p>
<h2 id="相关链接">相关链接</h2><p>社区取名为 <code>FETalk</code>，意为 <code>Front-End Talk</code> 的缩写，地址是 <a href="http://fetalk.xyz/" target="_blank" rel="external">http://fetalk.xyz/</a></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>转眼之间，接触前端开发这个领域马上就三年了，想想这三年来一路上的跌跌撞撞，想想曾经 “厕所后面喝过水、火车道上轧过腿” 的岁月，一片恍惚，仿佛又看到了那个在夕阳下奔跑的自己，那是我逝去的青春呐。</p>
<p>前端开发是很有意思的一件事，在我眼里她不仅仅是一份工作，更像是一门艺术，通过你的手，能够创造出一个五彩缤纷的世界，我觉得在程序的世界里，你就是上帝，你说”要有水”，于是就有了水。 你的艺术作品，让世界变得更加美好一点点。</p>]]>
    
    </summary>
    
      <category term="FETalk" scheme="http://blog.sqrtthree.com/tags/FETalk/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[3、Supervisor 部署和配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/"/>
    <id>http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/</id>
    <published>2015-10-20T16:08:41.000Z</published>
    <updated>2015-10-20T16:08:41.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。</p>
<h3 id="安装">安装</h3><p><code>Ubuntu</code> 可以直接通过 <code>apt</code> 安装：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install supervisor</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="配置文件详解">配置文件详解</h3><p><code>supervisor</code> 通过对应的配置文件来进行进程的监控和管理，因此安装完成之后我们需要给将要监控的进程写一个配置文件。每个进程的配置文件都建议单独分拆，放在 <code>/etc/supervisor/conf.d/</code> 目录下，以 <code>.conf</code> 作为扩展名。如我们的 <code>shadowsocks.conf</code> 配置文件。</p>
<p>下面是配置文件的格式和支持的参数，只需要写我们需要配置的参数即可。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[supervisorctl]</span><br><span class="line">serverurl=<span class="string">unix:</span><span class="comment">///tmp/supervisor.sock ; use a unix:// URL  for a unix socket</span></span><br><span class="line">;serverurl=<span class="string">http:</span><span class="comment">//127.0.0.1:9001 ; use an http:// url to specify an inet socket</span></span><br><span class="line">;username=chris              ; should be same <span class="keyword">as</span> http_username <span class="keyword">if</span> set</span><br><span class="line">;password=<span class="number">123</span>                ; should be same <span class="keyword">as</span> http_password <span class="keyword">if</span> set</span><br><span class="line">;prompt=mysupervisor         ; cmd line prompt (<span class="keyword">default</span> <span class="string">"supervisor"</span>)</span><br><span class="line">;history_file=~/.sc_history  ; use readline history <span class="keyword">if</span> available</span><br><span class="line">添加单个进程</span><br><span class="line"></span><br><span class="line">; 管理单个进程的配置，可创建多个，下面是所有可能的配置选项</span><br><span class="line">;[<span class="string">program:</span>theprogramname]</span><br><span class="line">;command=<span class="regexp">/bin/</span>cat              ; 启动进程的命令 使用相对路径，可以加参数</span><br><span class="line">;process_name=%(program_name)s ; 进程名称 表达式 (默认 %(program_name)s)</span><br><span class="line">;numprocs=<span class="number">1</span>                    ; 进程数目 (<span class="keyword">def</span> <span class="number">1</span>)</span><br><span class="line">;directory=/tmp                ; 执行命令所在的目录 (<span class="keyword">def</span> no cwd)</span><br><span class="line">;umask=<span class="number">022</span>                     ; 进程默认权限 (<span class="keyword">default</span> None)</span><br><span class="line">;priority=<span class="number">999</span>                  ; 进程启动相对优先权 (<span class="keyword">default</span> <span class="number">999</span>)</span><br><span class="line">;autostart=<span class="literal">true</span>                ; 跟随supervisor启动时启动 (<span class="string">default:</span> <span class="literal">true</span>)</span><br><span class="line">;autorestart=unexpected        ; 计划启动 (<span class="string">default:</span> unexpected)</span><br><span class="line">;startsecs=<span class="number">1</span>                   ; 延时启动 (<span class="keyword">def</span>. <span class="number">1</span>)</span><br><span class="line">;startretries=<span class="number">3</span>                ; 最多连续启动失败 (<span class="keyword">default</span> <span class="number">3</span>)</span><br><span class="line">;exitcodes=<span class="number">0</span>,<span class="number">2</span>                 ; 进程结束代码 (<span class="keyword">default</span> <span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">;stopsignal=QUIT               ; signal used to kill process (<span class="keyword">default</span> TERM)</span><br><span class="line">;stopwaitsecs=<span class="number">10</span>               ; 最长结束等待时间，否则使用 SIGKILL (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stopasgroup=<span class="literal">false</span>             ; 是否想UNIX进程组发送结束信号 (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;killasgroup=<span class="literal">false</span>             ; SIGKILL UNIX 进程组 (<span class="keyword">def</span> <span class="literal">false</span>)</span><br><span class="line">;user=chrism                   ; 设置启动此程序的用户</span><br><span class="line">;redirect_stderr=<span class="literal">true</span>          ; 重定向程序的标准错误到标准输出 (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;stdout_logfile=<span class="regexp">/a/</span>path        ; 标准输出的日志路径, NONE <span class="keyword">for</span> none; <span class="keyword">default</span> AUTO</span><br><span class="line">;stdout_logfile_maxbytes=<span class="number">1</span>MB   ; 日志文件最大值，否则循环写入 (<span class="keyword">default</span> <span class="number">50</span>MB)</span><br><span class="line">;stdout_logfile_backups=<span class="number">10</span>     ; 标准输出日志备份数目 (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stdout_capture_maxbytes=<span class="number">1</span>MB   ; number of bytes <span class="keyword">in</span> <span class="string">'capturemode'</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line">;stdout_events_enabled=<span class="literal">false</span>   ; emit events on stdout writes (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;stderr_logfile=<span class="regexp">/a/</span>path        ; 标准错误输出日志路径, NONE <span class="keyword">for</span> none; <span class="keyword">default</span> AUTO</span><br><span class="line">;stderr_logfile_maxbytes=<span class="number">1</span>MB   ; 日志文件最大值，否则循环写入 (<span class="keyword">default</span> <span class="number">50</span>MB)</span><br><span class="line">;stderr_logfile_backups=<span class="number">10</span>     ; 标准错误日志备份数目 (<span class="keyword">default</span> <span class="number">10</span>)</span><br><span class="line">;stderr_capture_maxbytes=<span class="number">1</span>MB   ; number of bytes <span class="keyword">in</span> <span class="string">'capturemode'</span> (<span class="keyword">default</span> <span class="number">0</span>)</span><br><span class="line">;stderr_events_enabled=<span class="literal">false</span>   ; emit events on stderr writes (<span class="keyword">default</span> <span class="literal">false</span>)</span><br><span class="line">;environment=A=<span class="string">"1"</span>,B=<span class="string">"2"</span>       ; 进程附加环境 (<span class="keyword">def</span> no adds)</span><br><span class="line">;serverurl=AUTO                ; override serverurl computation (childutils)</span><br></pre></td></tr></table></figure>
<p>例如，可以简单的配置成:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">program</span>:long_script]</span><br><span class="line">command=/usr/<span class="keyword">local</span>/bin/long.<span class="keyword">sh</span></span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">stderr_logfile=/<span class="keyword">var</span>/<span class="keyword">log</span>/long.<span class="keyword">err</span>.<span class="literal">log</span></span><br><span class="line">stdout_logfile=/<span class="keyword">var</span>/<span class="keyword">log</span>/long.<span class="keyword">out</span>.<span class="literal">log</span></span><br></pre></td></tr></table></figure>
<p>编写完配置文件之后，通过 <code>service supervisor restart</code> 命令重启 <code>supervisor</code> 服务，也可以通过以下方式进行温柔的重启服务和进程:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">supervisorctl</span> reread</span><br><span class="line">supervisorctl update</span><br></pre></td></tr></table></figure>
<h3 id="命令行工具_supervisorctl">命令行工具 supervisorctl</h3><p>查看所有命令:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="operator"><span class="keyword">help</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> commands (<span class="keyword">type</span> <span class="keyword">help</span> ):</span><br><span class="line">=====================================</span><br><span class="line"><span class="keyword">add</span>    <span class="keyword">clear</span>  fg        <span class="keyword">open</span>  quit    remove  restart   <span class="keyword">start</span>   <span class="keyword">stop</span>  <span class="keyword">update</span></span><br><span class="line">avail  <span class="keyword">exit</span>   maintail  pid   reload  reread  <span class="keyword">shutdown</span>  <span class="keyword">status</span>  tail  <span class="keyword">version</span></span></span><br></pre></td></tr></table></figure>
<p>常用命令的功能:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl <span class="operator"><span class="keyword">stop</span> programName，停止某一个进程(programName)，programName为[program:chatdemon]里配置的值。</span><br><span class="line">supervisorctl <span class="keyword">start</span> programName，启动某个进程</span><br><span class="line">supervisorctl restart programName，重启某个进程</span><br><span class="line">supervisorctl <span class="keyword">stop</span> groupworker: ，重启所有属于名为groupworker这个分组的进程(<span class="keyword">start</span>,restart同理)</span><br><span class="line">supervisorctl <span class="keyword">stop</span> all，停止全部进程，注：<span class="keyword">start</span>、restart、<span class="keyword">stop</span>都不会载入最新的配置文件。</span><br><span class="line">supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。</span><br><span class="line">supervisorctl <span class="keyword">update</span>，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。</span></span><br></pre></td></tr></table></figure>
<p>执行 <code>supervisorctl</code> 命令需要管理员权限，如果你以普通用户的身份登陆服务器，需要在命令前使用 <code>sudo</code> 命令: </p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sudo</span> supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br></pre></td></tr></table></figure>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000" target="_blank" rel="external">http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps" target="_blank" rel="external">https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://supervisord.org/">Supervisor</a> 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。</p>
<h3 id="安装">安装</h3><p><code>Ubuntu</code> 可以直接通过 <code>apt</code> 安装：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> install supervisor</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2、shadowsocks 部署和配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/</id>
    <published>2015-10-20T15:38:06.000Z</published>
    <updated>2015-10-20T15:38:06.000Z</updated>
    <content type="html"><![CDATA[<p>关于 <code>shadowsocks</code> 是什么就不多介绍了，这是<a href="http://shadowsocks.org/en/index.html" target="_blank" rel="external">官网</a>，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。</p>
<h3 id="服务端配置:">服务端配置:</h3><p>首先请确保你的服务器中已经安装了 <code>Python 2.6 or 2.7</code>，然后执行以下命令进行安装:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>然后？然后就安装完成了啊。什么？你不确定？那你可以输入 <code>ssserver --version</code> 进行确认，如果安装成功，则会反馈程序的当前版本号。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssserver --version</span><br><span class="line">Shadowsocks <span class="number">2.8</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>接下来，你可以通过 <code>ssserver --help</code> 查看该命令的用法。</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ ssserver --help</span><br><span class="line">usage: ssserver [OPTION]...</span><br><span class="line">A fast tunnel proxy that helps you bypass firewalls.</span><br><span class="line"></span><br><span class="line">You can supply configurations via either config file or command line arguments.</span><br><span class="line"></span><br><span class="line">Proxy options:</span><br><span class="line">  -<span class="ruby">c <span class="constant">CONFIG</span>              path to config file</span><br><span class="line"></span>  -<span class="ruby">s <span class="constant">SERVER_ADDR</span>         server address, <span class="symbol">default:</span> <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"></span>  -<span class="ruby">p <span class="constant">SERVER_PORT</span>         server port, <span class="symbol">default:</span> <span class="number">8388</span></span><br><span class="line"></span>  -<span class="ruby">k <span class="constant">PASSWORD</span>            password</span><br><span class="line"></span>  -<span class="ruby">m <span class="constant">METHOD</span>              encryption method, <span class="symbol">default:</span> aes-<span class="number">256</span>-cfb</span><br><span class="line"></span>  -<span class="ruby">t <span class="constant">TIMEOUT</span>             timeout <span class="keyword">in</span> seconds, <span class="symbol">default:</span> <span class="number">300</span></span><br><span class="line"></span>  -<span class="ruby">-fast-open            use <span class="constant">TCP_FASTOPEN</span>, requires <span class="constant">Linux</span> <span class="number">3.7</span>+</span><br><span class="line"></span>  -<span class="ruby">-workers <span class="constant">WORKERS</span>      number of workers, available on <span class="constant">Unix</span>/<span class="constant">Linux</span></span><br><span class="line"></span>  -<span class="ruby">-forbidden-ip <span class="constant">IPLIST</span>  comma seperated <span class="constant">IP</span> list forbidden to connect</span><br><span class="line"></span>  -<span class="ruby">-manager-address <span class="constant">ADDR</span> optional server manager <span class="constant">UDP</span> address, see wiki</span><br><span class="line"></span></span><br><span class="line">General options:</span><br><span class="line">  -<span class="ruby">h, --help             show this help message <span class="keyword">and</span> exit</span><br><span class="line"></span>  -<span class="ruby">d start/stop/restart  daemon mode</span><br><span class="line"></span>  -<span class="ruby">-pid-file <span class="constant">PID_FILE</span>    pid file <span class="keyword">for</span> daemon mode</span><br><span class="line"></span>  -<span class="ruby">-log-file <span class="constant">LOG_FILE</span>    log file <span class="keyword">for</span> daemon mode</span><br><span class="line"></span>  -<span class="ruby">-user <span class="constant">USER</span>            username to run as</span><br><span class="line"></span>  -<span class="ruby">v, -vv                verbose mode</span><br><span class="line"></span>  -<span class="ruby">q, -qq                quiet mode, only show warnings/errors</span><br><span class="line"></span>  -<span class="ruby">-version              show version information</span><br><span class="line"></span></span><br><span class="line">Online help: &lt;https://github.com/shadowsocks/shadowsocks&gt;</span><br></pre></td></tr></table></figure>
<p>比如说你可以这样启动服务:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -p <span class="number">8388</span> -k password -m aes-<span class="number">256</span>-cfb</span><br></pre></td></tr></table></figure>
<p>当然了，每次都在命令行上配置是很麻烦的，所幸 <code>ssserver</code> 还支持以配置文件方式启动。比如说，我们在 <code>~/.config/shadowsocks/</code> 文件夹下创建一个 <code>config.json</code> 文件作为 <code>ssserver</code> 的启动配置文件(文件位置随意，放在什么地方都无所谓)， <code>config.json</code> 文件内容如下:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</span><br><span class="line">    “server_port”:<span class="number">8388</span>,</span><br><span class="line">    “password”:“password”</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上参数很简单，就不过多解释了，保存好文件之后执行以下命令启动服务即可:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c ~<span class="regexp">/.config/shadowsocks</span><span class="regexp">/config.json</span></span><br></pre></td></tr></table></figure>
<p>如果想在后台运行，可以带上 <code>nohup</code> 命令:</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ssserver -c ~<span class="regexp">/.config/shadowsocks</span><span class="regexp">/config.json</span></span><br></pre></td></tr></table></figure>
<p>当然了，还有更高级的进程管理技巧，这个下一篇文章里会详细介绍。</p>
<p>上面所说的 <code>config.json</code> 文件中还支持配置多端口，我们可以利用这个特性达到多账号使用的效果。配置方式为:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "<span class="attribute">timeout</span>":<span class="value"><span class="number">600</span></span>,</span><br><span class="line">    "<span class="attribute">method</span>":<span class="value"><span class="string">"aes-256-cfb"</span></span>,</span><br><span class="line">    "<span class="attribute">local_port</span>":<span class="value"><span class="number">1080</span></span>,</span><br><span class="line">    "<span class="attribute">server</span>":<span class="value"><span class="string">"0.0.0.0"</span></span>,</span><br><span class="line">    "<span class="attribute">port_password</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">8388</span>":<span class="value"><span class="string">"password1"</span></span>,</span><br><span class="line">        "<span class="attribute">8389</span>":<span class="value"><span class="string">"password2"</span></span><br><span class="line">    </span>&#125;</span>,</span><br><span class="line">    "<span class="attribute">_comment</span>": <span class="value">&#123;</span><br><span class="line">        "<span class="attribute">8388</span>":<span class="value"><span class="string">"描述一，可以用来记录端口备注或是对应的用户"</span></span><br><span class="line">        <span class="string">"8389"</span>:<span class="string">"描述二，可以用来记录端口备注或是对应的用户"</span></span><br><span class="line">    </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>因为 <code>json</code> 文件不支持注释，因此配置文件中扩展了一个 <code>_comment</code> 参数用来进行备注，程序会自动忽略掉该参数。</p>
<h3 id="客户端配置">客户端配置</h3><p>相对来说客户端就太简单了，各个平台均有 <code>GUI</code> 版本的客户端，只需要下载安装即可。文章最下方提供下载链接。</p>
<p>以 <code>Mac</code> 客户端举例，安装完成之后，点击小飞机图标，选择添加服务器，然后将服务端配置中的 <code>端口号</code>，<code>加密方式</code>，<code>密码</code> 填写至对应的一栏中，其中服务器地址一栏要填写服务器的公网 <code>IP</code> 地址。之后就可以尽情的徜徉了。</p>
<p>下载链接:</p>
<ul>
<li>Windows 版: <a href="http://pan.baidu.com/s/1jGrmINW" target="_blank" rel="external">链接: http://pan.baidu.com/s/1jGrmINW</a> 密码: uti7</li>
<li>Mac 版: <a href="http://pan.baidu.com/s/1gdEt251" target="_blank" rel="external">链接: http://pan.baidu.com/s/1gdEt251</a> 密码: tpi6</li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>关于 <code>shadowsocks</code> 是什么就不多介绍了，这是<a href="http://shadowsocks.org/en/index.html">官网</a>，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。</p>
<h3 id="服务端配置:">服务端配置:</h3><p>首先请确保你的服务器中已经安装了 <code>Python 2.6 or 2.7</code>，然后执行以下命令进行安装:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get <span class="keyword">install</span> python-pip</span><br><span class="line">pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[1、SSH 登陆配置]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/</id>
    <published>2015-10-20T05:23:27.000Z</published>
    <updated>2015-10-20T05:23:27.000Z</updated>
    <content type="html"><![CDATA[<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。</p>
<p>我们在上一步创建好服务器之后，我们可以在 <a href="https://cloud.digitalocean.com/" target="_blank" rel="external">https://cloud.digitalocean.com/</a> 查看到服务器列表和 <code>ip</code> 地址。</p>
<p>因为我在初始化的过程中没有直接添加 <code>ssh</code> 认证登陆，所以我登陆到服务器之后要先自行添加和配置。</p>
<a id="more"></a>
<h3 id="配置公钥登录">配置公钥登录</h3><p>1、首先，在收到包含有服务器密码的邮件之后，打开终端(或是命令行)工具，输入 <code>ssh user@host</code> 命令进行登录，由于是第一次登陆，所以默认登陆为 <code>root</code>账户，例如:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@<span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>2、之后会提示让你输入密码，你需要将邮件中的初始密码输入，注意，输入密码的时候屏幕不会出现任何反馈，会可能会造成一种没有输入的错觉，你只需正常输入并敲击回车表示完成即可。</p>
<p>3、第一次登陆成功之后，会提示让你进行修改密码，修改完密码之后即以 <code>root</code> 身份登入服务器。</p>
<p>4、使用密码登录，每次都必须输入密码，非常麻烦。因此我们需要配置公钥登录。首先在本地生成对应的公钥。如果你之前已经生成过，则可以直接跳过这一步。SSH 公钥默认储存在账户的主目录下的 <code>~/.ssh</code> 目录。使用一下命令查看:</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.ssh</span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<p>关键是看有没有用 <code>something</code> 和 <code>something.pub</code> 来命名的一对文件，这个 <code>something</code> 通常就是 <code>id_dsa</code> 或 <code>id_rsa</code>。有 <code>.pub</code> 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建，生成的命令为:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p>它先要求你确认保存公钥的位置 <code>~.ssh/id_rsa</code>，然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。</p>
<p>5、拿到公钥之后，就要将公钥上传到服务器。谨记: 一定要在本地保管好你的私钥，而公钥可以发布到各服务器上。</p>
<p><code>Linux</code> 用户可以使用 <code>ssh-copy-id user@host</code>进行上传，<code>Mac</code> 用户则需要麻烦一点:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scp ~<span class="regexp">/.ssh/id</span>_rsa.pub user<span class="variable">@host</span><span class="symbol">:~/</span>.ssh/</span><br><span class="line">ssh user<span class="variable">@host</span></span><br><span class="line">cd ~<span class="regexp">/.ssh/</span></span><br><span class="line">cat id_rsa.pub <span class="prompt">&gt;&gt; </span>authorized_keys</span><br></pre></td></tr></table></figure>
<p>如果服务器 <code>.ssh</code> 目录下没有 <code>authorized_keys</code> 文件，则可以创建一个。</p>
<p>基本上到这里就算是配置完成了，你可以退出然后重新登录一下测试是否配置成功。</p>
<h3 id="SSH_配置">SSH 配置</h3><blockquote>
<p>SSH 的配置均通过修改 <code>/etc/ssh/sshd_config</code> 配置文件实现，例如: <code>vim /etc/ssh/sshd_config</code>。<strong>修改配置时最好进行备份操作</strong></p>
<p>修改完之后如果想要立即生效需要重启SSH服务: <code>sudo service ssh restart</code></p>
<p>更多的 SSH 服务命令可阅读文章下方的参考资料。</p>
</blockquote>
<p>1、建议修改ssh登录端口，修改端口可以防止被端口扫描。找到 <code>Port 22</code>，修改成一个五位的端口：<code>Port 22222</code> 之类的一个比较大的数字，减小被扫描到的可能性。<em>建议先添加一个端口，待确认能够通过新添加的端口连接成功，再将原端口注释掉。</em></p>
<p>2、为了安全设置，可以选择禁用 <code>root</code> 账户的密码登录，设置配置文件中的 <code>PermitRootLogin</code> 为 <code>without-password</code>。甚至可以直接禁用 <code>root</code> 账户登录，新建一个普通用户进行登录。</p>
<h3 id="新建普通用户登录">新建普通用户登录</h3><p>目前我们总是以 <code>root</code> 用户的身份进行登录，而 <code>root</code> 由于权限太高造成风险也随之升高，因此我们需要在服务器上创建一个普通用户身份以做平时登录使用。</p>
<p>创建普通用户的命令为:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">sudo</span> <span class="keyword">adduser </span>newUser</span><br></pre></td></tr></table></figure></p>
<p>这样系统就会自动创建用户主目录，创建用户同名的组，然后屏幕就会出现以下信息:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正在添加用户<span class="string">"newUser"</span>…</span><br><span class="line">正在添加新组<span class="string">"newUser"</span> (<span class="number">1006</span>)…</span><br><span class="line">正在添加新用户<span class="string">"newUser"</span> (<span class="number">1006</span>) 到组<span class="string">"newUser"</span>…</span><br><span class="line">创建主目录<span class="string">"/home/newUser"</span>…</span><br><span class="line">正在从<span class="string">"/etc/skel"</span>复制文件…</span><br><span class="line">输入新的 UNIX 口令： (作者注:这里是输入新账号的密码)</span><br><span class="line">重新输入新的 UNIX 口令：</span><br></pre></td></tr></table></figure>
<p>两次输入 <code>newUser</code> 的初始密码，出现的信息如下:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">passwd: password updated successfully</span><br><span class="line">Changing <span class="operator">the</span> user information <span class="keyword">for</span> db</span><br><span class="line">Enter <span class="operator">the</span> <span class="built_in">new</span> <span class="built_in">value</span>, <span class="operator">or</span> press ENTER <span class="keyword">for</span> <span class="operator">the</span> default</span><br><span class="line">Full Name []:</span><br><span class="line">Room Number []:</span><br><span class="line">Work Phone []:</span><br><span class="line">Home Phone []:</span><br><span class="line">Other []:</span><br><span class="line">Full Name []:</span><br></pre></td></tr></table></figure>
<p>等信息一路回车</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个信息是否正确？ <span class="string">[Y/n]</span></span><br></pre></td></tr></table></figure>
<p>致此，新用户就创建好了。</p>
<p>当然了，还有一些事情需要处理。</p>
<h5 id="1、让该用户具有使用_sudo_命令的权限">1、让该用户具有使用 <code>sudo</code> 命令的权限</h5><p>通过编辑配置文件 <code>/etc/sudoers</code> 来实现:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后添加如下内容:</span></span><br><span class="line"></span><br><span class="line">%newUser <span class="literal">ALL</span>=(<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br><span class="line">newUser <span class="literal">ALL</span>=(<span class="literal">ALL</span>) <span class="literal">ALL</span></span><br></pre></td></tr></table></figure>
<p>保存，退出。深藏功与名。</p>
<h5 id="2、使用普通用户身份进行登录">2、使用普通用户身份进行登录</h5><p>当然了，你如果想要以此用户的身份进行 <code>ssh</code> 登录，还需要将之前的公钥上传至该用户目录下。</p>
<h3 id="本地_SSH_配置">本地 SSH 配置</h3><blockquote>
<p>每次登录都需要输入用户名和 Host，麻烦不？当然麻烦了。</p>
</blockquote>
<p>上面讲了辣么多的服务器端配置，这里就来讲一下本地配置。本地的配置文件默认为 <code>~/.ssh/config</code>，如果不存在则新创建一个，其配置写法如下:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host    别名</span><br><span class="line">    HostName        主机名</span><br><span class="line">    Port            端口</span><br><span class="line">    <span class="built_in">User</span>            用户名</span><br><span class="line">    IdentityFile    密钥文件的路径</span><br></pre></td></tr></table></figure>
<p>上面的配置可以缺省，不需要每一个都填写。有了这些配置，就可以这样用 <code>ssh</code> 登陆服务器了:</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ssh</span> 别名</span><br></pre></td></tr></table></figure>
<p>怎么样？是不是方便了很多呢。 O(∩_∩)O哈哈~</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="external">SSH原理与运用（一）：远程登录</a></li>
<li><a href="http://segmentfault.com/a/1190000002492828#articleHeader4" target="_blank" rel="external">SSH的配置和命令介绍</a></li>
<li><a href="http://www.kafan.cn/edu/584682.html" target="_blank" rel="external">Ubuntu中useradd和adduser的区别</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。</p>
<p>我们在上一步创建好服务器之后，我们可以在 <a href="https://cloud.digitalocean.com/">https://cloud.digitalocean.com/</a> 查看到服务器列表和 <code>ip</code> 地址。</p>
<p>因为我在初始化的过程中没有直接添加 <code>ssh</code> 认证登陆，所以我登陆到服务器之后要先自行添加和配置。</p>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[0、服务器主机选择和购买]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/"/>
    <id>http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/</id>
    <published>2015-10-19T05:28:41.000Z</published>
    <updated>2015-10-19T05:28:41.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 <a href="https://gist.github.com/" target="_blank" rel="external">https://gist.github.com/</a> 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 <code>shadowsocks</code> 技术勉强可以维持，但该项目已经不再更新 <em>(:з」∠)</em>。</p>
<p>有些网站也会提供一些免费的 <code>shadowsocks</code> 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。</p>
</blockquote>
<p>因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 <code>&quot;服务器部署从入门不一定到精通&quot;</code> 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。</p>
<a id="more"></a>
<h2 id="服务器商选择">服务器商选择</h2><p>最初的目的是为了搭建一些服务以达到代理访问外网的目的，因此毋庸置疑的就要选择那些海外服务器。目前口碑最高的是 <a href="https://www.linode.com/" target="_blank" rel="external">Linode</a> 和 <a href="https://www.digitalocean.com/?refcode=d2b2550b5631" target="_blank" rel="external">digitalocean</a>, 至于两者的区别可以参考<a href="http://www.zhihu.com/question/21454090" target="_blank" rel="external">http://www.zhihu.com/question/21454090</a> 或者其他资料。总之，我选择了 <a href="https://www.digitalocean.com/?refcode=d2b2550b5631" target="_blank" rel="external">digitalocean</a>，如果你也选择这个服务商，点击前面的链接注册后可以获得 <strong>10美金</strong> 的奖励，自己搜索注册可没有哟~</p>
<h2 id="购买服务器">购买服务器</h2><p>注册完账号之后，访问 <a href="https://cloud.digitalocean.com/droplets/new" target="_blank" rel="external">https://cloud.digitalocean.com/droplets/new</a> 即可选购一个新服务器。</p>
<p>0、绑定支付方式</p>
<p>选购之前需要绑定支付方式才能进行购买，方式有两种，一种是绑定信用卡，一种是通过 <code>paypal</code> 支付 5 美元。</p>
<p>1、填写 Droplet Hostname</p>
<p>给你的服务器起一个名字。</p>
<p>2、Select Size</p>
<p><code>digitalocean</code> 最低提供 <code>5美金/月</code> 的套餐，并且是按小时扣费。如果你只是为了搭建一个代理服务， 这个套餐足够使用了。</p>
<p>3、Select Region</p>
<p><code>digitalocean</code> 目前提供7个城市的机房可选，其中 <code>New York</code> 和 <code>Amsterdam</code> 各有三个机房，其他地区各一个机房可选。大陆用户建议选择美国西海岸机房，因为优化做的很棒，访问速度还可以。新推出的新加坡机房虽然在亚洲，但是好像从评价来看速度和优化并不理想。我选择了 <code>San Francisco</code> 机房。</p>
<p>4、Select Image</p>
<p>小白用户和开发者建议选择 <code>Ubuntu</code>，运维和高级人员可以使用 <code>CentOS</code>系统。</p>
<p>5、Available Settings</p>
<p>其中 <code>Backups</code> 自动备份选项是附加收费业务，每月20%的收费标准。</p>
<p>6、Add SSH Keys</p>
<p>添加 <code>ssh</code> 公钥，建议在这里直接添加 <code>ssh</code> 公钥，会方便很多。如果你没有选择添加 <code>ssh keys</code>，那么在服务器创建好之后会给你发一封包含服务器密码的邮件，你使用该密码第一次登陆服务器时，会要求更改密码。</p>
<p>7、Create Droplet</p>
<p>然后点击 <code>Create Droplet</code> 按钮，稍等一分钟你就拥有了一台海外服务器咯。</p>
<p>之后你在 <a href="https://cloud.digitalocean.com/" target="_blank" rel="external">https://cloud.digitalocean.com/</a> 就可以查看到你的服务器了。</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 <a href="https://gist.github.com/">https://gist.github.com/</a> 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 <code>shadowsocks</code> 技术勉强可以维持，但该项目已经不再更新 <em>(:з」∠)</em>。</p>
<p>有些网站也会提供一些免费的 <code>shadowsocks</code> 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。</p>
</blockquote>
<p>因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 <code>&quot;服务器部署从入门不一定到精通&quot;</code> 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。</p>]]>
    
    </summary>
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[聊聊 JS 中的严格模式]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/09/strict-mode/"/>
    <id>http://blog.sqrtthree.com/2015/10/09/strict-mode/</id>
    <published>2015-10-09T04:05:12.000Z</published>
    <updated>2015-10-09T04:05:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是严格模式？">什么是严格模式？</h2><blockquote>
<p><code>严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.</p>
</blockquote>
<a id="more"></a>
<p>因此, 在严格模式下, 我们的一些不严谨的写法将会导致程序抛出错误. 例如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = []; <span class="comment">// 在严格模式下该行将会抛出错误: error: redefinition of arguments</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中, 由于 <code>arguments</code> 在 js 中是一个特殊对象, 在严格模式下是不允许被重新定义的. 但是没有实现严格模式检查的环境中会接受这段代码. </p>
<h2 id="为什么会出现严格模式？">为什么会出现严格模式？</h2><p>总所周知, 从 ECMAscript 从1997年正式成为国际标准以来, 已经发布了6个版本. 除此之外, 还存在一些 Javascript 实现支持非标准特性, 而其他的 Javascript 实现却并不支持这些特性的情况. 由于 Javascript 的实现多样化, 我们很难确定哪些特性在哪些平台上是支持的, 再加上 Web 浏览器的复杂性, 并且它并不能让开发者指定某一个特定的 Javascript 版本来执行我们的程序. 因此我们需要精心的编写程序, 以确保在所有的平台上都能够正常运行.</p>
<p>因此在 ES5 中引入了一种版本控制的考量: <code>严格模式</code>. 此特性允许开发者选择在受限制的 Javascript 版本中禁止使用一些 Javascript 语言中问题较多或是易于出错的特性.</p>
<p>由于其语法强大的向后兼容特性, 所以即使在没有实现严格模式检查的环境中, 你的严格代码仍然可以正常执行.</p>
<h2 id="如何使用严格模式?">如何使用严格模式?</h2><p>在程序中使用严格模式的方式是在程序中的最开始增加一个特定的字符串字面量.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">"use strict"</span></span><br></pre></td></tr></table></figure>
<p>如果你在一个文件的顶部加入这个特定的字符串, 则表示该文件的所有内容将始终使用严格模式执行.</p>
<p>如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令.</p>
<h2 id="为什么要使用字符串字面量来实现严格模式?">为什么要使用字符串字面量来实现严格模式?</h2><p>单独使用一个特定的字符串字面量来作为指令语法在语言里看起来确实相当怪异, 但是他有一个最大的好处是向后兼容. 我们来看一下它为什么能够向后兼容. 我们都知道在js 中解释执行一个字符串字面量是没有任何副作用的, 这句话什么意思呢？ 比如说你在 chrome 浏览器控制台里面输入一个字符串字面量, 解释器只会返回一个同样的字符串, 除此之外不会发生任何事情, 这就使得即使ES3引擎不支持<code>严格模式</code>, 但依然能够无伤大雅的解释和执行这条指令. ES3 引擎在解析完改字符串之后, 会立即将该值丢弃. 因此, 尽管旧的引擎不支持严格模式, 但依然能够正常运行.</p>
<p>但需要注意的是: 尽管不会抛出错误, 但是旧的引擎不会进行任何的严格检查模式, 因此如果要使用严格模式, 你应该总是在完全兼容ES5的环境中测试严格代码.</p>
<h2 id="使用严格模式需要注意哪些问题?">使用严格模式需要注意哪些问题?</h2><p>我们在上面已经说过, <code>use strict</code> 指令需要写在脚本或者函数的顶部, 因为该指令只有在写在顶部才能生效. 这就使得我们在使用的时候需要注意一下这里有个小坑. 这个坑是什么呢？ </p>
<p>举个例子, 我们在开发大型功能的时候, 开发过程中会使用多个独立的脚本文件, 但是在部署到生产环境的时候出于性能优化的目的, 需要将多个脚本连接成一个单一的文件. 比如说, 脚本1 运行于严格模式下,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.js </span></span><br><span class="line"><span class="pi">"use strict"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是有另外一个同事写了一个脚本2运行于非严格模式下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file2.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">arguments</span> = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么, 我们该怎么连接这两个文件呢？ 如果我们以 file1.js 开始, 那么连接后的代码将运行于严格模式下, 但是由于 file2 中的一些操作会在严格模式下抛出错误, 导致我们的程序无法正常运行.如果我们以 file2.js 开始, 那么连接后的代码将运行于非严格模式下, 因为我们前面已经讲过该指令只有在写在顶部才能生效. 似乎怎样都不太合适.</p>
<p>那么如何解决这个问题呢？</p>
<ol>
<li>在项目中坚持只使用<code>严格模式</code>或者只使用<code>非严格模式</code>, 并且不要将使用<code>严格模式</code>和不使用<code>严格模式</code>的文件进行打包构建. O(∩_∩)O哈哈~这样就不会有问题了嘛.</li>
<li>我们上面说过, 如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令. 我们可以利用这个特性, 将每一个脚本文件里面的代码包裹在一个立即执行的函数表达式内, 这样即使两种模式的文件打包在一起, 依然能够按照我们的期望进行工作. 例如:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file1.js </span></span><br><span class="line"><span class="pi">    "use strict"</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// file2.js </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doOtherSth</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>当然了, 上面这样的做法会导致这些文件的内容不会在全局作用域内解释, 这就导致我们通过 <code>var</code> 和 <code>function</code> 声明的变量不会视为全局变量. 不过这刚好对我们来说也是一个很好的特性. 因此就放心大胆的使用吧, 去吧, 皮卡丘.</p>
<h2 id="最佳实践">最佳实践</h2><p>上面的方法2看起来是极好的, 并且我们可以通过<code>自动化构建工具</code>为我们的脚本文件上添加如上代码. 但是如果我们想要编写一个通用的库, 使其可以在尽可能多的环境中正常工作, 我们不能假设脚本文件一定会被构建工具置于一个立即执行的函数中, 也不能假设客户端代码一定处于严格模式或是非严格模式中. 所以为了获得最佳效果, 我们应该总是在严格模式下编写代码, 并显式的将其包裹在启用了严格模式的立即执行函数中, 而不是依靠构建工具来实现.</p>
<h2 id="结语">结语</h2><p>“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向. 为了达到更为普遍的兼容性, 我们应该总是在严格模式下编写代码.</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="什么是严格模式？">什么是严格模式？</h2><blockquote>
<p><code>严格模式</code> 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[春风十里 不如你]]></title>
    <link href="http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/"/>
    <id>http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/</id>
    <published>2015-10-04T16:21:41.000Z</published>
    <updated>2015-10-04T16:21:41.000Z</updated>
    <content type="html"><![CDATA[<p>每一个失恋了的人, 都是中了一记玄冥神掌.</p>
<p>这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.</p>
<a id="more"></a>
<p>是的, 你不得不承认, 兜兜转转, 到最后, 你终于还是把她弄丢了.</p>
<p>这些日子, 你天天梦到她, 常常半夜醒来不知道自己身在何处, 常常早上望着空荡荡的枕边失落. </p>
<p>现在, 你都害怕再梦到她了吧.</p>
<p>夜深的时候, 你总是望着窗外发呆, 你幻想联系她后的复合, 你幻想联系她后的决裂, 你幻想如果当初没有分开现在会如何, 你幻想此时此刻她正在干嘛.</p>
<p>可是, 你也只能够是想想.</p>
<p>因为我知道, 你不敢, 也不能联系她.</p>
<p>说来可笑, 你会把联系她视为一次定输赢的赌博. 你想赌, 但你不敢赌, 因为你知道自己会输. </p>
<p>输了, 以后连想她的权利都没有了.</p>
<p>你不是没有想过放弃. 你今天决定放弃她了, 可是坚持不了几天, 又不甘心放弃想把她追回来.</p>
<p>周而复始, 永远下不了决心到底是放弃还是坚持.</p>
<p>熬过了无数个痛苦的黑夜, 你不再嘴上逞强, 你终于承认了你爱她, 即使分开了, 你对她的爱却有增无减.</p>
<p>你相信了念念不忘必有回响这样的段子.</p>
<p>你相信梦见她证明你俩缘分未尽这样的迷信.</p>
<p>你相信打喷嚏突然恍惚是因为她正在想你这样的习惯.</p>
<p>是的, 即便你之前觉得这样多可笑, 这一刻, 你都会强行认为是跟你有关.</p>
<p>可惜的是,</p>
<p>你的想念没有声音, 恐怕她是听不到了.</p>
<p>你的想念没有频率, 也许她也收不到了.</p>
<p>你的想念没有路径, 所以只能你自己知道了.</p>
<p>我知道你好想做一万件事来证明你很想她.</p>
<p>但是很可惜你一件也为她做不了.</p>
<p>最遗憾的事大概就是,</p>
<p>你有为她做一万件事的决心, 却没有能为她做一件事的机会了.</p>
<p>而你唯一能做的也只能是在这平淡无味的生活间隙里，</p>
<p>想一想此时此刻的她正在做什么了.</p>
<p>失去了她, 你觉得, 整个世界都空旷旷的. 你觉得, 整个世界都变成了黑白的, 再也没有了色彩.</p>
<p>孤独, 就像是那暴风雨一样骤然而来, 让你触不及防, 狼狈不堪.</p>
<p>可是, 最可怕的不是孤独本身, 而是没有人知道你孤独.</p>
<p>你喝的烂醉, 最后还是得一个人爬回床上, 她不会知道了.</p>
<p>你生病了, 最后还是得一个人滚去医院, 她不会陪你了.</p>
<p>你萎靡不振, 最后在荒度的日子里把自己淬炼成了一个傻逼, 她不会出现了.</p>
<p>是啊, 以后的路上, 就只有你自己了. 她, 永远都不会出现了.</p>
<p>我知道你放不下, 我知道你不甘心,</p>
<p>可是, 又能怎么办呢？</p>
<p>只希望你能在未来的日子里沉迷于学习无法自拔, 习得九阳神功, 破了这寒毒.</p>
<p>终有一天, </p>
<p>你会明白, 有些事情, 只适合珍藏.</p>
<p>终有一天,</p>
<p>你回过头, 再看到这篇文章的时候,</p>
<p>你会对我说:</p>
<p>你看这个人, 真的好像一条狗耶.</p>
<hr>
<embed src="http://music.163.com/style/swf/widget.swf?sid=26508242&type=2&auto=1&width=320&height=66" width="340" height="86" allownetworking="all">
]]></content>
    <summary type="html">
    <![CDATA[<p>每一个失恋了的人, 都是中了一记玄冥神掌.</p>
<p>这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://blog.sqrtthree.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈我理解的API接口设计]]></title>
    <link href="http://blog.sqrtthree.com/2015/09/08/api/"/>
    <id>http://blog.sqrtthree.com/2015/09/08/api/</id>
    <published>2015-09-08T05:03:43.000Z</published>
    <updated>2015-09-08T05:03:43.000Z</updated>
    <content type="html"><![CDATA[<p>随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.</p>
<a id="more"></a>
<h2 id="关于协议">关于协议</h2><p>为了确保通信安全, 建议API与用户的通信协议，总是使用HTTPS协议.</p>
<h2 id="关于域名">关于域名</h2><p>为了提高可维护性, 建议尽量将API部署在专用域名之下. 如 <code>https://api.github.com</code></p>
<h2 id="关于版本号">关于版本号</h2><p>建议将 API 的版本号放入 URL 中, 如<code>https://api.github.com/v1/</code>. 但是 Github 似乎采用了另外一种方案, 就是将版本号放在了HTTP头信息中, <a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="external">看这里看这里</a>. 但个人感觉不是太直观. 但前端在请求中可以省略3个字符. <em>(:з」∠)</em></p>
<h2 id="关于请求路径">关于请求路径</h2><p>RESTful API是目前比较成熟的一套互联网应用程序的API设计理论. 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词. 并且建议所用的名词和数据库中的集合名相对应. 并且在获取一组数据/集合的时候, 应统一使用复数形式.</p>
<p>比如, 需要请求所有的用户信息. 可以设计为这样: <code>https://api.example.com/v1/users</code>.</p>
<h2 id="关于请求方法">关于请求方法</h2><p>常用的 HTTP请求方法有5个. 分别如下:</p>
<table>
<thead>
<tr>
<th>Method</th>
<th style="text-align:center">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td style="text-align:center">从服务器取出资源</td>
</tr>
<tr>
<td>POST</td>
<td style="text-align:center">在服务器新建一个资源</td>
</tr>
<tr>
<td>PUT</td>
<td style="text-align:center">用于完整的替换资源或者创建指定身份的资源(更新资源)</td>
</tr>
<tr>
<td>PATCH</td>
<td style="text-align:center">用于局部更新资源</td>
</tr>
<tr>
<td>DELETE</td>
<td style="text-align:center">用于删除某个资源</td>
</tr>
</tbody>
</table>
<p>比如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>GET <code>/users/:ID</code> 列出指定用户的信息</li>
<li>POST <code>/users</code> 新建一个用户</li>
<li>DELETE <code>/users/:ID</code> 删除指定的用户</li>
</ul>
<p>也可以使用语义化的路径方式进行分类, 如:</p>
<ul>
<li>GET <code>/users</code> 列出所有的用户</li>
<li>POST <code>/users/create</code> 创建一个新用户</li>
<li>POST <code>/users/update</code> 更新信息</li>
</ul>
<h2 id="关于常见的请求参数">关于常见的请求参数</h2><p>比如在数据过多, 需要对数据进行分页请求的时候, 我们应该统一 API 请求参数. 常见的有这些.</p>
<ul>
<li><code>limit=10</code> 指定返回记录的数量</li>
<li><code>offset=10</code> 指定返回记录的开始位置。</li>
<li><code>page=2&amp;per_page=100</code> 指定第几页，以及每页的记录数。</li>
<li><code>sortby=name&amp;order=asc</code> 指定返回结果按照哪个属性排序，以及排序顺序。</li>
<li><code>animal_type_id=1</code> 指定筛选条件</li>
</ul>
<h2 id="关于返回值">关于返回值</h2><p>返回值的数据格式应严格按照 JSON 规范.JSON（JavaScript Object Notation）是一种轻量级，基于文本，语言无关的数据交换格式。其包括了基本数据类型4种和复合数据类型2种，共6种数据类型.</p>
<p>首先. 基本数据类型有:</p>
<ul>
<li>Number可以表示整数和浮点数。</li>
<li>Boolean可以表示真假，值为true或false。</li>
<li>String表示一个字符串。</li>
<li>Null通常用于表示空对象. 输出的数据结构中空字段的值一律为 null.</li>
</ul>
<p>复合数据类型Object是无序的集合，以键值对的方式保持数据。</p>
<ol>
<li><p>必须根据操作和状态设置相应的 HTTP 响应状态码. 具体可参考<a href="http://tools.ietf.org/html/rfc7231#page-49" target="_blank" rel="external">http://tools.ietf.org/html/rfc7231#page-49</a>、<a href="http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81" target="_blank" rel="external">http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81</a></p>
</li>
<li><p>Content-Type字段定义了响应体的类型. 一般情况下，浏览器会根据该类型对内容进行正确的处理。推荐设置为”text/javascript”或”text/plain”. 并且通常需要指定一个字符集, 如果字符编码为UTF-8时，可以不指定字符集</p>
</li>
<li><p>返回的数据包含在http响应体中。数据 必须(MUST) 是一个JSON Object。该Object可能包含3个字段：status，statusInfo，data。</p>
</li>
<li><p>status字段必须是一个不小于0的JSON Number整数，表示请求的状态. 0：表示server端理解了请求，成功处理并返回. 非0：表示发生错误, 可以根据错误类型扩展错误码.</p>
</li>
<li><p>statusInfo字段通常是一个JSON String或JSON Object，表示除了请求状态外server端想要对status做出的说明，使client端能够获取更多信息进行后续处理. 这个字段属于可选字段.</p>
</li>
<li><p>data 字段可以是任意 JSON 类型, 表示请求返回的数据主体. 数据主体data包含了在请求成功时有意义的数据.</p>
</li>
</ol>
<p>例如: </p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 请求成功</span><br><span class="line">&#123;</span><br><span class="line">    status: <span class="number">0</span>,</span><br><span class="line">    statusInfo: <span class="string">'请求成功'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Tom'</span>,</span><br><span class="line">        ag: <span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 请求失败</span><br><span class="line">&#123;</span><br><span class="line">    status: <span class="number">1</span>,</span><br><span class="line">    statusInfo: <span class="string">'权限不足'</span></span><br><span class="line">    // 或者是复杂类型</span><br><span class="line">    statusInfo: &#123;</span><br><span class="line">        <span class="string">'text'</span>: <span class="string">'参数错误'</span>,</span><br><span class="line">        <span class="string">'parameters'</span>: &#123;</span><br><span class="line">            <span class="string">"email"</span>: <span class="string">"电子邮件格式不正确"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于文档规范">关于文档规范</h2><p>可参考 github 的文档写作形式.</p>
<p>1、 请求信息<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET <span class="string">'/users'</span> 获取用户列表 <span class="comment">// 请求方式, 请求路径, 方法描述</span></span><br></pre></td></tr></table></figure></p>
<p>2、 请求参数</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数一</td>
<td>参数类型</td>
<td>参数描述</td>
</tr>
</tbody>
</table>
<p>3、 Response 响应结果示例<br>给出不同状态的响应结果示例, 便于接口对接和调试.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    status: <span class="number">0</span>,</span><br><span class="line">    statusInfo: '请求成功',</span><br><span class="line">    <span class="typedef"><span class="keyword">data</span>: [<span class="container">&#123;</span><br><span class="line">        <span class="title">id</span>: 1,</span><br><span class="line">        <span class="title">name</span>: '<span class="type">Tom</span>'</span><br><span class="line">    &#125;</span>]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.</p>]]>
    
    </summary>
    
      <category term="api" scheme="http://blog.sqrtthree.com/tags/api/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[解决 Javascript 中 atob 方法解码中文字符乱码问题]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/"/>
    <id>http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/</id>
    <published>2015-08-29T11:46:53.000Z</published>
    <updated>2015-08-29T11:46:53.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.</p>
</blockquote>
<h2 id="首先,_为什么要编码？">首先, 为什么要编码？</h2><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。</p>
<p>通常的方法是通过 <code>window.btoa()</code> 方法对源数据进行编码, 然后接收方使用 <code>window.atob()</code> 方法对其进行解码, 从而得到原数据.</p>
<a id="more"></a>
<h2 id="window-btoa_与_window-atob_不支持中文">window.btoa 与 window.atob 不支持中文</h2><p>但是这种方法存在的问题是:<code>window.btoa()</code> 不支持中文, <code>window.atob()</code>转换含有中文的 base64编码的时候中文部分会变为乱码.详情如下:</p>
<p>我们在 bash 终端下先得到『中文』这两个字的 base64 编码</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo 中文 <span class="string">| base64</span></span><br><span class="line"><span class="number">5</span>Lit5paHCg==</span><br></pre></td></tr></table></figure>
<p>然后我们在 Chrome console 里面通过 <code>window.atob</code> 进行解码, 结果如下</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="built_in">window</span>.atob(<span class="string">'5Lit5paHCg=='</span>)</span><br><span class="line">&lt; <span class="string">"ä¸­æ</span><br><span class="line">"</span></span><br></pre></td></tr></table></figure>
<p>继续在 Chrome console 里面执行 <code>window.btoa</code> 编码, 结果报错.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="function"> window.btoa(</span>'中文'<span class="function">)</span>;</span><br><span class="line">&lt; Uncaught DOMException: Failed to<span class="instruction"> execute </span>'btoa' on 'Window': The string to be encoded contains characters outside of the Latin1 range.</span><br></pre></td></tr></table></figure>
<p>经查资料发现, <code>btoa</code> 方法仅支持 ASCII 编码.</p>
<h2 id="借助_encodeURIComponent_和_decodeURIComponent_转义中文字符">借助 encodeURIComponent 和 decodeURIComponent 转义中文字符</h2><p>由于<code>btoa</code> 方法仅支持 ASCII 编码, 我们在转换中文的时候就需要先将中文转换为ASCII字符序列，再通过 btoa 进行 base64 编码, 从而实现『曲线救国』。</p>
<p>转换ASCII字符序列的方法我们可以借助于 <code>encodeURIComponent</code> 和 <code>decodeURIComponent</code> 这两个方法完成. </p>
<p>编码:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; window.<span class="function"><span class="title">btoa</span><span class="params">(encodeURIComponent(<span class="string">'中文'</span>)</span></span>)</span><br><span class="line">&lt; <span class="string">"JUU0JUI4JUFEJUU2JTk2JTg3"</span></span><br></pre></td></tr></table></figure></p>
<p>解码:<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; decodeURIComponent<span class="list">(<span class="keyword">window</span>.atob<span class="list">(<span class="quoted">'JUU0JUI4JUFEJUU2JTk2JTg3</span>')</span>)</span></span><br><span class="line">&lt; <span class="string">"中文"</span></span><br></pre></td></tr></table></figure></p>
<h2 id="GitHub_API_获取_README_的中文乱码问题">GitHub API 获取 README 的中文乱码问题</h2><p>但是通过上面的解码方式解码 github 的 readme 数据的时候仍旧是乱码, 经过查找相关资料发现了Base64的编码与解码转的最优方案是下面这种:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_to_b64</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.btoa(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_to_utf8</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(<span class="built_in">window</span>.atob(str)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">utf8_to_b64(<span class="string">'✓ à la mode'</span>); <span class="comment">// JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==</span></span><br><span class="line">b64_to_utf8(<span class="string">'JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ=='</span>); <span class="comment">// "✓ à la mode"</span></span><br><span class="line"></span><br><span class="line">utf8_to_b64(<span class="string">'I \u2661 Unicode!'</span>); <span class="comment">// SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==</span></span><br><span class="line">b64_to_utf8(<span class="string">'SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ=='</span>); <span class="comment">// "I ♡ Unicode!"</span></span><br></pre></td></tr></table></figure>
<p>通过上面的这种方法去解析 github 的数据的时候, 发现中文能够正常显示了. 显然 github 也是采用了这种方案.</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding" target="_blank" rel="external">https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa</a></li>
</ul>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.</p>
</blockquote>
<h2 id="首先,_为什么要编码？">首先, 为什么要编码？</h2><p>由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。</p>
<p>通常的方法是通过 <code>window.btoa()</code> 方法对源数据进行编码, 然后接收方使用 <code>window.atob()</code> 方法对其进行解码, 从而得到原数据.</p>]]>
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-04/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-04/</id>
    <published>2015-08-20T08:04:18.000Z</published>
    <updated>2015-08-20T08:04:18.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2596" target="_blank" rel="external">http://www.html-js.com/article/2596</a></p>
</blockquote>
<h2 id="1、神奇的_mixins">1、神奇的 <code>mixins</code></h2><p>想必有 <code>less</code> &amp; <code>sass</code> 经验的同学对 <code>mixins</code> 一定都不陌生了，<code>mixins</code> 呢，其实就是方便对一堆代码块的重复利用。在 <code>Jade</code> 里面当然也少不了代码块的复用咯~~</p>
<a id="more"></a>
<p><code>mixins</code> 的定义很简单，就只需要 <code>mixin 代码块名字</code> 即可<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mixin demo</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> demo</span><br></pre></td></tr></table></figure><br>调用方式就更简单了，我们需要这样 <code>+代码块名字</code><br><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+demo</span></span><br></pre></td></tr></table></figure><br>输出结果非常理想<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>什么？你说这都是只能用于内容固定的代码块？没关系，我们来看看内容不固定的时候应该怎么办<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mixin</span> <span class="built_in">info</span>(name, skills)</span><br><span class="line">  p my name is <span class="comment">#&#123;name&#125;</span></span><br><span class="line">  ul.skills-box</span><br><span class="line">    each skill in skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">+<span class="built_in">info</span>(<span class="string">'sqrtthree'</span>,[<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>])</span><br></pre></td></tr></table></figure><br>编译结果如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"skills-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>什么？你还想要嵌套的 <code>mixins</code>，╮(╯▽╰)╭  怎么这么多事。。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mixin info(<span class="property">name</span>, skills)</span><br><span class="line">  p <span class="keyword">my</span> <span class="property">name</span> <span class="keyword">is</span> <span class="comment">#&#123;name&#125;</span></span><br><span class="line">  ul.skills-box</span><br><span class="line">    each skill <span class="keyword">in</span> skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">mixin developersInfo(developer)</span><br><span class="line">  h2 <span class="comment">#&#123;developer.name&#125;</span></span><br><span class="line">  +info(developer.<span class="property">name</span>, developer.skills)</span><br><span class="line"></span><br><span class="line">+developersInfo(&#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>, <span class="string">"skills"</span>: ['html','css','javascript','nodejs']&#125;)</span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h2</span>&gt;</span>sqrtthree<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>my name is sqrtthree<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"skills-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那如果我们遇到不定参的问题呢<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mixin</span> <span class="built_in">info</span>(className, ...skills)</span><br><span class="line">  ul(class=<span class="string">'#&#123;className&#125;'</span>)</span><br><span class="line">    each skill in skills</span><br><span class="line">      li <span class="comment">#&#123;skill&#125;</span></span><br><span class="line"></span><br><span class="line">+<span class="built_in">info</span>(<span class="string">'list'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>)</span><br></pre></td></tr></table></figure><br>我们来看编译结果<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>变量都能传递了，那属性能传递么？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin attr(<span class="type">text</span>)</span><br><span class="line">  p(<span class="type">class</span>=attributes.<span class="type">class</span>) <span class="comment">#&#123;text&#125;</span></span><br><span class="line"></span><br><span class="line">+attr('<span class="type">text</span>')(<span class="type">class</span>=<span class="string">"tips"</span>)</span><br></pre></td></tr></table></figure><br>结果如下：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="type">class</span>=<span class="string">"tips"</span>&gt;<span class="type">text</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>属性传递的时候还有一个语法糖呢。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mixin attr(<span class="type">text</span>)</span><br><span class="line">  p&amp;attributes(attributes) <span class="comment">#&#123;text&#125;</span></span><br><span class="line"></span><br><span class="line">+attr('demo')(<span class="type">class</span>=<span class="string">"tips"</span>, <span class="property">id</span>=<span class="string">"j-tips"</span>, data-<span class="property">id</span>=<span class="string">"18"</span>)</span><br></pre></td></tr></table></figure><br>我们来看编译结果是什么样的<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p <span class="property">id</span>=<span class="string">"j-tips"</span> data-<span class="property">id</span>=<span class="string">"18"</span> <span class="type">class</span>=<span class="string">"tips"</span>&gt;<span class="type">text</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p><code>mixins</code> 还有一个高级用法，那就是内联代码块。先上例子<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixin</span> code(text)</span><br><span class="line"> p <span class="comment">#&#123;text&#125;</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">block</span></span><br><span class="line">  <span class="keyword">block</span></span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  p no <span class="keyword">block</span>.</span><br><span class="line"></span><br><span class="line">+code('this <span class="keyword">is</span> a demo')</span><br><span class="line">  p this <span class="keyword">is</span> a <span class="keyword">block</span>.</span><br></pre></td></tr></table></figure><br>编译结果如下：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;p&gt;</span>this is a demo<span class="variable">&lt;/p&gt;</span></span><br><span class="line"><span class="variable">&lt;p&gt;</span>this is a <span class="built_in">block</span>.<span class="variable">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>从上面的代码中，我们可以看出，我们在调用<code>+code</code>的时候给他设置一个代码块 <code>p this is a block</code>，那么在 <code>mixins</code> 里面，程序会自动把这个代码块的内容传递给 <code>block</code> 变量。然后我们可以通过判断进行相应的操作。</p>
<h2 id="2、模板的继承">2、模板的继承</h2><p>我们在做整站开发时，通常每一个页面的头部和底部都是一样的，之前我们的做法可能是写完一个之后然后不断的复制粘贴，但是现在我们有了 <code>Jade</code>之后，来看看我们可以怎么做？<br>在 <code>Jade</code> 里面，我们通过 <code>block</code> 和 <code>extends</code> 这两个关键字实现模板之间的继承，一个代码块可以看成是 <code>Jade</code> 中的一个 <code>block</code>，我们将在子模板中实现<br>我们先看一个小例子，定义一个简单的代码块<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">block demo</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> demo.</span><br></pre></td></tr></table></figure><br>默认情况下，代码块的内容是会被输出的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>在同一个文件中，我们可以直接通过这种方式进行调用<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">block</span> demo</span><br><span class="line">  p this <span class="keyword">is</span> a demo.</span><br><span class="line"><span class="keyword">block</span> demo</span><br><span class="line"><span class="keyword">block</span> demo</span><br><span class="line"><span class="keyword">block</span> demo</span><br></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a demo.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>那么如果是不同文件之间，如何进行调用呢？<br>比如我们有一个 <code>layout.jade</code> 文件，内容是这样的。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">body</span></span><br><span class="line">    <span class="tag">h1</span> demo.</span><br><span class="line"></span><br><span class="line">    block cont</span><br></pre></td></tr></table></figure><br>然后呢，我们有一个 <code>demo.jade</code>文件是这样的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout	<span class="comment">// 这里的 layout 指的是需要继承的模板文件</span></span><br><span class="line"></span><br><span class="line">block cont</span><br><span class="line">  <span class="tag">h2</span> Look, this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>然后我们通过命令行工具编译 <code>demo.jade</code> 文件，结果是神奇的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>demo.<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>Look, this is a demo.<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>this is a paragraph.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>怎么样？是不是觉得很方便呢？</p>
<p>模板的继承解决了多个文件之间代码复用的问题，其实上面我们提到的页头和页脚我们用模板包含的方式可能更合适一些，下面我们来看一看模板的包含.</p>
<p><code>includes</code> 允许你静态包含一段 <code>Jade</code>, 或者别的存放在单个文件中的东西比如 <code>css</code> <code>html</code>。<br>比如我们有一个 <code>footer.jade</code> 文件，他里面有着这样的内容<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div<span class="id">#footer</span></span><br><span class="line">  <span class="tag">p</span> copyright.</span><br></pre></td></tr></table></figure><br>然后我们在我们的 <code>demo.jade</code> 文件中这样使用<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title this is <span class="tag">a</span> demo.</span><br><span class="line">  <span class="tag">body</span></span><br><span class="line">    <span class="tag">h1</span> Hello, World.</span><br><span class="line"></span><br><span class="line">    include footer</span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">DOCTYPE</span> <span class="attribute">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>this is a demo.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Hello, World.<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">p</span>&gt;</span>copyright.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当然，通过 <code>includes</code> 引入 <code>css</code> 代码也是一样的。大家可以尝试一下，我这里就不举例子了。</p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之数据的动态传递和流程控制]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-03/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-03/</id>
    <published>2015-08-20T07:58:08.000Z</published>
    <updated>2015-08-20T07:58:08.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2585" target="_blank" rel="external">http://www.html-js.com/article/2585</a></p>
</blockquote>
<p>前面介绍了一些 <code>Jade</code> 的简单用法，这篇文章为大家讲一下 <code>Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>
<h2 id="1、Jade_中简单的变量定义和使用">1、<code>Jade</code> 中简单的变量定义和使用</h2><p>我们在写 <code>html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code>Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>
<a id="more"></a>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title Hello,World.</span><br><span class="line">  body</span><br><span class="line">    -<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>    p welcome to #&#123;<span class="ruby">title&#125;</span></span><br></pre></td></tr></table></figure>
<p>我想我们大概能够想象出编译结果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>Hello,World.<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>welcome to sqrtthree.com<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>从上面的代码中我们可以看出，在 <code>Jade</code> 中进行数据传递非常简单：</p>
<ol>
<li>通过<code>-</code> + <code>空格</code>开始，作为标记在 <code>Jade</code> 中定义变量</li>
<li>通过 <code>#{变量名}</code> 进行输出和调用即可.</li>
</ol>
<p>那要是我们就只是想输出 <code>#{}</code>的时候该怎么办呢？转义咯~<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p welcome to \#&#123;<span class="ruby">title&#125;</span>	// =&gt; &lt;p&gt;welcome to #&#123;<span class="ruby">title&#125;</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>另外，在 <code>Jade</code> 里面我们就可以通过这种方式使用 <code>js</code>的语法了，比如这样：(为了看着方便，我就直接在后面写出关键行的编译结果了)<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.toUpperCase()&#125;</span>		// =&gt; &lt;p&gt;welcome to SQRTTHREE.COM&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.charAt(<span class="number">0</span>)&#125;</span>		// =&gt; &lt;p&gt;welcome to s&lt;/p&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span>;</span><br><span class="line"></span>p welcome to #&#123;<span class="ruby">title.substring(<span class="number">0</span>,<span class="number">4</span>)&#125;</span>	// =&gt; &lt;p&gt;welcome to sqrt&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>怎么样？有没有觉得很简单呢。</p>
<p>但是呢，我们在工作中是很少直接在文件中这样直接定义变量值的，通常都是在后台读取到值然后设置到页面中，那我们现在没有后台该怎么办呢？还记得第一篇文章中我们说过的 <code>Jade</code> 命令行工具么？我们可以在 <code>Jade</code> 为我们提供的命令行工具中直接传递数据，话不多说，继续上代码：</p>
<p>我们通过如下的命令编译下面的 <code>Jade</code> 文件，为了方便查看，就只显示部分的编译结果<br><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade <span class="transposed_variable">test.</span>jade  -P --obj <span class="string">'&#123;"</span>title<span class="string">": "</span>sqrtthree<span class="string">"&#125;'</span></span><br></pre></td></tr></table></figure><br><code>Jade</code> 文件如下：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome</span><br><span class="line">  body</span><br><span class="line">    p welcome to <span class="preprocessor">#&#123;title&#125;		// =&gt; <span class="title">&lt;p&gt;</span>welcome to sqrtthree<span class="title">&lt;/p&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们在命令行中和文件中定义了相同名字的变量，那究竟是显示哪一个变量的值呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome</span><br><span class="line">  body</span><br><span class="line">    -<span class="ruby"> var title = <span class="string">'sqrtthree.com'</span></span><br><span class="line"></span>    p welcome to #&#123;<span class="ruby">title&#125;</span>		// =&gt; &lt;p&gt;welcome to sqrtthree.com&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>根据编译结果显示，在文件中定义的值把之前外部传入的值替换掉了。</p>
<p>其实上面的方式中有一个坑不知道大家发现没有，就是通常我们传入数据的时候都不会只传一个的，那如果需要传入很多的数据的话，怎么还能够这么写呢？反正换我我是绝逼会崩溃的。</p>
<p><code>Jade</code> 也支持传入 <code>json</code> 文件的方式进行数据传递的, 例如我们在项目里新建一个 <code>data.json</code> 文件，格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">title</span>": <span class="value"><span class="string">"根号三的博客"</span></span>,</span><br><span class="line">  "<span class="attribute">href</span>": <span class="value"><span class="string">"sqrtthree.com"</span></span>,</span><br><span class="line">  "<span class="attribute">cont</span>": <span class="value"><span class="string">"我可耻，我打了个硬广。^_^"</span></span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure><br>这里我们就要在命令行里执行另一个参数的命令了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade test<span class="class">.jade</span>  -P -O data<span class="class">.json</span>		<span class="comment">// 注意，O 为英文大写</span></span><br></pre></td></tr></table></figure><br>页面和编译结果分别为:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title welcome #&#123;<span class="ruby">title&#125;</span>	// =&gt; &lt;title&gt;welcome 根号三的博客&lt;/title&gt;</span><br><span class="line">  body</span><br><span class="line">    a(href='#&#123;<span class="ruby">href&#125;</span>', title='#&#123;<span class="ruby">title&#125;</span>') #&#123;<span class="ruby">href&#125;</span>		// =&gt; &lt;a href="sqrtthree.com" title="根号三的博客"&gt;sqrtthree.com&lt;/a&gt;</span><br><span class="line">    p #&#123;<span class="ruby">cont&#125;</span>		// =&gt; &lt;p&gt;我可耻，我打了个硬广。^_^&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="2、Jade_中的注释">2、<code>Jade</code> 中的注释</h2><p>变量一多，我们就难免会忘记他们的含义，为了便于后期维护，我们的好习惯是给他们都加上注释方便理解。</p>
<p>单行注释和 JavaScript 里是一样的，通过 <code>//</code> 来开始，并且必须为单独一行哟~<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// just some example		// =&gt; <span class="comment">&lt;!-- just some example--&gt;</span></span><br><span class="line">p just some example		// =&gt; <span class="tag">&lt;<span class="title">p</span>&gt;</span>just some example<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><code>Jade</code> 同样支持不输出的注释，只需要加一个横线 <code>-</code> 就好了<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//- just some example</span></span><br><span class="line"><span class="tag">p</span> just some example		<span class="comment">// =&gt; &lt;p&gt;just some example&lt;/p&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果我们需要多行注释的话，使用下面的块注释也是极好的<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">    <span class="tag">h1</span> this is <span class="tag">a</span> demo.</span><br><span class="line">    <span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>编译结果是这样的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"box"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span><br><span class="line">  h1 this is a demo.</span><br><span class="line">  p this is a paragraph.</span><br><span class="line">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3、流程控制">3、流程控制</h2><p>有了变量，我们就可以做很多事情。比如像下面这样：<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">var</span> <span class="built_in">data</span> = &#123;<span class="string">"name"</span>: <span class="string">"sqrtthree"</span>,<span class="string">"age"</span>: <span class="number">20</span>&#125;;</span><br><span class="line"></span><br><span class="line">- f<span class="subst">or</span> ( <span class="built_in">var</span> attr <span class="keyword">in</span> <span class="built_in">data</span>)</span><br><span class="line">  p= <span class="string">'my '</span> + attr + <span class="string">' is '</span> + <span class="built_in">data</span><span class="preprocessor">[</span>attr<span class="preprocessor">]</span><span class="markup">ighlight html %&#125;</span></span><br></pre></td></tr></table></figure><br>那么结果是什么样的呢？<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;<span class="keyword">my</span> <span class="property">name</span> <span class="keyword">is</span> sqrtthree&lt;/p&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">my</span> age <span class="keyword">is</span> <span class="number">20</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure><br>咦，看着怎么这么熟悉呢？没错，就是 <code>js</code> 中遍历 <code>json</code>对象的操作。当然了，下面这种方式也是可以的，结果和上面是一样的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span><span class="symbol">:</span> <span class="string">"sqrtthree"</span>,<span class="string">"age"</span><span class="symbol">:</span> <span class="number">20</span>&#125;;</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby"> <span class="keyword">for</span> ( var attr <span class="keyword">in</span> data)</span><br><span class="line"></span><span class="comment">  //- p= 'my ' + attr + ' is ' + data[attr]</span></span><br><span class="line">  p my #&#123;<span class="ruby">attr&#125;</span> is #&#123;<span class="ruby">data[attr]&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>当然了，除了 <code>for</code> 之外，<code>Jade</code> 还提供了另外一种语法糖<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = &#123;<span class="string">"name"</span><span class="symbol">:</span> <span class="string">"sqrtthree"</span>,<span class="string">"age"</span><span class="symbol">:</span> <span class="number">20</span>&#125;;</span><br><span class="line"></span></span><br><span class="line">-<span class="ruby"> each value, keys <span class="keyword">in</span> data</span><br><span class="line"></span><span class="comment">  //- p=keys + ' : ' + value</span></span><br><span class="line">  p #&#123;<span class="ruby">keys&#125;</span> : #&#123;<span class="ruby">value&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>说完了 <code>json</code> 对象，我们来说一说他的好搭档 - 数组<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var skills = [<span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'javascript'</span>, <span class="string">'nodejs'</span>];</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  -<span class="ruby"> each skill <span class="keyword">in</span> skills</span><br><span class="line"></span>    li #&#123;<span class="ruby">skill&#125;</span></span><br></pre></td></tr></table></figure><br>编译结果是这个样子的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>什么？太简单了？那我们来点复杂的<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var data = [&#123;<span class="symbol">id:</span> <span class="number">1</span>,<span class="symbol">skills:</span> [<span class="string">'html'</span>, <span class="string">'css'</span>]&#125;,&#123;<span class="symbol">id:</span> <span class="number">2</span>,<span class="symbol">skills:</span> [<span class="string">'javascript'</span>,<span class="string">'nodejs'</span>]&#125;];</span><br><span class="line"></span></span><br><span class="line">dl</span><br><span class="line">  -<span class="ruby"> each list <span class="keyword">in</span> data</span><br><span class="line"></span>    dt #&#123;<span class="ruby">list.id&#125;</span></span><br><span class="line">    -<span class="ruby"> each item <span class="keyword">in</span> list.skills</span><br><span class="line"></span>      dd #&#123;<span class="ruby">item&#125;</span></span><br></pre></td></tr></table></figure><br>结果是这样的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dt</span>&gt;</span>1<span class="tag">&lt;/<span class="title">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>html<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>css<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dt</span>&gt;</span>2<span class="tag">&lt;/<span class="title">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">dd</span>&gt;</span>nodejs<span class="tag">&lt;/<span class="title">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>说完了 <code>for</code> &amp; <code>each</code> 语句，我们还有 <code>while</code> 语句呢，比如我们要输出5个 <code>li</code>，我们可以这么写：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">var</span> <span class="keyword">n</span> = 0;</span><br><span class="line"></span><br><span class="line">ul</span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">n</span> &lt; 5</span><br><span class="line">    <span class="keyword">li</span>=<span class="keyword">n</span>++</span><br></pre></td></tr></table></figure><br>结果很明显：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>0<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>4<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="4、条件判断">4、条件判断</h2><p>关于<code>if else</code>，我们可以这样用<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var onOff = <span class="keyword">true</span>;</span><br><span class="line"></span>-<span class="ruby"> var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  if onOff</span><br><span class="line">    -<span class="ruby">each skills <span class="keyword">in</span> data</span><br><span class="line"></span>      li=skills</span><br><span class="line">  else</span><br><span class="line">    li none</span><br></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为真时，结果为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>html<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>css<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>当 <code>onOff</code> 变量为假时，结果为<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;ul&gt;</span></span><br><span class="line">  <span class="variable">&lt;li&gt;</span><span class="keyword">none</span><span class="variable">&lt;/li&gt;</span></span><br><span class="line"><span class="variable">&lt;/ul&gt;</span></span><br></pre></td></tr></table></figure><br>又见语法糖，<code>Jade</code> 默认是支持 <code>unless</code> 的，那么问题来了，<code>unless</code> 究竟是个什么东东呢？<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> var onOff = <span class="keyword">true</span>;</span><br><span class="line"></span>-<span class="ruby"> var data = [<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'javascript'</span>]</span><br><span class="line"></span></span><br><span class="line">ul</span><br><span class="line">  unless !onOff</span><br><span class="line">    -<span class="ruby">each skills <span class="keyword">in</span> data</span><br><span class="line"></span>      li=skills</span><br><span class="line">  else</span><br><span class="line">    li none</span><br></pre></td></tr></table></figure><br>从上面的代码中，我们可以看出，<code>unless</code> 实际上就是 <code>if ( !(expr) )</code> 的等价方式.</p>
<p>下面我们谈谈 <code>case</code> &amp; <code>when</code> 的用法，编译结果我就不写了，大家可以自行测试。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">var</span> data = <span class="string">'jser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> data</span><br><span class="line">  <span class="keyword">when</span> <span class="string">'jser'</span></span><br><span class="line">    p Hello, jser.</span><br><span class="line">  <span class="keyword">when</span> <span class="string">'weber'</span></span><br><span class="line">    p Hello, weber.</span><br><span class="line">  <span class="keyword">default</span></span><br><span class="line">    p Hello, <span class="preprocessor">#&#123;data&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2585">http://www.html-js.com/article/2585</a></p>
</blockquote>
<p>前面介绍了一些 <code>Jade</code> 的简单用法，这篇文章为大家讲一下 <code>Jade</code> 中如何进行数据的动态传递和流程控制，干货来咯~</p>
<h2 id="1、Jade_中简单的变量定义和使用">1、<code>Jade</code> 中简单的变量定义和使用</h2><p>我们在写 <code>html</code> 静态页面的过程中，免不了会碰到一些需要动态注入的地方，一般的写法就略显麻烦，那么我们有了 <code>Jade</code> 之后呢，不啰嗦了，我们从最简单的例子开始：</p>]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之标签的基本写法]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-02/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-02/</id>
    <published>2015-08-20T07:52:51.000Z</published>
    <updated>2015-08-20T07:52:51.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2575" target="_blank" rel="external">http://www.html-js.com/article/2575</a></p>
</blockquote>
<h2 id="1、文档声明">1、文档声明</h2><p>我们在开始写一个 <code>html</code> 页面的时候，首先要写上 <code>DOCTYPE</code> 文档声明的，现在通常情况下我们都是采用 <code>HTML5</code> 的文档声明方式，那么在 <code>jade</code> 里面我们应该怎么写呢？</p>
<p>在 <code>jade</code> 里面编写文档声明有2种方式：</p>
<ol>
<li>我们可以直接在 <code>jade</code> 文件里面写 <code>doctype html</code> 即可</li>
<li><code>jade</code> 为我们提供了一个简单的写法，<code>!!! 5</code> (不过好像 <code>jade</code> 在升级之后的新版本中不推荐使用此方法了 -_-)</li>
</ol>
<a id="more"></a>
<p>当然，<code>jade</code> 还默认支持其他类型的文档声明，只需要使用 <code>doctype</code> 跟上下面的选项即可。<code>jade</code> 默认支持的有:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var doctypes = exports.doctypes = &#123;</span><br><span class="line">    '5': '<span class="doctype">&lt;!DOCTYPE html&gt;</span>',</span><br><span class="line">    'xml': '<span class="pi">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span>',</span><br><span class="line">    'default': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</span><br><span class="line">    'transitional': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span>',</span><br><span class="line">    'strict': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span>',</span><br><span class="line">    'frameset': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;</span>',</span><br><span class="line">    '1.1': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;</span>',</span><br><span class="line">    'basic': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd"&gt;</span>',</span><br><span class="line">    'mobile': '<span class="doctype">&lt;!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd"&gt;</span>'</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p><code>doctype</code> 对大小写是不敏感的, 所以下面两个是一样的效果:<br><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="keyword">Default</span></span><br><span class="line">doctype <span class="keyword">default</span></span><br></pre></td></tr></table></figure></p>
<p>例如：如果我们要想写 <code>XHTML 1.0 Strict</code> 文档声明，则可以这样写：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">doctype</span> strict</span><br></pre></td></tr></table></figure></p>
<p>编译结果如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、标签">2、标签</h2><p><code>jade</code> 中的标签的写法非常的简单，就是一个单词。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">doctype <span class="tag">html</span></span><br><span class="line"><span class="tag">html</span></span><br><span class="line">  head</span><br><span class="line">    title</span><br><span class="line">  body</span><br></pre></td></tr></table></figure>
<p>以上代码会被编译成:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>jade</code> 是以严格的缩进来区分标签的开始和结束的，默认为2个空格表示缩进。</strong></p>
<p>如果我们要写一个标签并且带有内容，比如说要写一个标题，我们只需要在标签单词后面加一个空格，然后跟上内容即可。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">h1</span> this is <span class="tag">a</span> title.</span><br><span class="line"><span class="tag">p</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>有的时候，我们会需要输出一些特殊排版格式的文本或者是为了提高代码的阅读性，需要显示出如下的效果：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;p&gt;</span></span><br><span class="line">  <span class="keyword">1</span>. 001</span><br><span class="line">  <span class="keyword">2</span>. 002</span><br><span class="line">  <span class="keyword">3</span>. 003</span><br><span class="line">  <span class="keyword">4</span>. 004</span><br><span class="line"><span class="tag">&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><br>那么我们在 jade 中应该怎么写呢，这里 jade 给我们提供了两种方式，第一种是在每一行前面加上一个 <code>|</code> 和<code>空格</code>：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">  | <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  | <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  | <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  | <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure><br>第二种方法是：在标签名后面紧跟一个 <code>.</code> 号。则此标签下面的内容会被 <code>jade</code> 解析为一个代码段：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.</span><br><span class="line">  <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure></p>
<p>这下有的同学就傻傻分不清了，这两种方式到底有什么区别呢？这里我们就不得不说到标签混排，如果我们有这样一个需求，在上面的代码中 <code>1</code> 的后面需要加一个 <code>strong</code> 标签。</p>
<p>首先我们说第一种情况下，我们的写法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">  | <span class="number">1.</span> <span class="number">001</span></span><br><span class="line">  strong aaa</span><br><span class="line">  | <span class="number">2.</span> <span class="number">002</span></span><br><span class="line">  | <span class="number">3.</span> <span class="number">003</span></span><br><span class="line">  | <span class="number">4.</span> <span class="number">004</span></span><br></pre></td></tr></table></figure></p>
<p>如果是第二种写法的话，我们就需要这样写：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.</span><br><span class="line">  1. 001</span><br><span class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>aaa<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line">  2. 002</span><br><span class="line">  3. 003</span><br><span class="line">  4. 004</span><br></pre></td></tr></table></figure></p>
<p>编译结果如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span></span><br><span class="line">  1. 001</span><br><span class="line">  <span class="tag">&lt;<span class="title">strong</span>&gt;</span>aaa<span class="tag">&lt;/<span class="title">strong</span>&gt;</span></span><br><span class="line">  2. 002</span><br><span class="line">  3. 003</span><br><span class="line">  4. 004</span><br><span class="line"><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3、标签的属性和属性值">3、标签的属性和属性值</h2><p><code>h1</code> <code>p</code> 等等这些标签，我们通常都会给他们写上<code>id</code> &amp; <code>class</code>属性的，那么这在 <code>jade</code> 中应该怎么写呢？和 <code>zen coding</code> 的语法一样，我们只需要这样写：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1<span class="id">#id</span><span class="class">.class</span> this is <span class="tag">a</span> title.</span><br><span class="line">p<span class="id">#j-text</span><span class="class">.text</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure>
<p>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>等等，那我要是想添加多个 <code>class</code> 怎么办呢？这样办：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">h1<span class="id">#id</span><span class="class">.class1</span><span class="class">.class2</span><span class="class">.class3</span> this is <span class="tag">a</span> title.</span><br><span class="line">p<span class="id">#j-text</span><span class="class">.text</span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class1 class2 class3"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>什么？写 <code>div</code> 写烦了？那就不写咯。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#id</span><span class="class">.class</span></span><br><span class="line"><span class="id">#id</span><span class="class">.class1</span><span class="class">.class2</span> this is <span class="tag">a</span> <span class="tag">div</span> without tags.</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"id"</span> <span class="type">class</span>=<span class="string">"class"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"id"</span> <span class="type">class</span>=<span class="string">"class1 class2"</span>&gt;this <span class="keyword">is</span> a <span class="keyword">div</span> <span class="keyword">without</span> tags.&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p><strong>这里要说明一下，在 <code>jade</code> 的语法里面，只有 <code>div</code> 标签能够省略不写.</strong></p>
<p>说完了 <code>id</code> 和 <code>class</code>，我们再来说一下标签其他的属性应该怎么添加。<code>jade</code> 里添加其他属性和值的语法也和 <code>zen coding</code> 类似，我们需要在标签后面加上小括号<code>()</code>，然后按照<code>(属性名=属性值)</code>的格式写就好了，如果有多个属性，中间以逗号进行分割。</p>
<p>比如上面的 id 和 class 的写法我们就可以改写成：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">h1</span><span class="params">(id=<span class="string">"id"</span>, class=<span class="string">"class"</span>)</span></span> this is <span class="tag">a</span> title.</span><br><span class="line"><span class="function"><span class="title">p</span><span class="params">(id=<span class="string">"j-text"</span>, class=<span class="string">"text"</span>)</span></span> this is <span class="tag">a</span> paragraph.</span><br></pre></td></tr></table></figure><br>结果是一样的：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=<span class="string">"id"</span> <span class="keyword">class</span>=<span class="string">"class"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a title.&lt;/h1&gt;</span><br><span class="line">&lt;p id=<span class="string">"j-text"</span> <span class="keyword">class</span>=<span class="string">"text"</span>&gt;<span class="keyword">this</span> <span class="keyword">is</span> a paragraph.&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>说来说去还是这两个属性，烦了？那我们换一个吧：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">a</span><span class="params">(herf=<span class="string">"/index.html"</span>, title=<span class="string">"this is a link."</span>, target=<span class="string">"_blank"</span>, data-uid=<span class="string">"1000"</span>)</span></span> index.html</span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">herf</span>=<span class="value">"/index.html"</span> <span class="attribute">title</span>=<span class="value">"this is a link."</span> <span class="attribute">target</span>=<span class="value">"_blank"</span> <span class="attribute">data-uid</span>=<span class="value">"1000"</span>&gt;</span>index.html<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>那么问题就来了，如果我们要写一个单属性应该怎么写？比如给表单元素添加 <code>checked</code>属性：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">input</span><span class="params">(type=<span class="string">"checkbox"</span>, name=<span class="string">"all"</span>, checked, value=<span class="string">"全选"</span>)</span></span></span><br></pre></td></tr></table></figure><br>编译结果为：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"all"</span> <span class="keyword">checked</span>=<span class="string">"checked"</span> <span class="keyword">value</span>=<span class="string">"全选"</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[前端开发模板引擎 -- Jade之开篇]]></title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-01/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-01/</id>
    <published>2015-08-20T07:19:56.000Z</published>
    <updated>2015-08-20T07:19:56.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>文章首发于前端乱炖社区, 现在搬迁过来了. <a href="http://www.html-js.com/article/2570" target="_blank" rel="external">http://www.html-js.com/article/2570</a></p>
</blockquote>
<p>随着 web 发展，前端应用变得越来越复杂，基于后端的 <code>javascript(Node.js)</code> 也开始崭露头角，此时  <code>javascript</code> 被寄予了更大的期望，与此同时 <code>javascript MVC</code> 思想也开始流行起来。为了使用户界面与业务数据（内容）分离，就产生了『模板引擎』这个概念。</p>
<p>说的简单点，模板引擎就是一个字符串中有几个变量待定，通过模板引擎函数把数据动态的塞进去。</p>
<p>今天我们就来聊一聊 <code>Jade</code> 的使用方法和语法说明。<code>Jade</code>官网：<a href="http://jade-lang.com/" target="_blank" rel="external">jade-lang.com/</a></p>
<a id="more"></a>
<h2 id="Jade_的使用和命令行工具构建方法">Jade 的使用和命令行工具构建方法</h2><p>Jade 的使用需要依赖 <code>Node</code>环境，通过 <code>npm</code> 包进行安装 <code>Jade</code> 命令行工具，安装成功之后就可以新建一个文件，文件后缀名为 <code>*.jade</code>。我们就可以尽情的使用 <code>jade</code> 的语法咯，写完之后只需要通过命令行工具进行编译即可编译为我们平时使用的 <code>html</code> 静态文件。</p>
<h3 id="安装方法">安装方法</h3><p>1.首先确定是否安装有 <code>Node</code> 环境和 <code>npm</code> 工具，查看方法如下</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在命令行工具中执行如下代码：</span><br><span class="line">node -v</span><br><span class="line">=&gt; v0<span class="number">.10</span><span class="number">.35</span></span><br><span class="line">npm -v</span><br><span class="line">=&gt; <span class="number">1.4</span><span class="number">.28</span></span><br><span class="line"><span class="comment">// 如果成功返回版本号信息即为安装成功。</span></span><br></pre></td></tr></table></figure>
<p>2.通过 <code>npm</code> 全局安装 <code>Jade</code> 命令行工具</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> jade -<span class="keyword">g</span></span><br><span class="line"></span><br><span class="line">// mac用户可能需要管理员权限，使用如下命令</span><br><span class="line">sudo npm <span class="keyword">install</span> jade -<span class="keyword">g</span></span></span><br></pre></td></tr></table></figure>
<p>3.创建 <code>*.Jade</code> 文件，开始任务。</p>
<p>4.通过使用 <code>Jade</code> 命令行工具将 <code>jade</code> 文件编译为 <code>html</code> 文件</p>
<h3 id="Jade_命令行工具使用方法">Jade 命令行工具使用方法</h3><p>我们可以通过 <code>jade --help</code> 查看 <code>Jade</code> 命令行工具的使用参数</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">jade <span class="comment">--help</span></span><br><span class="line"></span><br><span class="line">Usage: jade [options] [dir|<span class="type">file</span> ...]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -h, <span class="comment">--help         output usage information / 输出使用信息</span></span><br><span class="line">    -V, <span class="comment">--version      output the version number / 输出版本号信息</span></span><br><span class="line">    -O, <span class="comment">--obj &lt;str&gt;    javascript options object / 传输到 jade 文件中的数据对象</span></span><br><span class="line">    -o, <span class="comment">--out &lt;dir&gt;    output the compiled html to &lt;dir&gt; / 输出编译后的 HTML 到 &lt;dir&gt;</span></span><br><span class="line">    -p, <span class="comment">--path &lt;path&gt;  filename used to resolve includes / 在处理 stdio 时，查找包含文件时的查找路径</span></span><br><span class="line">    -P, <span class="comment">--pretty       compile pretty html output / 格式化编译 html 文件</span></span><br><span class="line">    -c, <span class="comment">--client       compile function for client-side runtime.js / 编译浏览器端可用的 runtime.js</span></span><br><span class="line">    -n, <span class="comment">--name &lt;str&gt;   The name of the compiled template (requires --client) / 编译模板的名字</span></span><br><span class="line">    -D, <span class="comment">--no-debug     compile without debugging (smaller functions) / 关闭编译的调试选项(函数会更小)</span></span><br><span class="line">    -w, <span class="comment">--watch        watch files for changes and automatically re-render / 监听文件改变并自动刷新编译结果</span></span><br><span class="line">    <span class="comment">--name-after-file  Name the template after the last section of the file path (requires --client and overriden by --name)</span></span><br><span class="line">    <span class="comment">--doctype &lt;str&gt;    Specify the doctype on the command line (useful if it is not specified by the template) / 在命令行中指定文档类型(如果在模板中没有被指定)</span></span><br><span class="line"></span><br><span class="line">  Examples:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编译整个目录</span></span><br><span class="line">    $ jade templates</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成 &#123;foo,bar&#125;.html</span></span><br><span class="line">    $ jade &#123;foo,bar&#125;.jade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在标准IO下使用jade</span></span><br><span class="line">    $ jade &lt; <span class="keyword">my</span>.jade &gt; <span class="keyword">my</span>.html</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在标准IO下使用jade</span></span><br><span class="line">    $ echo 'h1 Jade!' | jade</span><br><span class="line"></span><br><span class="line">    <span class="comment"># foo, bar 目录渲染到 /tmp</span></span><br><span class="line">    $ jade foo bar <span class="comment">--out /tmp</span></span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如说我们需要编译index.jade文件，默认编译到同文件夹下的同名html 文件中</span></span><br><span class="line">jade index<span class="class">.jade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们要格式化输出 index.html 文件，只需要添加 -P 参数即可</span></span><br><span class="line">jade -P index<span class="class">.jade</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们要实现监听和自动编译，需要使用 -w 参数</span></span><br><span class="line">jade -P -w index.jade</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="您的鼓励是作者写作最大的动力">您的鼓励是作者写作最大的动力</h2><p>如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 <code>sqrtthree@foxmail.com</code>, <a href="http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG" target="_blank" rel="external">点击查看二维码</a></p>
]]></content>
    <summary type="html">
    <![CDATA[写一些我所知道的 jade 语法]]>
    
    </summary>
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://blog.sqrtthree.com/2015/06/27/hello-world/"/>
    <id>http://blog.sqrtthree.com/2015/06/27/hello-world/</id>
    <published>2015-06-27T12:30:41.000Z</published>
    <updated>2015-06-27T12:30:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="About_Me">About Me</h2><p>I’m a Front-End developer in everywhere, now living in ZhengZhou, China.</p>
<p>I’m ❤  programming &amp; Front-end design.</p>
<h2 id="Skills">Skills</h2><ul>
<li>HTML5&amp;CSS3    <code>*****</code></li>
<li>Javascript    <code>********</code></li>
<li>Nodejs        <code>**</code></li>
</ul>
<h2 id="Tools">Tools</h2><ul>
<li>mac &amp; vim</li>
</ul>
<h2 id="Contact_Me">Contact Me</h2><ul>
<li>E-mail:    <a href="mailto:sqrtthree@foxmail.com" target="_blank" rel="external">sqrtthree@foxmail.com</a></li>
<li>Github:    <a href="https://github.com/sqrthree" target="_blank" rel="external">@sqrthree</a></li>
<li>Twitter:    <a href="https://twitter.com/sqrtthree" target="_blank" rel="external">@sqrtthree</a></li>
<li>Weibo:    <a href="http://weibo.com/sqrtthree" target="_blank" rel="external">@sqrtthree</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="About_Me">About Me</h2><p>I’m a Front-End developer in everywhere, now living in ZhengZhou, China.</p>
<p>I’m ❤  programming &amp; F]]>
    </summary>
    
  </entry>
  
</feed>
